"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EnergyType(str, Enum):
    r"""Type of energy used by the vehicle  Valid values: `fuel`, `hybrid`, `electric`"""

    FUEL = "fuel"
    HYBRID = "hybrid"
    ELECTRIC = "electric"


class FuelEnergyVehicleObjectResponseBodyTypedDict(TypedDict):
    r"""A minified vehicle object."""

    energy_type: EnergyType
    r"""Type of energy used by the vehicle  Valid values: `fuel`, `hybrid`, `electric`"""
    external_ids: NotRequired[Dict[str, str]]
    r"""A map of external ids"""
    id: NotRequired[str]
    r"""ID of the vehicle"""
    name: NotRequired[str]
    r"""Name of the vehicle"""


class FuelEnergyVehicleObjectResponseBody(BaseModel):
    r"""A minified vehicle object."""

    energy_type: Annotated[EnergyType, pydantic.Field(alias="energyType")]
    r"""Type of energy used by the vehicle  Valid values: `fuel`, `hybrid`, `electric`"""

    external_ids: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="externalIds")
    ] = None
    r"""A map of external ids"""

    id: Optional[str] = None
    r"""ID of the vehicle"""

    name: Optional[str] = None
    r"""Name of the vehicle"""
