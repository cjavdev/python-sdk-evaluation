"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .routesettingsresponsebody import (
    RouteSettingsResponseBody,
    RouteSettingsResponseBodyTypedDict,
)
from .routesstopresponseobjectresponsebody import (
    RoutesStopResponseObjectResponseBody,
    RoutesStopResponseObjectResponseBodyTypedDict,
)
from datetime import datetime
import pydantic
from samsara.types import BaseModel
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WebhookRouteResponseObjectResponseBodyTypedDict(TypedDict):
    id: str
    r"""ID of the route"""
    actual_route_end_time: NotRequired[datetime]
    r"""Actual end time, if it exists, for the route in RFC 3339 format."""
    actual_route_start_time: NotRequired[datetime]
    r"""Actual start time, if it exists, for the route in RFC 3339 format."""
    external_ids: NotRequired[Dict[str, str]]
    r"""A map of external ids"""
    name: NotRequired[str]
    r"""Route name"""
    notes: NotRequired[str]
    r"""Notes for the route"""
    scheduled_route_end_time: NotRequired[datetime]
    r"""Scheduled end time, if it exists, for the route in RFC 3339 format."""
    scheduled_route_start_time: NotRequired[datetime]
    r"""Scheduled start time, if it exists, for the route in RFC 3339 format."""
    settings: NotRequired[RouteSettingsResponseBodyTypedDict]
    r"""An optional dictionary, only necessary to override the defaults for route start and end conditions."""
    stops: NotRequired[List[RoutesStopResponseObjectResponseBodyTypedDict]]
    r"""List of stops along the route"""


class WebhookRouteResponseObjectResponseBody(BaseModel):
    id: str
    r"""ID of the route"""

    actual_route_end_time: Annotated[
        Optional[datetime], pydantic.Field(alias="actualRouteEndTime")
    ] = None
    r"""Actual end time, if it exists, for the route in RFC 3339 format."""

    actual_route_start_time: Annotated[
        Optional[datetime], pydantic.Field(alias="actualRouteStartTime")
    ] = None
    r"""Actual start time, if it exists, for the route in RFC 3339 format."""

    external_ids: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="externalIds")
    ] = None
    r"""A map of external ids"""

    name: Optional[str] = None
    r"""Route name"""

    notes: Optional[str] = None
    r"""Notes for the route"""

    scheduled_route_end_time: Annotated[
        Optional[datetime], pydantic.Field(alias="scheduledRouteEndTime")
    ] = None
    r"""Scheduled end time, if it exists, for the route in RFC 3339 format."""

    scheduled_route_start_time: Annotated[
        Optional[datetime], pydantic.Field(alias="scheduledRouteStartTime")
    ] = None
    r"""Scheduled start time, if it exists, for the route in RFC 3339 format."""

    settings: Optional[RouteSettingsResponseBody] = None
    r"""An optional dictionary, only necessary to override the defaults for route start and end conditions."""

    stops: Optional[List[RoutesStopResponseObjectResponseBody]] = None
    r"""List of stops along the route"""
