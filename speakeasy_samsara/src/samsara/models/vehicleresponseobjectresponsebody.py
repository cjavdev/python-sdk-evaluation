"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .driverobjectresponsebody import (
    DriverObjectResponseBody,
    DriverObjectResponseBodyTypedDict,
)
from .goaattributetinyresponsebody import (
    GoaAttributeTinyResponseBody,
    GoaAttributeTinyResponseBodyTypedDict,
)
from .goagatewaytinyresponseresponsebody import (
    GoaGatewayTinyResponseResponseBody,
    GoaGatewayTinyResponseResponseBodyTypedDict,
)
from .goatagtinyresponseresponsebody import (
    GoaTagTinyResponseResponseBody,
    GoaTagTinyResponseResponseBodyTypedDict,
)
from .vehiclesensorconfigurationresponsebody import (
    VehicleSensorConfigurationResponseBody,
    VehicleSensorConfigurationResponseBodyTypedDict,
)
from datetime import datetime
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class VehicleResponseObjectResponseBodyVehicleRegulationMode(str, Enum):
    r"""Whether the vehicle is regulated or unregulated (non-CMV).  Valid values: `regulated`, `unregulated`"""

    REGULATED = "regulated"
    UNREGULATED = "unregulated"


class VehicleType(str, Enum):
    r"""The type of the vehicle. Only returned for customers with commercial speed limits (CSL) enabled.  Valid values: `unset`, `passenger`, `truck`, `bus`"""

    UNSET = "unset"
    PASSENGER = "passenger"
    TRUCK = "truck"
    BUS = "bus"


class VehicleResponseObjectResponseBodyTypedDict(TypedDict):
    r"""A single vehicle"""

    created_at_time: datetime
    r"""Time the vehicle was created in RFC 3339 format."""
    id: str
    r"""ID of the vehicle"""
    attributes: NotRequired[List[GoaAttributeTinyResponseBodyTypedDict]]
    r"""List of attributes associated with the entity"""
    aux_input_type1: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type10: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type11: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type12: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type13: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type2: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type3: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type4: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type5: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type6: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type7: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type8: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    aux_input_type9: NotRequired[str]
    r"""The type of auxiliary input configured for this Vehicle."""
    camera_serial: NotRequired[str]
    r"""The serial number of the camera installed in the vehicle"""
    esn: NotRequired[str]
    r"""Engine serial number."""
    external_ids: NotRequired[Dict[str, str]]
    r"""A map of external ids"""
    gateway: NotRequired[GoaGatewayTinyResponseResponseBodyTypedDict]
    r"""A minified gateway object"""
    harsh_acceleration_setting_type: NotRequired[str]
    r"""The harsh acceleration setting type."""
    license_plate: NotRequired[str]
    r"""The license plate of the vehicle."""
    make: NotRequired[str]
    r"""The Vehicle’s manufacturing make."""
    model: NotRequired[str]
    r"""The Vehicle’s manufacturing model."""
    name: NotRequired[str]
    r"""Name of the vehicle"""
    notes: NotRequired[str]
    r"""These are generic notes about the Vehicle."""
    sensor_configuration: NotRequired[VehicleSensorConfigurationResponseBodyTypedDict]
    r"""The sensors configured on a vehicle"""
    serial: NotRequired[str]
    r"""The serial number of the gateway installed in the vehicle."""
    static_assigned_driver: NotRequired[DriverObjectResponseBodyTypedDict]
    r"""Current driver of the vehicle. Note: this parameter includes all assignment sources, not just static assignments."""
    tags: NotRequired[List[GoaTagTinyResponseResponseBodyTypedDict]]
    r"""The list of tags associated with the Vehicle."""
    updated_at_time: NotRequired[datetime]
    r"""Time the vehicle was updated in RFC 3339 format."""
    vehicle_regulation_mode: NotRequired[
        VehicleResponseObjectResponseBodyVehicleRegulationMode
    ]
    r"""Whether the vehicle is regulated or unregulated (non-CMV).  Valid values: `regulated`, `unregulated`"""
    vehicle_type: NotRequired[VehicleType]
    r"""The type of the vehicle. Only returned for customers with commercial speed limits (CSL) enabled.  Valid values: `unset`, `passenger`, `truck`, `bus`"""
    vehicle_weight: NotRequired[int]
    r"""The weight of the vehicle in either pounds (lb) or kilograms (kg). Unit of weight is unknown. Only returned for customers with commercial speed limits (CSL) enabled."""
    vehicle_weight_in_kilograms: NotRequired[int]
    r"""The weight of the vehicle in kilograms (kg). Only returned for customers with commercial speed limits (CSL) enabled."""
    vehicle_weight_in_pounds: NotRequired[int]
    r"""The weight of the vehicle in pounds (lb). Only returned for customers with commercial speed limits (CSL) enabled."""
    vin: NotRequired[str]
    r"""The VIN of the vehicle."""
    year: NotRequired[str]


class VehicleResponseObjectResponseBody(BaseModel):
    r"""A single vehicle"""

    created_at_time: Annotated[datetime, pydantic.Field(alias="createdAtTime")]
    r"""Time the vehicle was created in RFC 3339 format."""

    id: str
    r"""ID of the vehicle"""

    attributes: Optional[List[GoaAttributeTinyResponseBody]] = None
    r"""List of attributes associated with the entity"""

    aux_input_type1: Annotated[Optional[str], pydantic.Field(alias="auxInputType1")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type10: Annotated[
        Optional[str], pydantic.Field(alias="auxInputType10")
    ] = None
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type11: Annotated[
        Optional[str], pydantic.Field(alias="auxInputType11")
    ] = None
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type12: Annotated[
        Optional[str], pydantic.Field(alias="auxInputType12")
    ] = None
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type13: Annotated[
        Optional[str], pydantic.Field(alias="auxInputType13")
    ] = None
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type2: Annotated[Optional[str], pydantic.Field(alias="auxInputType2")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type3: Annotated[Optional[str], pydantic.Field(alias="auxInputType3")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type4: Annotated[Optional[str], pydantic.Field(alias="auxInputType4")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type5: Annotated[Optional[str], pydantic.Field(alias="auxInputType5")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type6: Annotated[Optional[str], pydantic.Field(alias="auxInputType6")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type7: Annotated[Optional[str], pydantic.Field(alias="auxInputType7")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type8: Annotated[Optional[str], pydantic.Field(alias="auxInputType8")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    aux_input_type9: Annotated[Optional[str], pydantic.Field(alias="auxInputType9")] = (
        None
    )
    r"""The type of auxiliary input configured for this Vehicle."""

    camera_serial: Annotated[Optional[str], pydantic.Field(alias="cameraSerial")] = None
    r"""The serial number of the camera installed in the vehicle"""

    esn: Optional[str] = None
    r"""Engine serial number."""

    external_ids: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="externalIds")
    ] = None
    r"""A map of external ids"""

    gateway: Optional[GoaGatewayTinyResponseResponseBody] = None
    r"""A minified gateway object"""

    harsh_acceleration_setting_type: Annotated[
        Optional[str], pydantic.Field(alias="harshAccelerationSettingType")
    ] = None
    r"""The harsh acceleration setting type."""

    license_plate: Annotated[Optional[str], pydantic.Field(alias="licensePlate")] = None
    r"""The license plate of the vehicle."""

    make: Optional[str] = None
    r"""The Vehicle’s manufacturing make."""

    model: Optional[str] = None
    r"""The Vehicle’s manufacturing model."""

    name: Optional[str] = None
    r"""Name of the vehicle"""

    notes: Optional[str] = None
    r"""These are generic notes about the Vehicle."""

    sensor_configuration: Annotated[
        Optional[VehicleSensorConfigurationResponseBody],
        pydantic.Field(alias="sensorConfiguration"),
    ] = None
    r"""The sensors configured on a vehicle"""

    serial: Optional[str] = None
    r"""The serial number of the gateway installed in the vehicle."""

    static_assigned_driver: Annotated[
        Optional[DriverObjectResponseBody], pydantic.Field(alias="staticAssignedDriver")
    ] = None
    r"""Current driver of the vehicle. Note: this parameter includes all assignment sources, not just static assignments."""

    tags: Optional[List[GoaTagTinyResponseResponseBody]] = None
    r"""The list of tags associated with the Vehicle."""

    updated_at_time: Annotated[
        Optional[datetime], pydantic.Field(alias="updatedAtTime")
    ] = None
    r"""Time the vehicle was updated in RFC 3339 format."""

    vehicle_regulation_mode: Annotated[
        Optional[VehicleResponseObjectResponseBodyVehicleRegulationMode],
        pydantic.Field(alias="vehicleRegulationMode"),
    ] = None
    r"""Whether the vehicle is regulated or unregulated (non-CMV).  Valid values: `regulated`, `unregulated`"""

    vehicle_type: Annotated[
        Optional[VehicleType], pydantic.Field(alias="vehicleType")
    ] = None
    r"""The type of the vehicle. Only returned for customers with commercial speed limits (CSL) enabled.  Valid values: `unset`, `passenger`, `truck`, `bus`"""

    vehicle_weight: Annotated[Optional[int], pydantic.Field(alias="vehicleWeight")] = (
        None
    )
    r"""The weight of the vehicle in either pounds (lb) or kilograms (kg). Unit of weight is unknown. Only returned for customers with commercial speed limits (CSL) enabled."""

    vehicle_weight_in_kilograms: Annotated[
        Optional[int], pydantic.Field(alias="vehicleWeightInKilograms")
    ] = None
    r"""The weight of the vehicle in kilograms (kg). Only returned for customers with commercial speed limits (CSL) enabled."""

    vehicle_weight_in_pounds: Annotated[
        Optional[int], pydantic.Field(alias="vehicleWeightInPounds")
    ] = None
    r"""The weight of the vehicle in pounds (lb). Only returned for customers with commercial speed limits (CSL) enabled."""

    vin: Optional[str] = None
    r"""The VIN of the vehicle."""

    year: Optional[str] = None
