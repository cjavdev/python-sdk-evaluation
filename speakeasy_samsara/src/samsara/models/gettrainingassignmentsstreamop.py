"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .trainingassignmentsgettrainingassignmentsstreambadrequesterrorresponsebody import (
    TrainingAssignmentsGetTrainingAssignmentsStreamBadRequestErrorResponseBody,
    TrainingAssignmentsGetTrainingAssignmentsStreamBadRequestErrorResponseBodyTypedDict,
)
from .trainingassignmentsgettrainingassignmentsstreamresponsebody import (
    TrainingAssignmentsGetTrainingAssignmentsStreamResponseBody,
    TrainingAssignmentsGetTrainingAssignmentsStreamResponseBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetTrainingAssignmentsStreamRequestTypedDict(TypedDict):
    start_time: str
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    end_time: NotRequired[str]
    r"""An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    learner_ids: NotRequired[List[str]]
    r"""Optional string of comma separated learner IDs. If learner ID is present, training assignments for the specified learner(s) will be returned. Max value for this value is 100 objects. Example: `learnerIds=driver-281474,driver-46282156`"""
    course_ids: NotRequired[List[str]]
    r"""Optional string of comma separated course IDs. If course ID is present, training assignments for the specified course ID(s) will be returned. Max value for this value is 100 objects. Defaults to returning all courses. Example: `courseIds=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`"""
    status: NotRequired[List[str]]
    r"""Optional string of comma separated values. If status is present, training assignments for the specified status(s) will be returned. Valid values: \"notStarted\", \"inProgress\", \"completed\". Defaults to returning all courses."""


class GetTrainingAssignmentsStreamRequest(BaseModel):
    start_time: Annotated[
        str,
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    end_time: Annotated[
        Optional[str],
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    learner_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="learnerIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional string of comma separated learner IDs. If learner ID is present, training assignments for the specified learner(s) will be returned. Max value for this value is 100 objects. Example: `learnerIds=driver-281474,driver-46282156`"""

    course_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="courseIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional string of comma separated course IDs. If course ID is present, training assignments for the specified course ID(s) will be returned. Max value for this value is 100 objects. Defaults to returning all courses. Example: `courseIds=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`"""

    status: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional string of comma separated values. If status is present, training assignments for the specified status(s) will be returned. Valid values: \"notStarted\", \"inProgress\", \"completed\". Defaults to returning all courses."""


GetTrainingAssignmentsStreamResponseTypedDict = TypeAliasType(
    "GetTrainingAssignmentsStreamResponseTypedDict",
    Union[
        TrainingAssignmentsGetTrainingAssignmentsStreamResponseBodyTypedDict,
        TrainingAssignmentsGetTrainingAssignmentsStreamBadRequestErrorResponseBodyTypedDict,
    ],
)


GetTrainingAssignmentsStreamResponse = TypeAliasType(
    "GetTrainingAssignmentsStreamResponse",
    Union[
        TrainingAssignmentsGetTrainingAssignmentsStreamResponseBody,
        TrainingAssignmentsGetTrainingAssignmentsStreamBadRequestErrorResponseBody,
    ],
)
