"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .formsassetobjectresponsebody import (
    FormsAssetObjectResponseBody,
    FormsAssetObjectResponseBodyTypedDict,
)
from .formsmediarecordobjectresponsebody import (
    FormsMediaRecordObjectResponseBody,
    FormsMediaRecordObjectResponseBodyTypedDict,
)
from .formspolymorphicuserobjectresponsebody import (
    FormsPolymorphicUserObjectResponseBody,
    FormsPolymorphicUserObjectResponseBodyTypedDict,
)
from .issuesourceobjectresponsebody import (
    IssueSourceObjectResponseBody,
    IssueSourceObjectResponseBodyTypedDict,
)
from datetime import datetime
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Priority(str, Enum):
    r"""Priority of the issue. Included if the issue was assigned a priority.  Valid values: `low`, `medium`, `high`"""

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"


class IssueResponseObjectResponseBodyStatus(str, Enum):
    r"""Status of the issue.  Valid values: `open`, `inProgress`, `resolved`, `dismissed`"""

    OPEN = "open"
    IN_PROGRESS = "inProgress"
    RESOLVED = "resolved"
    DISMISSED = "dismissed"


class IssueResponseObjectResponseBodyTypedDict(TypedDict):
    r"""Issue response object."""

    created_at_time: datetime
    r"""Creation time of the issue. UTC timestamp in RFC 3339 format."""
    id: str
    r"""ID of the issue."""
    issue_source: IssueSourceObjectResponseBodyTypedDict
    r"""Contains information about where an issue came from."""
    status: IssueResponseObjectResponseBodyStatus
    r"""Status of the issue.  Valid values: `open`, `inProgress`, `resolved`, `dismissed`"""
    submitted_at_time: datetime
    r"""Submission time of the issue. UTC timestamp in RFC 3339 format."""
    submitted_by: FormsPolymorphicUserObjectResponseBodyTypedDict
    r"""User or driver object."""
    title: str
    r"""Title of the issue."""
    updated_at_time: datetime
    r"""Update time of the issue. UTC timestamp in RFC 3339 format."""
    asset: NotRequired[FormsAssetObjectResponseBodyTypedDict]
    r"""Tracked or untracked (i.e. manually entered) asset object."""
    assigned_to: NotRequired[FormsPolymorphicUserObjectResponseBodyTypedDict]
    r"""User or driver object."""
    description: NotRequired[str]
    r"""Description of the issue. Included if the issue was given a description."""
    due_date: NotRequired[datetime]
    r"""Due date of the issue. UTC timestamp in RFC 3339 format. Included if the issue was assigned a due date."""
    external_ids: NotRequired[Dict[str, str]]
    r"""A map of external ids"""
    media_list: NotRequired[List[FormsMediaRecordObjectResponseBodyTypedDict]]
    r"""List of media objects for the issue. Included if the issue has media."""
    priority: NotRequired[Priority]
    r"""Priority of the issue. Included if the issue was assigned a priority.  Valid values: `low`, `medium`, `high`"""


class IssueResponseObjectResponseBody(BaseModel):
    r"""Issue response object."""

    created_at_time: Annotated[datetime, pydantic.Field(alias="createdAtTime")]
    r"""Creation time of the issue. UTC timestamp in RFC 3339 format."""

    id: str
    r"""ID of the issue."""

    issue_source: Annotated[
        IssueSourceObjectResponseBody, pydantic.Field(alias="issueSource")
    ]
    r"""Contains information about where an issue came from."""

    status: IssueResponseObjectResponseBodyStatus
    r"""Status of the issue.  Valid values: `open`, `inProgress`, `resolved`, `dismissed`"""

    submitted_at_time: Annotated[datetime, pydantic.Field(alias="submittedAtTime")]
    r"""Submission time of the issue. UTC timestamp in RFC 3339 format."""

    submitted_by: Annotated[
        FormsPolymorphicUserObjectResponseBody, pydantic.Field(alias="submittedBy")
    ]
    r"""User or driver object."""

    title: str
    r"""Title of the issue."""

    updated_at_time: Annotated[datetime, pydantic.Field(alias="updatedAtTime")]
    r"""Update time of the issue. UTC timestamp in RFC 3339 format."""

    asset: Optional[FormsAssetObjectResponseBody] = None
    r"""Tracked or untracked (i.e. manually entered) asset object."""

    assigned_to: Annotated[
        Optional[FormsPolymorphicUserObjectResponseBody],
        pydantic.Field(alias="assignedTo"),
    ] = None
    r"""User or driver object."""

    description: Optional[str] = None
    r"""Description of the issue. Included if the issue was given a description."""

    due_date: Annotated[Optional[datetime], pydantic.Field(alias="dueDate")] = None
    r"""Due date of the issue. UTC timestamp in RFC 3339 format. Included if the issue was assigned a due date."""

    external_ids: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="externalIds")
    ] = None
    r"""A map of external ids"""

    media_list: Annotated[
        Optional[List[FormsMediaRecordObjectResponseBody]],
        pydantic.Field(alias="mediaList"),
    ] = None
    r"""List of media objects for the issue. Included if the issue has media."""

    priority: Optional[Priority] = None
    r"""Priority of the issue. Included if the issue was assigned a priority.  Valid values: `low`, `medium`, `high`"""
