"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .attributeexpandedresponse import (
    AttributeExpandedResponse,
    AttributeExpandedResponseTypedDict,
)
from .standarderrorresponse import StandardErrorResponse, StandardErrorResponseTypedDict
from enum import Enum
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from typing import Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class GetAttributeQueryParamEntityType(str, Enum):
    r"""Denotes the type of entity, driver or asset."""

    DRIVER = "driver"
    ASSET = "asset"


class GetAttributeRequestTypedDict(TypedDict):
    id: str
    r"""Samsara-provided UUID of the attribute."""
    entity_type: GetAttributeQueryParamEntityType
    r"""Denotes the type of entity, driver or asset."""


class GetAttributeRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Samsara-provided UUID of the attribute."""

    entity_type: Annotated[
        GetAttributeQueryParamEntityType,
        pydantic.Field(alias="entityType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Denotes the type of entity, driver or asset."""


GetAttributeResponseTypedDict = TypeAliasType(
    "GetAttributeResponseTypedDict",
    Union[AttributeExpandedResponseTypedDict, StandardErrorResponseTypedDict],
)


GetAttributeResponse = TypeAliasType(
    "GetAttributeResponse", Union[AttributeExpandedResponse, StandardErrorResponse]
)
