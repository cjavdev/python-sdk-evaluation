"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .iftagetiftavehiclereportsbadrequesterrorresponsebody import (
    IFTAGetIFTAVehicleReportsBadRequestErrorResponseBody,
    IFTAGetIFTAVehicleReportsBadRequestErrorResponseBodyTypedDict,
)
from .iftagetiftavehiclereportsresponsebody import (
    IFTAGetIFTAVehicleReportsResponseBody,
    IFTAGetIFTAVehicleReportsResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class QueryParamMonth(str, Enum):
    r"""The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: `month=January`  Valid values: `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November`, `December`"""

    JANUARY = "January"
    FEBRUARY = "February"
    MARCH = "March"
    APRIL = "April"
    MAY = "May"
    JUNE = "June"
    JULY = "July"
    AUGUST = "August"
    SEPTEMBER = "September"
    OCTOBER = "October"
    NOVEMBER = "November"
    DECEMBER = "December"


class QueryParamQuarter(str, Enum):
    r"""The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: `quarter=Q1`  Valid values: `Q1`, `Q2`, `Q3`, `Q4`"""

    Q1 = "Q1"
    Q2 = "Q2"
    Q3 = "Q3"
    Q4 = "Q4"


class QueryParamFuelType(str, Enum):
    r"""A filter on the data based on this comma-separated list of IFTA fuel types. Example: `fuelType=Diesel`  Valid values: `Unspecified`, `A55`, `Biodiesel`, `CompressedNaturalGas`, `Diesel`, `E85`, `Electricity`, `Ethanol`, `Gasohol`, `Gasoline`, `Hydrogen`, `LiquifiedNaturalGas`, `M85`, `Methanol`, `Propane`, `Other`"""

    UNSPECIFIED = "Unspecified"
    A55 = "A55"
    BIODIESEL = "Biodiesel"
    COMPRESSED_NATURAL_GAS = "CompressedNaturalGas"
    DIESEL = "Diesel"
    E85 = "E85"
    ELECTRICITY = "Electricity"
    ETHANOL = "Ethanol"
    GASOHOL = "Gasohol"
    GASOLINE = "Gasoline"
    HYDROGEN = "Hydrogen"
    LIQUIFIED_NATURAL_GAS = "LiquifiedNaturalGas"
    M85 = "M85"
    METHANOL = "Methanol"
    PROPANE = "Propane"
    OTHER = "Other"


class GetIftaVehicleReportsRequestTypedDict(TypedDict):
    year: int
    r"""The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: `year=2021`"""
    month: NotRequired[QueryParamMonth]
    r"""The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: `month=January`  Valid values: `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November`, `December`"""
    quarter: NotRequired[QueryParamQuarter]
    r"""The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: `quarter=Q1`  Valid values: `Q1`, `Q2`, `Q3`, `Q4`"""
    jurisdictions: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of jurisdictions. Example: `jurisdictions=GA`"""
    fuel_type: NotRequired[QueryParamFuelType]
    r"""A filter on the data based on this comma-separated list of IFTA fuel types. Example: `fuelType=Diesel`  Valid values: `Unspecified`, `A55`, `Biodiesel`, `CompressedNaturalGas`, `Diesel`, `E85`, `Electricity`, `Ethanol`, `Gasohol`, `Gasoline`, `Hydrogen`, `LiquifiedNaturalGas`, `M85`, `Methanol`, `Propane`, `Other`"""
    vehicle_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`"""
    tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""
    parent_tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""


class GetIftaVehicleReportsRequest(BaseModel):
    year: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: `year=2021`"""

    month: Annotated[
        Optional[QueryParamMonth],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: `month=January`  Valid values: `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November`, `December`"""

    quarter: Annotated[
        Optional[QueryParamQuarter],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: `quarter=Q1`  Valid values: `Q1`, `Q2`, `Q3`, `Q4`"""

    jurisdictions: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of jurisdictions. Example: `jurisdictions=GA`"""

    fuel_type: Annotated[
        Optional[QueryParamFuelType],
        pydantic.Field(alias="fuelType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of IFTA fuel types. Example: `fuelType=Diesel`  Valid values: `Unspecified`, `A55`, `Biodiesel`, `CompressedNaturalGas`, `Diesel`, `E85`, `Electricity`, `Ethanol`, `Gasohol`, `Gasoline`, `Hydrogen`, `LiquifiedNaturalGas`, `M85`, `Methanol`, `Propane`, `Other`"""

    vehicle_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="vehicleIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`"""

    tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="tagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""

    parent_tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="parentTagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""


GetIftaVehicleReportsResponseTypedDict = TypeAliasType(
    "GetIftaVehicleReportsResponseTypedDict",
    Union[
        IFTAGetIFTAVehicleReportsResponseBodyTypedDict,
        IFTAGetIFTAVehicleReportsBadRequestErrorResponseBodyTypedDict,
    ],
)


GetIftaVehicleReportsResponse = TypeAliasType(
    "GetIftaVehicleReportsResponse",
    Union[
        IFTAGetIFTAVehicleReportsResponseBody,
        IFTAGetIFTAVehicleReportsBadRequestErrorResponseBody,
    ],
)
