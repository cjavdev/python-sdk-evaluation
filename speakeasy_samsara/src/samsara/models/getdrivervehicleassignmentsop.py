"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .drivervehicleassignmentsv2getdrivervehicleassignmentsbadrequesterrorresponsebody import (
    DriverVehicleAssignmentsV2GetDriverVehicleAssignmentsBadRequestErrorResponseBody,
    DriverVehicleAssignmentsV2GetDriverVehicleAssignmentsBadRequestErrorResponseBodyTypedDict,
)
from .drivervehicleassignmentsv2getdrivervehicleassignmentsresponsebody import (
    DriverVehicleAssignmentsV2GetDriverVehicleAssignmentsResponseBody,
    DriverVehicleAssignmentsV2GetDriverVehicleAssignmentsResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FilterBy(str, Enum):
    r"""Option to filter by drivers or vehicles.  Valid values: `drivers`, `vehicles`"""

    DRIVERS = "drivers"
    VEHICLES = "vehicles"


class QueryParamAssignmentType(str, Enum):
    r"""Specifies which assignment type to filter by.  Valid values: `HOS`, `idCard`, `static`, `faceId`, `tachograph`, `safetyManual`, `RFID`, `trailer`, `external`, `qrCode`"""

    HOS = "HOS"
    ID_CARD = "idCard"
    STATIC = "static"
    FACE_ID = "faceId"
    TACHOGRAPH = "tachograph"
    SAFETY_MANUAL = "safetyManual"
    RFID = "RFID"
    TRAILER = "trailer"
    EXTERNAL = "external"
    QR_CODE = "qrCode"


class GetDriverVehicleAssignmentsRequestTypedDict(TypedDict):
    filter_by: FilterBy
    r"""Option to filter by drivers or vehicles.  Valid values: `drivers`, `vehicles`"""
    start_time: NotRequired[str]
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    end_time: NotRequired[str]
    r"""An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    driver_ids: NotRequired[List[str]]
    r"""A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: `driverIds=1234,5678,payroll:4841`"""
    vehicle_ids: NotRequired[List[str]]
    r"""ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: \"key:value\". For example, \"maintenanceId:250020\"."""
    driver_tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of driver tag IDs. Example: `tagIds=1234,5678`"""
    vehicle_tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of vehicle tag IDs. Example: `tagIds=1234,5678`"""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    assignment_type: NotRequired[QueryParamAssignmentType]
    r"""Specifies which assignment type to filter by.  Valid values: `HOS`, `idCard`, `static`, `faceId`, `tachograph`, `safetyManual`, `RFID`, `trailer`, `external`, `qrCode`"""


class GetDriverVehicleAssignmentsRequest(BaseModel):
    filter_by: Annotated[
        FilterBy,
        pydantic.Field(alias="filterBy"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Option to filter by drivers or vehicles.  Valid values: `drivers`, `vehicles`"""

    start_time: Annotated[
        Optional[str],
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    end_time: Annotated[
        Optional[str],
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    driver_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="driverIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: `driverIds=1234,5678,payroll:4841`"""

    vehicle_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="vehicleIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: \"key:value\". For example, \"maintenanceId:250020\"."""

    driver_tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="driverTagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of driver tag IDs. Example: `tagIds=1234,5678`"""

    vehicle_tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="vehicleTagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of vehicle tag IDs. Example: `tagIds=1234,5678`"""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    assignment_type: Annotated[
        Optional[QueryParamAssignmentType],
        pydantic.Field(alias="assignmentType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Specifies which assignment type to filter by.  Valid values: `HOS`, `idCard`, `static`, `faceId`, `tachograph`, `safetyManual`, `RFID`, `trailer`, `external`, `qrCode`"""


GetDriverVehicleAssignmentsResponseTypedDict = TypeAliasType(
    "GetDriverVehicleAssignmentsResponseTypedDict",
    Union[
        DriverVehicleAssignmentsV2GetDriverVehicleAssignmentsResponseBodyTypedDict,
        DriverVehicleAssignmentsV2GetDriverVehicleAssignmentsBadRequestErrorResponseBodyTypedDict,
    ],
)


GetDriverVehicleAssignmentsResponse = TypeAliasType(
    "GetDriverVehicleAssignmentsResponse",
    Union[
        DriverVehicleAssignmentsV2GetDriverVehicleAssignmentsResponseBody,
        DriverVehicleAssignmentsV2GetDriverVehicleAssignmentsBadRequestErrorResponseBody,
    ],
)
