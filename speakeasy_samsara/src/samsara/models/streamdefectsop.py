"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dvirdefectstreamdefectsbadrequesterrorresponsebody import (
    DvirDefectStreamDefectsBadRequestErrorResponseBody,
    DvirDefectStreamDefectsBadRequestErrorResponseBodyTypedDict,
)
from .dvirdefectstreamdefectsresponsebody import (
    DvirDefectStreamDefectsResponseBody,
    DvirDefectStreamDefectsResponseBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class StreamDefectsRequestTypedDict(TypedDict):
    start_time: str
    r"""Required RFC 3339 timestamp to begin the feed or history by `updatedAtTime` at `startTime`."""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    limit: NotRequired[int]
    r"""The limit for how many objects will be in the response. Default and max for this value is 200 objects."""
    end_time: NotRequired[str]
    r"""Optional RFC 3339 timestamp. If not provided then the endpoint behaves as an unending feed of changes."""
    include_external_ids: NotRequired[bool]
    r"""Optional boolean indicating whether to return external IDs on supported entities"""
    is_resolved: NotRequired[bool]
    r"""Boolean value for whether filter defects by resolved status."""


class StreamDefectsRequest(BaseModel):
    start_time: Annotated[
        str,
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Required RFC 3339 timestamp to begin the feed or history by `updatedAtTime` at `startTime`."""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 200
    r"""The limit for how many objects will be in the response. Default and max for this value is 200 objects."""

    end_time: Annotated[
        Optional[str],
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional RFC 3339 timestamp. If not provided then the endpoint behaves as an unending feed of changes."""

    include_external_ids: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeExternalIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether to return external IDs on supported entities"""

    is_resolved: Annotated[
        Optional[bool],
        pydantic.Field(alias="isResolved"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Boolean value for whether filter defects by resolved status."""


StreamDefectsResponseTypedDict = TypeAliasType(
    "StreamDefectsResponseTypedDict",
    Union[
        DvirDefectStreamDefectsResponseBodyTypedDict,
        DvirDefectStreamDefectsBadRequestErrorResponseBodyTypedDict,
    ],
)


StreamDefectsResponse = TypeAliasType(
    "StreamDefectsResponse",
    Union[
        DvirDefectStreamDefectsResponseBody,
        DvirDefectStreamDefectsBadRequestErrorResponseBody,
    ],
)
