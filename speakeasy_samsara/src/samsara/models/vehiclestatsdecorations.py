"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .vehiclestatsauxinputdecoration import (
    VehicleStatsAuxInputDecoration,
    VehicleStatsAuxInputDecorationTypedDict,
)
from .vehiclestatsdecorations_ambientairtemperaturemillic import (
    VehicleStatsDecorationsAmbientAirTemperatureMilliC,
    VehicleStatsDecorationsAmbientAirTemperatureMilliCTypedDict,
)
from .vehiclestatsdecorations_barometricpressurepa import (
    VehicleStatsDecorationsBarometricPressurePa,
    VehicleStatsDecorationsBarometricPressurePaTypedDict,
)
from .vehiclestatsdecorations_batterymillivolts import (
    VehicleStatsDecorationsBatteryMilliVolts,
    VehicleStatsDecorationsBatteryMilliVoltsTypedDict,
)
from .vehiclestatsdecorations_deflevelmillipercent import (
    VehicleStatsDecorationsDefLevelMilliPercent,
    VehicleStatsDecorationsDefLevelMilliPercentTypedDict,
)
from .vehiclestatsdecorations_ecuspeedmph import (
    VehicleStatsDecorationsEcuSpeedMph,
    VehicleStatsDecorationsEcuSpeedMphTypedDict,
)
from .vehiclestatsdecorations_enginecoolanttemperaturemillic import (
    VehicleStatsDecorationsEngineCoolantTemperatureMilliC,
    VehicleStatsDecorationsEngineCoolantTemperatureMilliCTypedDict,
)
from .vehiclestatsdecorations_engineloadpercent import (
    VehicleStatsDecorationsEngineLoadPercent,
    VehicleStatsDecorationsEngineLoadPercentTypedDict,
)
from .vehiclestatsdecorations_engineoilpressurekpa import (
    VehicleStatsDecorationsEngineOilPressureKPa,
    VehicleStatsDecorationsEngineOilPressureKPaTypedDict,
)
from .vehiclestatsdecorations_enginerpm import (
    VehicleStatsDecorationsEngineRpm,
    VehicleStatsDecorationsEngineRpmTypedDict,
)
from .vehiclestatsdecorations_enginestates import (
    VehicleStatsDecorationsEngineStates,
    VehicleStatsDecorationsEngineStatesTypedDict,
)
from .vehiclestatsdecorations_fuelpercents import (
    VehicleStatsDecorationsFuelPercents,
    VehicleStatsDecorationsFuelPercentsTypedDict,
)
from .vehiclestatsdecorations_gps import (
    VehicleStatsDecorationsGps,
    VehicleStatsDecorationsGpsTypedDict,
)
from .vehiclestatsdecorations_gpsdistancemeters import (
    VehicleStatsDecorationsGpsDistanceMeters,
    VehicleStatsDecorationsGpsDistanceMetersTypedDict,
)
from .vehiclestatsdecorations_gpsodometermeters import (
    VehicleStatsDecorationsGpsOdometerMeters,
    VehicleStatsDecorationsGpsOdometerMetersTypedDict,
)
from .vehiclestatsdecorations_intakemanifoldtemperaturemillic import (
    VehicleStatsDecorationsIntakeManifoldTemperatureMilliC,
    VehicleStatsDecorationsIntakeManifoldTemperatureMilliCTypedDict,
)
from .vehiclestatsdecorations_obdengineseconds import (
    VehicleStatsDecorationsObdEngineSeconds,
    VehicleStatsDecorationsObdEngineSecondsTypedDict,
)
from .vehiclestatsdecorations_obdodometermeters import (
    VehicleStatsDecorationsObdOdometerMeters,
    VehicleStatsDecorationsObdOdometerMetersTypedDict,
)
from .vehiclestatsengineimmobilizer import (
    VehicleStatsEngineImmobilizer,
    VehicleStatsEngineImmobilizerTypedDict,
)
from .vehiclestatsevaveragebatterytemperaturemillicelsius import (
    VehicleStatsEvAverageBatteryTemperatureMilliCelsius,
    VehicleStatsEvAverageBatteryTemperatureMilliCelsiusTypedDict,
)
from .vehiclestatsevbatterycurrentmilliamp import (
    VehicleStatsEvBatteryCurrentMilliAmp,
    VehicleStatsEvBatteryCurrentMilliAmpTypedDict,
)
from .vehiclestatsevbatterystateofhealthmillipercent import (
    VehicleStatsEvBatteryStateOfHealthMilliPercent,
    VehicleStatsEvBatteryStateOfHealthMilliPercentTypedDict,
)
from .vehiclestatsevbatteryvoltagemillivolt import (
    VehicleStatsEvBatteryVoltageMilliVolt,
    VehicleStatsEvBatteryVoltageMilliVoltTypedDict,
)
from .vehiclestatsevchargingcurrentmilliamp import (
    VehicleStatsEvChargingCurrentMilliAmp,
    VehicleStatsEvChargingCurrentMilliAmpTypedDict,
)
from .vehiclestatsevchargingenergymicrowh import (
    VehicleStatsEvChargingEnergyMicroWh,
    VehicleStatsEvChargingEnergyMicroWhTypedDict,
)
from .vehiclestatsevchargingstatus import (
    VehicleStatsEvChargingStatus,
    VehicleStatsEvChargingStatusTypedDict,
)
from .vehiclestatsevchargingvoltagemillivolt import (
    VehicleStatsEvChargingVoltageMilliVolt,
    VehicleStatsEvChargingVoltageMilliVoltTypedDict,
)
from .vehiclestatsevconsumedenergymicrowh import (
    VehicleStatsEvConsumedEnergyMicroWh,
    VehicleStatsEvConsumedEnergyMicroWhTypedDict,
)
from .vehiclestatsevdistancedrivenmeters import (
    VehicleStatsEvDistanceDrivenMeters,
    VehicleStatsEvDistanceDrivenMetersTypedDict,
)
from .vehiclestatsevregeneratedenergymicrowh import (
    VehicleStatsEvRegeneratedEnergyMicroWh,
    VehicleStatsEvRegeneratedEnergyMicroWhTypedDict,
)
from .vehiclestatsevstateofchargemillipercent import (
    VehicleStatsEvStateOfChargeMilliPercent,
    VehicleStatsEvStateOfChargeMilliPercentTypedDict,
)
from .vehiclestatsfaultcodesvalue import (
    VehicleStatsFaultCodesValue,
    VehicleStatsFaultCodesValueTypedDict,
)
from .vehiclestatsseatbeltdriver import (
    VehicleStatsSeatbeltDriver,
    VehicleStatsSeatbeltDriverTypedDict,
)
from .vehiclestatsspreaderactive import (
    VehicleStatsSpreaderActive,
    VehicleStatsSpreaderActiveTypedDict,
)
from .vehiclestatsspreaderairtemp import (
    VehicleStatsSpreaderAirTemp,
    VehicleStatsSpreaderAirTempTypedDict,
)
from .vehiclestatsspreaderblaststate import (
    VehicleStatsSpreaderBlastState,
    VehicleStatsSpreaderBlastStateTypedDict,
)
from .vehiclestatsspreadergranularname import (
    VehicleStatsSpreaderGranularName,
    VehicleStatsSpreaderGranularNameTypedDict,
)
from .vehiclestatsspreadergranularrate import (
    VehicleStatsSpreaderGranularRate,
    VehicleStatsSpreaderGranularRateTypedDict,
)
from .vehiclestatsspreaderliquidname import (
    VehicleStatsSpreaderLiquidName,
    VehicleStatsSpreaderLiquidNameTypedDict,
)
from .vehiclestatsspreaderliquidrate import (
    VehicleStatsSpreaderLiquidRate,
    VehicleStatsSpreaderLiquidRateTypedDict,
)
from .vehiclestatsspreaderonstate import (
    VehicleStatsSpreaderOnState,
    VehicleStatsSpreaderOnStateTypedDict,
)
from .vehiclestatsspreaderplowstatus import (
    VehicleStatsSpreaderPlowStatus,
    VehicleStatsSpreaderPlowStatusTypedDict,
)
from .vehiclestatsspreaderprewetname import (
    VehicleStatsSpreaderPrewetName,
    VehicleStatsSpreaderPrewetNameTypedDict,
)
from .vehiclestatsspreaderprewetrate import (
    VehicleStatsSpreaderPrewetRate,
    VehicleStatsSpreaderPrewetRateTypedDict,
)
from .vehiclestatsspreaderroadtemp import (
    VehicleStatsSpreaderRoadTemp,
    VehicleStatsSpreaderRoadTempTypedDict,
)
from .vehiclestatstirepressures import (
    VehicleStatsTirePressures,
    VehicleStatsTirePressuresTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class VehicleStatsDecorationsTypedDict(TypedDict):
    r"""Optional decorations to the primary stat event. See [here](doc:decorations) for more details. The example shows the response if you were to submit `decorations=engineStates&obdEngineSeconds` to the query parameter:

    ```json
    \"decorations\":{
    \"engineStates\": {
    \"value\": \"Off\"
    },
    \"obdEngineSeconds\": {
    \"value\": 9723103
    }
    }
    ```
    """

    ambient_air_temperature_milli_c: NotRequired[
        VehicleStatsDecorationsAmbientAirTemperatureMilliCTypedDict
    ]
    aux_input1: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input10: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input11: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input12: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input13: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input2: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input3: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input4: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input5: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input6: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input7: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input8: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    aux_input9: NotRequired[VehicleStatsAuxInputDecorationTypedDict]
    barometric_pressure_pa: NotRequired[
        VehicleStatsDecorationsBarometricPressurePaTypedDict
    ]
    battery_milli_volts: NotRequired[VehicleStatsDecorationsBatteryMilliVoltsTypedDict]
    def_level_milli_percent: NotRequired[
        VehicleStatsDecorationsDefLevelMilliPercentTypedDict
    ]
    ecu_speed_mph: NotRequired[VehicleStatsDecorationsEcuSpeedMphTypedDict]
    engine_coolant_temperature_milli_c: NotRequired[
        VehicleStatsDecorationsEngineCoolantTemperatureMilliCTypedDict
    ]
    engine_immobilizer: NotRequired[VehicleStatsEngineImmobilizerTypedDict]
    r"""Data for the engine immobilizer"""
    engine_load_percent: NotRequired[VehicleStatsDecorationsEngineLoadPercentTypedDict]
    engine_oil_pressure_k_pa: NotRequired[
        VehicleStatsDecorationsEngineOilPressureKPaTypedDict
    ]
    engine_rpm: NotRequired[VehicleStatsDecorationsEngineRpmTypedDict]
    engine_states: NotRequired[VehicleStatsDecorationsEngineStatesTypedDict]
    ev_average_battery_temperature_milli_celsius: NotRequired[
        VehicleStatsEvAverageBatteryTemperatureMilliCelsiusTypedDict
    ]
    r"""Battery temperature for electric and hybrid vehicles in milli celsius. Not all EV and HEVs may report this field."""
    ev_battery_current_milli_amp: NotRequired[
        VehicleStatsEvBatteryCurrentMilliAmpTypedDict
    ]
    r"""Battery current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""
    ev_battery_state_of_health_milli_percent: NotRequired[
        VehicleStatsEvBatteryStateOfHealthMilliPercentTypedDict
    ]
    r"""Milli percent battery state of health for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    ev_battery_voltage_milli_volt: NotRequired[
        VehicleStatsEvBatteryVoltageMilliVoltTypedDict
    ]
    r"""Battery voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""
    ev_charging_current_milli_amp: NotRequired[
        VehicleStatsEvChargingCurrentMilliAmpTypedDict
    ]
    r"""Charging current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""
    ev_charging_energy_micro_wh: NotRequired[
        VehicleStatsEvChargingEnergyMicroWhTypedDict
    ]
    r"""Charging energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_charging_status: NotRequired[VehicleStatsEvChargingStatusTypedDict]
    r"""Charging status for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    ev_charging_voltage_milli_volt: NotRequired[
        VehicleStatsEvChargingVoltageMilliVoltTypedDict
    ]
    r"""Charging voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""
    ev_consumed_energy_micro_wh: NotRequired[
        VehicleStatsEvConsumedEnergyMicroWhTypedDict
    ]
    r"""Consumed energy (including regenerated) for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_distance_driven_meters: NotRequired[VehicleStatsEvDistanceDrivenMetersTypedDict]
    r"""Electric distance driven for electric and hybrid vehicles in meters. Not all EV and HEVs may report this field."""
    ev_regenerated_energy_micro_wh: NotRequired[
        VehicleStatsEvRegeneratedEnergyMicroWhTypedDict
    ]
    r"""Regenerated energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_state_of_charge_milli_percent: NotRequired[
        VehicleStatsEvStateOfChargeMilliPercentTypedDict
    ]
    r"""State of Charge for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    fault_codes: NotRequired[VehicleStatsFaultCodesValueTypedDict]
    r"""Fault codes for the vehicle"""
    fuel_percents: NotRequired[VehicleStatsDecorationsFuelPercentsTypedDict]
    gps: NotRequired[VehicleStatsDecorationsGpsTypedDict]
    gps_distance_meters: NotRequired[VehicleStatsDecorationsGpsDistanceMetersTypedDict]
    gps_odometer_meters: NotRequired[VehicleStatsDecorationsGpsOdometerMetersTypedDict]
    intake_manifold_temperature_milli_c: NotRequired[
        VehicleStatsDecorationsIntakeManifoldTemperatureMilliCTypedDict
    ]
    obd_engine_seconds: NotRequired[VehicleStatsDecorationsObdEngineSecondsTypedDict]
    obd_odometer_meters: NotRequired[VehicleStatsDecorationsObdOdometerMetersTypedDict]
    seatbelt_driver: NotRequired[VehicleStatsSeatbeltDriverTypedDict]
    r"""Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""
    spreader_active: NotRequired[VehicleStatsSpreaderActiveTypedDict]
    r"""Whether vehicle is actively spreading any material."""
    spreader_air_temp: NotRequired[VehicleStatsSpreaderAirTempTypedDict]
    r"""Air (ambient) temperature in milli celsius reading from material spreader."""
    spreader_blast_state: NotRequired[VehicleStatsSpreaderBlastStateTypedDict]
    r"""Whether vehicle is actively spreading material in ‘blast mode’."""
    spreader_granular_name: NotRequired[VehicleStatsSpreaderGranularNameTypedDict]
    r"""Name of most recent type of granular material spread, read from the material spreader."""
    spreader_granular_rate: NotRequired[VehicleStatsSpreaderGranularRateTypedDict]
    r"""Granular spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_liquid_name: NotRequired[VehicleStatsSpreaderLiquidNameTypedDict]
    r"""Name of most recent type of liquid material spread, read from the material spreader."""
    spreader_liquid_rate: NotRequired[VehicleStatsSpreaderLiquidRateTypedDict]
    r"""Liquid spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_on_state: NotRequired[VehicleStatsSpreaderOnStateTypedDict]
    r"""Whether vehicle spreader is enabled."""
    spreader_plow_status: NotRequired[VehicleStatsSpreaderPlowStatusTypedDict]
    r"""Snow plow status (`Up` or `Down`), as read from the material spreader. Note: this is separate from plow status defined via auxInput."""
    spreader_prewet_name: NotRequired[VehicleStatsSpreaderPrewetNameTypedDict]
    r"""Name of most recent type of prewet material spread, read from the material spreader."""
    spreader_prewet_rate: NotRequired[VehicleStatsSpreaderPrewetRateTypedDict]
    r"""Prewet spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_road_temp: NotRequired[VehicleStatsSpreaderRoadTempTypedDict]
    r"""Road temperature reading in milli celsius from material spreader."""
    tire_pressure: NotRequired[VehicleStatsTirePressuresTypedDict]
    r"""Tire pressure readings for each of four tires in kilopascals."""


class VehicleStatsDecorations(BaseModel):
    r"""Optional decorations to the primary stat event. See [here](doc:decorations) for more details. The example shows the response if you were to submit `decorations=engineStates&obdEngineSeconds` to the query parameter:

    ```json
    \"decorations\":{
    \"engineStates\": {
    \"value\": \"Off\"
    },
    \"obdEngineSeconds\": {
    \"value\": 9723103
    }
    }
    ```
    """

    ambient_air_temperature_milli_c: Annotated[
        Optional[VehicleStatsDecorationsAmbientAirTemperatureMilliC],
        pydantic.Field(alias="ambientAirTemperatureMilliC"),
    ] = None

    aux_input1: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput1")
    ] = None

    aux_input10: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput10")
    ] = None

    aux_input11: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput11")
    ] = None

    aux_input12: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput12")
    ] = None

    aux_input13: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput13")
    ] = None

    aux_input2: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput2")
    ] = None

    aux_input3: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput3")
    ] = None

    aux_input4: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput4")
    ] = None

    aux_input5: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput5")
    ] = None

    aux_input6: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput6")
    ] = None

    aux_input7: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput7")
    ] = None

    aux_input8: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput8")
    ] = None

    aux_input9: Annotated[
        Optional[VehicleStatsAuxInputDecoration], pydantic.Field(alias="auxInput9")
    ] = None

    barometric_pressure_pa: Annotated[
        Optional[VehicleStatsDecorationsBarometricPressurePa],
        pydantic.Field(alias="barometricPressurePa"),
    ] = None

    battery_milli_volts: Annotated[
        Optional[VehicleStatsDecorationsBatteryMilliVolts],
        pydantic.Field(alias="batteryMilliVolts"),
    ] = None

    def_level_milli_percent: Annotated[
        Optional[VehicleStatsDecorationsDefLevelMilliPercent],
        pydantic.Field(alias="defLevelMilliPercent"),
    ] = None

    ecu_speed_mph: Annotated[
        Optional[VehicleStatsDecorationsEcuSpeedMph],
        pydantic.Field(alias="ecuSpeedMph"),
    ] = None

    engine_coolant_temperature_milli_c: Annotated[
        Optional[VehicleStatsDecorationsEngineCoolantTemperatureMilliC],
        pydantic.Field(alias="engineCoolantTemperatureMilliC"),
    ] = None

    engine_immobilizer: Annotated[
        Optional[VehicleStatsEngineImmobilizer],
        pydantic.Field(alias="engineImmobilizer"),
    ] = None
    r"""Data for the engine immobilizer"""

    engine_load_percent: Annotated[
        Optional[VehicleStatsDecorationsEngineLoadPercent],
        pydantic.Field(alias="engineLoadPercent"),
    ] = None

    engine_oil_pressure_k_pa: Annotated[
        Optional[VehicleStatsDecorationsEngineOilPressureKPa],
        pydantic.Field(alias="engineOilPressureKPa"),
    ] = None

    engine_rpm: Annotated[
        Optional[VehicleStatsDecorationsEngineRpm], pydantic.Field(alias="engineRpm")
    ] = None

    engine_states: Annotated[
        Optional[VehicleStatsDecorationsEngineStates],
        pydantic.Field(alias="engineStates"),
    ] = None

    ev_average_battery_temperature_milli_celsius: Annotated[
        Optional[VehicleStatsEvAverageBatteryTemperatureMilliCelsius],
        pydantic.Field(alias="evAverageBatteryTemperatureMilliCelsius"),
    ] = None
    r"""Battery temperature for electric and hybrid vehicles in milli celsius. Not all EV and HEVs may report this field."""

    ev_battery_current_milli_amp: Annotated[
        Optional[VehicleStatsEvBatteryCurrentMilliAmp],
        pydantic.Field(alias="evBatteryCurrentMilliAmp"),
    ] = None
    r"""Battery current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""

    ev_battery_state_of_health_milli_percent: Annotated[
        Optional[VehicleStatsEvBatteryStateOfHealthMilliPercent],
        pydantic.Field(alias="evBatteryStateOfHealthMilliPercent"),
    ] = None
    r"""Milli percent battery state of health for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    ev_battery_voltage_milli_volt: Annotated[
        Optional[VehicleStatsEvBatteryVoltageMilliVolt],
        pydantic.Field(alias="evBatteryVoltageMilliVolt"),
    ] = None
    r"""Battery voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""

    ev_charging_current_milli_amp: Annotated[
        Optional[VehicleStatsEvChargingCurrentMilliAmp],
        pydantic.Field(alias="evChargingCurrentMilliAmp"),
    ] = None
    r"""Charging current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""

    ev_charging_energy_micro_wh: Annotated[
        Optional[VehicleStatsEvChargingEnergyMicroWh],
        pydantic.Field(alias="evChargingEnergyMicroWh"),
    ] = None
    r"""Charging energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_charging_status: Annotated[
        Optional[VehicleStatsEvChargingStatus], pydantic.Field(alias="evChargingStatus")
    ] = None
    r"""Charging status for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    ev_charging_voltage_milli_volt: Annotated[
        Optional[VehicleStatsEvChargingVoltageMilliVolt],
        pydantic.Field(alias="evChargingVoltageMilliVolt"),
    ] = None
    r"""Charging voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""

    ev_consumed_energy_micro_wh: Annotated[
        Optional[VehicleStatsEvConsumedEnergyMicroWh],
        pydantic.Field(alias="evConsumedEnergyMicroWh"),
    ] = None
    r"""Consumed energy (including regenerated) for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_distance_driven_meters: Annotated[
        Optional[VehicleStatsEvDistanceDrivenMeters],
        pydantic.Field(alias="evDistanceDrivenMeters"),
    ] = None
    r"""Electric distance driven for electric and hybrid vehicles in meters. Not all EV and HEVs may report this field."""

    ev_regenerated_energy_micro_wh: Annotated[
        Optional[VehicleStatsEvRegeneratedEnergyMicroWh],
        pydantic.Field(alias="evRegeneratedEnergyMicroWh"),
    ] = None
    r"""Regenerated energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_state_of_charge_milli_percent: Annotated[
        Optional[VehicleStatsEvStateOfChargeMilliPercent],
        pydantic.Field(alias="evStateOfChargeMilliPercent"),
    ] = None
    r"""State of Charge for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    fault_codes: Annotated[
        Optional[VehicleStatsFaultCodesValue], pydantic.Field(alias="faultCodes")
    ] = None
    r"""Fault codes for the vehicle"""

    fuel_percents: Annotated[
        Optional[VehicleStatsDecorationsFuelPercents],
        pydantic.Field(alias="fuelPercents"),
    ] = None

    gps: Optional[VehicleStatsDecorationsGps] = None

    gps_distance_meters: Annotated[
        Optional[VehicleStatsDecorationsGpsDistanceMeters],
        pydantic.Field(alias="gpsDistanceMeters"),
    ] = None

    gps_odometer_meters: Annotated[
        Optional[VehicleStatsDecorationsGpsOdometerMeters],
        pydantic.Field(alias="gpsOdometerMeters"),
    ] = None

    intake_manifold_temperature_milli_c: Annotated[
        Optional[VehicleStatsDecorationsIntakeManifoldTemperatureMilliC],
        pydantic.Field(alias="intakeManifoldTemperatureMilliC"),
    ] = None

    obd_engine_seconds: Annotated[
        Optional[VehicleStatsDecorationsObdEngineSeconds],
        pydantic.Field(alias="obdEngineSeconds"),
    ] = None

    obd_odometer_meters: Annotated[
        Optional[VehicleStatsDecorationsObdOdometerMeters],
        pydantic.Field(alias="obdOdometerMeters"),
    ] = None

    seatbelt_driver: Annotated[
        Optional[VehicleStatsSeatbeltDriver], pydantic.Field(alias="seatbeltDriver")
    ] = None
    r"""Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Annotated[
        Optional[VehicleStatsSpreaderActive], pydantic.Field(alias="spreaderActive")
    ] = None
    r"""Whether vehicle is actively spreading any material."""

    spreader_air_temp: Annotated[
        Optional[VehicleStatsSpreaderAirTemp], pydantic.Field(alias="spreaderAirTemp")
    ] = None
    r"""Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Annotated[
        Optional[VehicleStatsSpreaderBlastState],
        pydantic.Field(alias="spreaderBlastState"),
    ] = None
    r"""Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Annotated[
        Optional[VehicleStatsSpreaderGranularName],
        pydantic.Field(alias="spreaderGranularName"),
    ] = None
    r"""Name of most recent type of granular material spread, read from the material spreader."""

    spreader_granular_rate: Annotated[
        Optional[VehicleStatsSpreaderGranularRate],
        pydantic.Field(alias="spreaderGranularRate"),
    ] = None
    r"""Granular spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_liquid_name: Annotated[
        Optional[VehicleStatsSpreaderLiquidName],
        pydantic.Field(alias="spreaderLiquidName"),
    ] = None
    r"""Name of most recent type of liquid material spread, read from the material spreader."""

    spreader_liquid_rate: Annotated[
        Optional[VehicleStatsSpreaderLiquidRate],
        pydantic.Field(alias="spreaderLiquidRate"),
    ] = None
    r"""Liquid spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_on_state: Annotated[
        Optional[VehicleStatsSpreaderOnState], pydantic.Field(alias="spreaderOnState")
    ] = None
    r"""Whether vehicle spreader is enabled."""

    spreader_plow_status: Annotated[
        Optional[VehicleStatsSpreaderPlowStatus],
        pydantic.Field(alias="spreaderPlowStatus"),
    ] = None
    r"""Snow plow status (`Up` or `Down`), as read from the material spreader. Note: this is separate from plow status defined via auxInput."""

    spreader_prewet_name: Annotated[
        Optional[VehicleStatsSpreaderPrewetName],
        pydantic.Field(alias="spreaderPrewetName"),
    ] = None
    r"""Name of most recent type of prewet material spread, read from the material spreader."""

    spreader_prewet_rate: Annotated[
        Optional[VehicleStatsSpreaderPrewetRate],
        pydantic.Field(alias="spreaderPrewetRate"),
    ] = None
    r"""Prewet spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_road_temp: Annotated[
        Optional[VehicleStatsSpreaderRoadTemp], pydantic.Field(alias="spreaderRoadTemp")
    ] = None
    r"""Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Annotated[
        Optional[VehicleStatsTirePressures], pydantic.Field(alias="tirePressure")
    ] = None
    r"""Tire pressure readings for each of four tires in kilopascals."""
