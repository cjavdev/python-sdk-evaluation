"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .datainputsnapshotresponse import (
    DataInputSnapshotResponse,
    DataInputSnapshotResponseTypedDict,
)
from .standarderrorresponse import StandardErrorResponse, StandardErrorResponseTypedDict
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetDataInputDataSnapshotRequestTypedDict(TypedDict):
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    parent_tag_ids: NotRequired[List[str]]
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""
    tag_ids: NotRequired[List[str]]
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""
    data_input_ids: NotRequired[List[str]]
    r"""A comma-separated list of data input IDs. Example: `dataInputIds=1234,5678`"""
    asset_ids: NotRequired[List[str]]
    r"""A comma-separated list of industrial asset UUIDs. Example: `assetIds=076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544`"""


class GetDataInputDataSnapshotRequest(BaseModel):
    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    parent_tag_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="parentTagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""

    tag_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="tagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""

    data_input_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="dataInputIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list of data input IDs. Example: `dataInputIds=1234,5678`"""

    asset_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="assetIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list of industrial asset UUIDs. Example: `assetIds=076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544`"""


GetDataInputDataSnapshotResponseTypedDict = TypeAliasType(
    "GetDataInputDataSnapshotResponseTypedDict",
    Union[DataInputSnapshotResponseTypedDict, StandardErrorResponseTypedDict],
)


GetDataInputDataSnapshotResponse = TypeAliasType(
    "GetDataInputDataSnapshotResponse",
    Union[DataInputSnapshotResponse, StandardErrorResponse],
)
