"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .behaviorresponsebody import BehaviorResponseBody, BehaviorResponseBodyTypedDict
from .driverwithexternalidobjectresponsebody import (
    DriverWithExternalIDObjectResponseBody,
    DriverWithExternalIDObjectResponseBodyTypedDict,
)
from datetime import datetime
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CoachingType(str, Enum):
    r"""Coaching type for the coaching session.  Valid values: `fullySharedWithManager`, `selfCoaching`, `unknown`, `unshared`, `withManager`"""

    FULLY_SHARED_WITH_MANAGER = "fullySharedWithManager"
    SELF_COACHING = "selfCoaching"
    UNKNOWN = "unknown"
    UNSHARED = "unshared"
    WITH_MANAGER = "withManager"


class SessionStatus(str, Enum):
    r"""Status for the coaching session.  Valid values: `unknown`, `upcoming`, `completed`, `deleted`"""

    UNKNOWN = "unknown"
    UPCOMING = "upcoming"
    COMPLETED = "completed"
    DELETED = "deleted"


class CoachingSessionsResponseResponseBodyTypedDict(TypedDict):
    r"""List of coaching sessions objects."""

    behaviors: List[BehaviorResponseBodyTypedDict]
    r"""Object references for the behaviors within the session."""
    coaching_type: CoachingType
    r"""Coaching type for the coaching session.  Valid values: `fullySharedWithManager`, `selfCoaching`, `unknown`, `unshared`, `withManager`"""
    driver: DriverWithExternalIDObjectResponseBodyTypedDict
    r"""A driver object with an id and map of external ids."""
    due_at_time: datetime
    r"""Time coaching session is due in UTC."""
    id: str
    r"""Unique ID for the coaching session."""
    session_status: SessionStatus
    r"""Status for the coaching session.  Valid values: `unknown`, `upcoming`, `completed`, `deleted`"""
    updated_at_time: datetime
    r"""Time coaching session was updated in UTC."""
    assigned_coach_id: NotRequired[str]
    r"""Unique user ID for a coaching session. Returned when a coaching session status is “incomplete”."""
    completed_at_time: NotRequired[datetime]
    r"""Time coaching session is completed in UTC. Returned when a coaching session status is “completed”."""
    completed_coach_id: NotRequired[str]
    r"""Unique user ID for a completed coaching session. Returned when a coaching session status is “completed”."""
    session_note: NotRequired[str]
    r"""Associated note for the coaching session. Returned when present."""


class CoachingSessionsResponseResponseBody(BaseModel):
    r"""List of coaching sessions objects."""

    behaviors: List[BehaviorResponseBody]
    r"""Object references for the behaviors within the session."""

    coaching_type: Annotated[CoachingType, pydantic.Field(alias="coachingType")]
    r"""Coaching type for the coaching session.  Valid values: `fullySharedWithManager`, `selfCoaching`, `unknown`, `unshared`, `withManager`"""

    driver: DriverWithExternalIDObjectResponseBody
    r"""A driver object with an id and map of external ids."""

    due_at_time: Annotated[datetime, pydantic.Field(alias="dueAtTime")]
    r"""Time coaching session is due in UTC."""

    id: str
    r"""Unique ID for the coaching session."""

    session_status: Annotated[SessionStatus, pydantic.Field(alias="sessionStatus")]
    r"""Status for the coaching session.  Valid values: `unknown`, `upcoming`, `completed`, `deleted`"""

    updated_at_time: Annotated[datetime, pydantic.Field(alias="updatedAtTime")]
    r"""Time coaching session was updated in UTC."""

    assigned_coach_id: Annotated[
        Optional[str], pydantic.Field(alias="assignedCoachId")
    ] = None
    r"""Unique user ID for a coaching session. Returned when a coaching session status is “incomplete”."""

    completed_at_time: Annotated[
        Optional[datetime], pydantic.Field(alias="completedAtTime")
    ] = None
    r"""Time coaching session is completed in UTC. Returned when a coaching session status is “completed”."""

    completed_coach_id: Annotated[
        Optional[str], pydantic.Field(alias="completedCoachId")
    ] = None
    r"""Unique user ID for a completed coaching session. Returned when a coaching session status is “completed”."""

    session_note: Annotated[Optional[str], pydantic.Field(alias="sessionNote")] = None
    r"""Associated note for the coaching session. Returned when present."""
