"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .v1vehicleharsheventresponse_location import (
    V1VehicleHarshEventResponseLocation,
    V1VehicleHarshEventResponseLocationTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class V1VehicleHarshEventResponseTypedDict(TypedDict):
    r"""Harsh event details for a vehicle"""

    harsh_event_type: str
    r"""Type of the harsh event. One of: [Crash, Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake, Harsh Event]"""
    incident_report_url: str
    r"""URL of the associated incident report page"""
    download_forward_video_url: NotRequired[str]
    r"""URL for downloading the forward facing video"""
    download_inward_video_url: NotRequired[str]
    r"""URL for downloading the inward facing video"""
    download_tracked_inward_video_url: NotRequired[str]
    r"""URL for downloading the tracked inward facing video"""
    is_distracted: NotRequired[bool]
    r"""Whether the driver was deemed distracted during this harsh event"""
    location: NotRequired[V1VehicleHarshEventResponseLocationTypedDict]


class V1VehicleHarshEventResponse(BaseModel):
    r"""Harsh event details for a vehicle"""

    harsh_event_type: Annotated[str, pydantic.Field(alias="harshEventType")]
    r"""Type of the harsh event. One of: [Crash, Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake, Harsh Event]"""

    incident_report_url: Annotated[str, pydantic.Field(alias="incidentReportUrl")]
    r"""URL of the associated incident report page"""

    download_forward_video_url: Annotated[
        Optional[str], pydantic.Field(alias="downloadForwardVideoUrl")
    ] = None
    r"""URL for downloading the forward facing video"""

    download_inward_video_url: Annotated[
        Optional[str], pydantic.Field(alias="downloadInwardVideoUrl")
    ] = None
    r"""URL for downloading the inward facing video"""

    download_tracked_inward_video_url: Annotated[
        Optional[str], pydantic.Field(alias="downloadTrackedInwardVideoUrl")
    ] = None
    r"""URL for downloading the tracked inward facing video"""

    is_distracted: Annotated[Optional[bool], pydantic.Field(alias="isDistracted")] = (
        None
    )
    r"""Whether the driver was deemed distracted during this harsh event"""

    location: Optional[V1VehicleHarshEventResponseLocation] = None
