"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .conditionalfieldsectionobjectresponsebody import (
    ConditionalFieldSectionObjectResponseBody,
    ConditionalFieldSectionObjectResponseBodyTypedDict,
)
from .fieldobjectresponsebody import (
    FieldObjectResponseBody,
    FieldObjectResponseBodyTypedDict,
)
from .goadocumenttypetinyresponseresponsebody import (
    GoaDocumentTypeTinyResponseResponseBody,
    GoaDocumentTypeTinyResponseResponseBodyTypedDict,
)
from .goadrivertinyresponseresponsebody import (
    GoaDriverTinyResponseResponseBody,
    GoaDriverTinyResponseResponseBodyTypedDict,
)
from .goaroutestoptinyresponseresponsebody import (
    GoaRouteStopTinyResponseResponseBody,
    GoaRouteStopTinyResponseResponseBodyTypedDict,
)
from .goaroutetinyresponseresponsebody import (
    GoaRouteTinyResponseResponseBody,
    GoaRouteTinyResponseResponseBodyTypedDict,
)
from .goavehicletinyresponseresponsebody import (
    GoaVehicleTinyResponseResponseBody,
    GoaVehicleTinyResponseResponseBodyTypedDict,
)
from datetime import datetime
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class State(str, Enum):
    r"""The condition of the document created for the driver. Can be either Required or Submitted. Required documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. Submitted documents have been submitted by the driver in the Driver App. Archived documents have been archived by the admin in the cloud dashboard.  Valid values: `submitted`, `required`, `archived`"""

    SUBMITTED = "submitted"
    REQUIRED = "required"
    ARCHIVED = "archived"


class DocumentResponseObjectResponseBodyTypedDict(TypedDict):
    r"""A single document."""

    created_at_time: datetime
    r"""Time the document was created in RFC 3339 format."""
    document_type: GoaDocumentTypeTinyResponseResponseBodyTypedDict
    r"""A minified document type object"""
    driver: GoaDriverTinyResponseResponseBodyTypedDict
    r"""A minified driver object. This object is only returned if the route is assigned to the driver."""
    fields: List[FieldObjectResponseBodyTypedDict]
    r"""The fields associated with this document."""
    id: str
    r"""Universally unique identifier for the document."""
    state: State
    r"""The condition of the document created for the driver. Can be either Required or Submitted. Required documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. Submitted documents have been submitted by the driver in the Driver App. Archived documents have been archived by the admin in the cloud dashboard.  Valid values: `submitted`, `required`, `archived`"""
    conditional_field_sections: NotRequired[
        List[ConditionalFieldSectionObjectResponseBodyTypedDict]
    ]
    r"""List of the document conditional field sections."""
    name: NotRequired[str]
    r"""Name of the document."""
    notes: NotRequired[str]
    r"""Notes on the document."""
    route: NotRequired[GoaRouteTinyResponseResponseBodyTypedDict]
    r"""A minified representation of a single route."""
    route_stop: NotRequired[GoaRouteStopTinyResponseResponseBodyTypedDict]
    r"""A minified route stop object"""
    updated_at_time: NotRequired[datetime]
    r"""Time the document was updated in RFC 3339 format."""
    vehicle: NotRequired[GoaVehicleTinyResponseResponseBodyTypedDict]
    r"""A minified vehicle object. This object is only returned if the route is assigned to the vehicle."""


class DocumentResponseObjectResponseBody(BaseModel):
    r"""A single document."""

    created_at_time: Annotated[datetime, pydantic.Field(alias="createdAtTime")]
    r"""Time the document was created in RFC 3339 format."""

    document_type: Annotated[
        GoaDocumentTypeTinyResponseResponseBody, pydantic.Field(alias="documentType")
    ]
    r"""A minified document type object"""

    driver: GoaDriverTinyResponseResponseBody
    r"""A minified driver object. This object is only returned if the route is assigned to the driver."""

    fields: List[FieldObjectResponseBody]
    r"""The fields associated with this document."""

    id: str
    r"""Universally unique identifier for the document."""

    state: State
    r"""The condition of the document created for the driver. Can be either Required or Submitted. Required documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. Submitted documents have been submitted by the driver in the Driver App. Archived documents have been archived by the admin in the cloud dashboard.  Valid values: `submitted`, `required`, `archived`"""

    conditional_field_sections: Annotated[
        Optional[List[ConditionalFieldSectionObjectResponseBody]],
        pydantic.Field(alias="conditionalFieldSections"),
    ] = None
    r"""List of the document conditional field sections."""

    name: Optional[str] = None
    r"""Name of the document."""

    notes: Optional[str] = None
    r"""Notes on the document."""

    route: Optional[GoaRouteTinyResponseResponseBody] = None
    r"""A minified representation of a single route."""

    route_stop: Annotated[
        Optional[GoaRouteStopTinyResponseResponseBody],
        pydantic.Field(alias="routeStop"),
    ] = None
    r"""A minified route stop object"""

    updated_at_time: Annotated[
        Optional[datetime], pydantic.Field(alias="updatedAtTime")
    ] = None
    r"""Time the document was updated in RFC 3339 format."""

    vehicle: Optional[GoaVehicleTinyResponseResponseBody] = None
    r"""A minified vehicle object. This object is only returned if the route is assigned to the vehicle."""
