"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .locationandspeedgetlocationandspeedbadrequesterrorresponsebody import (
    LocationAndSpeedGetLocationAndSpeedBadRequestErrorResponseBody,
    LocationAndSpeedGetLocationAndSpeedBadRequestErrorResponseBodyTypedDict,
)
from .locationandspeedgetlocationandspeedresponsebody import (
    LocationAndSpeedGetLocationAndSpeedResponseBody,
    LocationAndSpeedGetLocationAndSpeedResponseBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetLocationAndSpeedRequestTypedDict(TypedDict):
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    limit: NotRequired[int]
    r"""The limit for how many objects will be in the response. Default and max for this value is 512 objects."""
    start_time: NotRequired[str]
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    end_time: NotRequired[str]
    r"""An end time in RFC 3339 format. Defaults to never if not provided; if not provided then pagination will not cease, and a valid pagination cursor will always be returned. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    ids: NotRequired[List[str]]
    r"""Comma-separated list of asset IDs."""
    include_speed: NotRequired[bool]
    r"""Optional boolean indicating whether or not to return the 'speed' object"""
    include_reverse_geo: NotRequired[bool]
    r"""Optional boolean indicating whether or not to return the 'address' object"""
    include_geofence_lookup: NotRequired[bool]
    r"""Optional boolean indicating whether or not to return the 'geofence' object"""
    include_external_ids: NotRequired[bool]
    r"""Optional boolean indicating whether to return external IDs on supported entities"""


class GetLocationAndSpeedRequest(BaseModel):
    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 512
    r"""The limit for how many objects will be in the response. Default and max for this value is 512 objects."""

    start_time: Annotated[
        Optional[str],
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    end_time: Annotated[
        Optional[str],
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An end time in RFC 3339 format. Defaults to never if not provided; if not provided then pagination will not cease, and a valid pagination cursor will always be returned. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    ids: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Comma-separated list of asset IDs."""

    include_speed: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeSpeed"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether or not to return the 'speed' object"""

    include_reverse_geo: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeReverseGeo"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether or not to return the 'address' object"""

    include_geofence_lookup: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeGeofenceLookup"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether or not to return the 'geofence' object"""

    include_external_ids: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeExternalIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether to return external IDs on supported entities"""


GetLocationAndSpeedResponseTypedDict = TypeAliasType(
    "GetLocationAndSpeedResponseTypedDict",
    Union[
        LocationAndSpeedGetLocationAndSpeedResponseBodyTypedDict,
        LocationAndSpeedGetLocationAndSpeedBadRequestErrorResponseBodyTypedDict,
    ],
)


GetLocationAndSpeedResponse = TypeAliasType(
    "GetLocationAndSpeedResponse",
    Union[
        LocationAndSpeedGetLocationAndSpeedResponseBody,
        LocationAndSpeedGetLocationAndSpeedBadRequestErrorResponseBody,
    ],
)
