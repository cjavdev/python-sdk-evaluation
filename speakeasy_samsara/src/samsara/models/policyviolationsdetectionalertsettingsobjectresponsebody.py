"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EventsAvailableForTesting(str, Enum):
    r"""Enables testing for selected policy violation beta events.  Valid values: `mobileUsage`, `smoking`, `eatingDrinking`, `inwardCameraObstruction`, `outwardCameraObstruction`"""

    MOBILE_USAGE = "mobileUsage"
    SMOKING = "smoking"
    EATING_DRINKING = "eatingDrinking"
    INWARD_CAMERA_OBSTRUCTION = "inwardCameraObstruction"
    OUTWARD_CAMERA_OBSTRUCTION = "outwardCameraObstruction"


class EventsToCoach(str, Enum):
    r"""Enables coaching for selected policy violation events.  Valid values: `noSeatbelt`, `noMask`, `mobileUsage`, `smoking`, `eatingDrinking`, `inwardCameraObstruction`, `outwardCameraObstruction`"""

    NO_SEATBELT = "noSeatbelt"
    NO_MASK = "noMask"
    MOBILE_USAGE = "mobileUsage"
    SMOKING = "smoking"
    EATING_DRINKING = "eatingDrinking"
    INWARD_CAMERA_OBSTRUCTION = "inwardCameraObstruction"
    OUTWARD_CAMERA_OBSTRUCTION = "outwardCameraObstruction"


class PolicyViolationsDetectionAlertSettingsObjectResponseBodyTypedDict(TypedDict):
    r"""Enables detection of policy violations, surfaces events in Safety Inbox, and enables configurable alerts. While the feature is in beta, in-cab alerts are recommended for testing use only."""

    events_available_for_testing: NotRequired[List[EventsAvailableForTesting]]
    r"""List of selectable beta policy violation events to be tested."""
    events_to_coach: NotRequired[List[EventsToCoach]]
    r"""List of selectable policy violation events to enable coaching for."""
    has_in_cab_audio_alerts_enabled: NotRequired[bool]
    r"""Indicates whether in-cab audio alerts for rolling stops are turned on."""
    is_enabled: NotRequired[bool]
    r"""Indicates whether AI event detection for rolling stops is turned on."""
    speeding_threshold_mph: NotRequired[float]
    r"""Alert when speed is over this many miles per hour."""


class PolicyViolationsDetectionAlertSettingsObjectResponseBody(BaseModel):
    r"""Enables detection of policy violations, surfaces events in Safety Inbox, and enables configurable alerts. While the feature is in beta, in-cab alerts are recommended for testing use only."""

    events_available_for_testing: Annotated[
        Optional[List[EventsAvailableForTesting]],
        pydantic.Field(alias="eventsAvailableForTesting"),
    ] = None
    r"""List of selectable beta policy violation events to be tested."""

    events_to_coach: Annotated[
        Optional[List[EventsToCoach]], pydantic.Field(alias="eventsToCoach")
    ] = None
    r"""List of selectable policy violation events to enable coaching for."""

    has_in_cab_audio_alerts_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="hasInCabAudioAlertsEnabled")
    ] = None
    r"""Indicates whether in-cab audio alerts for rolling stops are turned on."""

    is_enabled: Annotated[Optional[bool], pydantic.Field(alias="isEnabled")] = None
    r"""Indicates whether AI event detection for rolling stops is turned on."""

    speeding_threshold_mph: Annotated[
        Optional[float], pydantic.Field(alias="speedingThresholdMph")
    ] = None
    r"""Alert when speed is over this many miles per hour."""
