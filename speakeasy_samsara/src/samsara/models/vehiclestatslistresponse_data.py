"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .vehicleexternalids import VehicleExternalIds, VehicleExternalIdsTypedDict
from .vehiclestatsambientairtempmillicwithdecoration import (
    VehicleStatsAmbientAirTempMilliCWithDecoration,
    VehicleStatsAmbientAirTempMilliCWithDecorationTypedDict,
)
from .vehiclestatsauxinputwithdecoration import (
    VehicleStatsAuxInputWithDecoration,
    VehicleStatsAuxInputWithDecorationTypedDict,
)
from .vehiclestatsbarometricpressurepawithdecoration import (
    VehicleStatsBarometricPressurePaWithDecoration,
    VehicleStatsBarometricPressurePaWithDecorationTypedDict,
)
from .vehiclestatsbatteryvoltagewithdecoration import (
    VehicleStatsBatteryVoltageWithDecoration,
    VehicleStatsBatteryVoltageWithDecorationTypedDict,
)
from .vehiclestatsdeflevelmillipercentwithdecoration import (
    VehicleStatsDefLevelMilliPercentWithDecoration,
    VehicleStatsDefLevelMilliPercentWithDecorationTypedDict,
)
from .vehiclestatsecuspeedmphwithdecoration import (
    VehicleStatsEcuSpeedMphWithDecoration,
    VehicleStatsEcuSpeedMphWithDecorationTypedDict,
)
from .vehiclestatsenginecoolanttempmillicwithdecoration import (
    VehicleStatsEngineCoolantTempMilliCWithDecoration,
    VehicleStatsEngineCoolantTempMilliCWithDecorationTypedDict,
)
from .vehiclestatsengineimmobilizerwithdecoration import (
    VehicleStatsEngineImmobilizerWithDecoration,
    VehicleStatsEngineImmobilizerWithDecorationTypedDict,
)
from .vehiclestatsengineloadpercentwithdecoration import (
    VehicleStatsEngineLoadPercentWithDecoration,
    VehicleStatsEngineLoadPercentWithDecorationTypedDict,
)
from .vehiclestatsengineoilpressurekpawithdecoration import (
    VehicleStatsEngineOilPressureKPaWithDecoration,
    VehicleStatsEngineOilPressureKPaWithDecorationTypedDict,
)
from .vehiclestatsenginerpmwithdecoration import (
    VehicleStatsEngineRpmWithDecoration,
    VehicleStatsEngineRpmWithDecorationTypedDict,
)
from .vehiclestatsenginestatewithdecoration import (
    VehicleStatsEngineStateWithDecoration,
    VehicleStatsEngineStateWithDecorationTypedDict,
)
from .vehiclestatsevaveragebatterytemperaturemillicelsius import (
    VehicleStatsEvAverageBatteryTemperatureMilliCelsius,
    VehicleStatsEvAverageBatteryTemperatureMilliCelsiusTypedDict,
)
from .vehiclestatsevbatterycurrentmilliamp import (
    VehicleStatsEvBatteryCurrentMilliAmp,
    VehicleStatsEvBatteryCurrentMilliAmpTypedDict,
)
from .vehiclestatsevbatterystateofhealthmillipercent import (
    VehicleStatsEvBatteryStateOfHealthMilliPercent,
    VehicleStatsEvBatteryStateOfHealthMilliPercentTypedDict,
)
from .vehiclestatsevbatteryvoltagemillivolt import (
    VehicleStatsEvBatteryVoltageMilliVolt,
    VehicleStatsEvBatteryVoltageMilliVoltTypedDict,
)
from .vehiclestatsevchargingcurrentmilliamp import (
    VehicleStatsEvChargingCurrentMilliAmp,
    VehicleStatsEvChargingCurrentMilliAmpTypedDict,
)
from .vehiclestatsevchargingenergymicrowh import (
    VehicleStatsEvChargingEnergyMicroWh,
    VehicleStatsEvChargingEnergyMicroWhTypedDict,
)
from .vehiclestatsevchargingstatus import (
    VehicleStatsEvChargingStatus,
    VehicleStatsEvChargingStatusTypedDict,
)
from .vehiclestatsevchargingvoltagemillivolt import (
    VehicleStatsEvChargingVoltageMilliVolt,
    VehicleStatsEvChargingVoltageMilliVoltTypedDict,
)
from .vehiclestatsevconsumedenergymicrowh import (
    VehicleStatsEvConsumedEnergyMicroWh,
    VehicleStatsEvConsumedEnergyMicroWhTypedDict,
)
from .vehiclestatsevdistancedrivenmeters import (
    VehicleStatsEvDistanceDrivenMeters,
    VehicleStatsEvDistanceDrivenMetersTypedDict,
)
from .vehiclestatsevregeneratedenergymicrowh import (
    VehicleStatsEvRegeneratedEnergyMicroWh,
    VehicleStatsEvRegeneratedEnergyMicroWhTypedDict,
)
from .vehiclestatsevstateofchargemillipercent import (
    VehicleStatsEvStateOfChargeMilliPercent,
    VehicleStatsEvStateOfChargeMilliPercentTypedDict,
)
from .vehiclestatsfaultcodeswithdecoration import (
    VehicleStatsFaultCodesWithDecoration,
    VehicleStatsFaultCodesWithDecorationTypedDict,
)
from .vehiclestatsfuelpercentwithdecoration import (
    VehicleStatsFuelPercentWithDecoration,
    VehicleStatsFuelPercentWithDecorationTypedDict,
)
from .vehiclestatsgpsdistancemeterswithdecoration import (
    VehicleStatsGpsDistanceMetersWithDecoration,
    VehicleStatsGpsDistanceMetersWithDecorationTypedDict,
)
from .vehiclestatsgpsodometermeterswithdecoration import (
    VehicleStatsGpsOdometerMetersWithDecoration,
    VehicleStatsGpsOdometerMetersWithDecorationTypedDict,
)
from .vehiclestatsintakemanifoldtempmillicwithdecoration import (
    VehicleStatsIntakeManifoldTempMilliCWithDecoration,
    VehicleStatsIntakeManifoldTempMilliCWithDecorationTypedDict,
)
from .vehiclestatslistgps import VehicleStatsListGps, VehicleStatsListGpsTypedDict
from .vehiclestatslistsyntheticengineseconds import (
    VehicleStatsListSyntheticEngineSeconds,
    VehicleStatsListSyntheticEngineSecondsTypedDict,
)
from .vehiclestatsnfccardscanwithdecoration import (
    VehicleStatsNfcCardScanWithDecoration,
    VehicleStatsNfcCardScanWithDecorationTypedDict,
)
from .vehiclestatsobdenginesecondswithdecoration import (
    VehicleStatsObdEngineSecondsWithDecoration,
    VehicleStatsObdEngineSecondsWithDecorationTypedDict,
)
from .vehiclestatsobdodometermeterswithdecoration import (
    VehicleStatsObdOdometerMetersWithDecoration,
    VehicleStatsObdOdometerMetersWithDecorationTypedDict,
)
from .vehiclestatsseatbeltdriver import (
    VehicleStatsSeatbeltDriver,
    VehicleStatsSeatbeltDriverTypedDict,
)
from .vehiclestatsspreaderactive import (
    VehicleStatsSpreaderActive,
    VehicleStatsSpreaderActiveTypedDict,
)
from .vehiclestatsspreaderairtemp import (
    VehicleStatsSpreaderAirTemp,
    VehicleStatsSpreaderAirTempTypedDict,
)
from .vehiclestatsspreaderblaststate import (
    VehicleStatsSpreaderBlastState,
    VehicleStatsSpreaderBlastStateTypedDict,
)
from .vehiclestatsspreadergranularname import (
    VehicleStatsSpreaderGranularName,
    VehicleStatsSpreaderGranularNameTypedDict,
)
from .vehiclestatsspreadergranularrate import (
    VehicleStatsSpreaderGranularRate,
    VehicleStatsSpreaderGranularRateTypedDict,
)
from .vehiclestatsspreaderliquidname import (
    VehicleStatsSpreaderLiquidName,
    VehicleStatsSpreaderLiquidNameTypedDict,
)
from .vehiclestatsspreaderliquidrate import (
    VehicleStatsSpreaderLiquidRate,
    VehicleStatsSpreaderLiquidRateTypedDict,
)
from .vehiclestatsspreaderonstate import (
    VehicleStatsSpreaderOnState,
    VehicleStatsSpreaderOnStateTypedDict,
)
from .vehiclestatsspreaderplowstatus import (
    VehicleStatsSpreaderPlowStatus,
    VehicleStatsSpreaderPlowStatusTypedDict,
)
from .vehiclestatsspreaderprewetname import (
    VehicleStatsSpreaderPrewetName,
    VehicleStatsSpreaderPrewetNameTypedDict,
)
from .vehiclestatsspreaderprewetrate import (
    VehicleStatsSpreaderPrewetRate,
    VehicleStatsSpreaderPrewetRateTypedDict,
)
from .vehiclestatsspreaderroadtemp import (
    VehicleStatsSpreaderRoadTemp,
    VehicleStatsSpreaderRoadTempTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class VehicleStatsListResponseDataTypedDict(TypedDict):
    r"""A vehicle and its list of stat events."""

    ambient_air_temperature_milli_c: NotRequired[
        List[VehicleStatsAmbientAirTempMilliCWithDecorationTypedDict]
    ]
    r"""A list of ambient air temperature readings in millidegree Celsius for the given vehicle."""
    aux_input1: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input10: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input11: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input12: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input13: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input2: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input3: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input4: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input5: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input6: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input7: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input8: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    aux_input9: NotRequired[List[VehicleStatsAuxInputWithDecorationTypedDict]]
    r"""A list of auxiliary equipment states."""
    barometric_pressure_pa: NotRequired[
        List[VehicleStatsBarometricPressurePaWithDecorationTypedDict]
    ]
    r"""A list of barometric pressure readings in pascals for the given vehicle."""
    battery_milli_volts: NotRequired[
        List[VehicleStatsBatteryVoltageWithDecorationTypedDict]
    ]
    r"""A list of battery levels in milliVolts for the given vehicle."""
    def_level_milli_percent: NotRequired[
        List[VehicleStatsDefLevelMilliPercentWithDecorationTypedDict]
    ]
    r"""A list of DEF level milli percentage readings for the given vehicle."""
    ecu_speed_mph: NotRequired[List[VehicleStatsEcuSpeedMphWithDecorationTypedDict]]
    r"""A list of the speeds of the vehicle in miles per hour, as reported by the ECU."""
    engine_coolant_temperature_milli_c: NotRequired[
        List[VehicleStatsEngineCoolantTempMilliCWithDecorationTypedDict]
    ]
    r"""A list of engine coolant temperature readings in millidegree Celsius for the given vehicle."""
    engine_immobilizer: NotRequired[
        List[VehicleStatsEngineImmobilizerWithDecorationTypedDict]
    ]
    r"""A list of engine immobilizer data for the given vehicle."""
    engine_load_percent: NotRequired[
        List[VehicleStatsEngineLoadPercentWithDecorationTypedDict]
    ]
    r"""A list of engine load percentage readings for the given vehicle."""
    engine_oil_pressure_k_pa: NotRequired[
        List[VehicleStatsEngineOilPressureKPaWithDecorationTypedDict]
    ]
    r"""A list of engine oil pressure readings in kilopascals for the given vehicle."""
    engine_rpm: NotRequired[List[VehicleStatsEngineRpmWithDecorationTypedDict]]
    r"""A list engine RPM values for the given vehicle."""
    engine_states: NotRequired[List[VehicleStatsEngineStateWithDecorationTypedDict]]
    r"""A list of engine state events for the given vehicle."""
    ev_average_battery_temperature_milli_celsius: NotRequired[
        List[VehicleStatsEvAverageBatteryTemperatureMilliCelsiusTypedDict]
    ]
    r"""Battery temperature for electric and hybrid vehicles in milli celsius. Not all EV and HEVs may report this field."""
    ev_battery_current_milli_amp: NotRequired[
        List[VehicleStatsEvBatteryCurrentMilliAmpTypedDict]
    ]
    r"""Battery current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""
    ev_battery_state_of_health_milli_percent: NotRequired[
        List[VehicleStatsEvBatteryStateOfHealthMilliPercentTypedDict]
    ]
    r"""Milli percent battery state of health for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    ev_battery_voltage_milli_volt: NotRequired[
        List[VehicleStatsEvBatteryVoltageMilliVoltTypedDict]
    ]
    r"""Battery voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""
    ev_charging_current_milli_amp: NotRequired[
        List[VehicleStatsEvChargingCurrentMilliAmpTypedDict]
    ]
    r"""Charging current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""
    ev_charging_energy_micro_wh: NotRequired[
        List[VehicleStatsEvChargingEnergyMicroWhTypedDict]
    ]
    r"""Charging energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_charging_status: NotRequired[List[VehicleStatsEvChargingStatusTypedDict]]
    r"""Charging status for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    ev_charging_voltage_milli_volt: NotRequired[
        List[VehicleStatsEvChargingVoltageMilliVoltTypedDict]
    ]
    r"""Charging voltage for electric and hybrid vehicles in milli  volts. Not all EV and HEVs may report this field."""
    ev_consumed_energy_micro_wh: NotRequired[
        List[VehicleStatsEvConsumedEnergyMicroWhTypedDict]
    ]
    r"""Consumed energy (including regenerated) for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_distance_driven_meters: NotRequired[
        List[VehicleStatsEvDistanceDrivenMetersTypedDict]
    ]
    r"""Electric distance driven for electric and hybrid vehicles in meters. Not all EV and HEVs may report this field."""
    ev_regenerated_energy_micro_wh: NotRequired[
        List[VehicleStatsEvRegeneratedEnergyMicroWhTypedDict]
    ]
    r"""Regenerated energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_state_of_charge_milli_percent: NotRequired[
        List[VehicleStatsEvStateOfChargeMilliPercentTypedDict]
    ]
    r"""State of Charge for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    external_ids: NotRequired[VehicleExternalIdsTypedDict]
    r"""The <a href=\"/docs/external-ids\" target=\"_blank\">external IDs</a> for the given object."""
    fault_codes: NotRequired[List[VehicleStatsFaultCodesWithDecorationTypedDict]]
    r"""A list of engine fault codes."""
    fuel_percents: NotRequired[List[VehicleStatsFuelPercentWithDecorationTypedDict]]
    r"""A list of fuel percentage readings for the given vehicle."""
    gps: NotRequired[List[VehicleStatsListGpsTypedDict]]
    r"""A list of GPS location events for the given vehicles."""
    gps_distance_meters: NotRequired[
        List[VehicleStatsGpsDistanceMetersWithDecorationTypedDict]
    ]
    r"""A list of GPS distance events for the given vehicle."""
    gps_odometer_meters: NotRequired[
        List[VehicleStatsGpsOdometerMetersWithDecorationTypedDict]
    ]
    r"""A list of GPS odometer events for the given vehicle."""
    id: NotRequired[str]
    r"""The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed."""
    intake_manifold_temperature_milli_c: NotRequired[
        List[VehicleStatsIntakeManifoldTempMilliCWithDecorationTypedDict]
    ]
    r"""A list of intake manifold temperature readings in millidegree Celsius for the given vehicle."""
    name: NotRequired[str]
    r"""The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time."""
    nfc_card_scans: NotRequired[List[VehicleStatsNfcCardScanWithDecorationTypedDict]]
    r"""A list of NFC cards that were scanned for the given vehicles."""
    obd_engine_seconds: NotRequired[
        List[VehicleStatsObdEngineSecondsWithDecorationTypedDict]
    ]
    r"""A list of OBD engine seconds readings for the given vehicle."""
    obd_odometer_meters: NotRequired[
        List[VehicleStatsObdOdometerMetersWithDecorationTypedDict]
    ]
    r"""A list of OBD odometer readings for the given vehicle."""
    seatbelt_driver: NotRequired[List[VehicleStatsSeatbeltDriverTypedDict]]
    r"""Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""
    spreader_active: NotRequired[List[VehicleStatsSpreaderActiveTypedDict]]
    r"""Whether vehicle is actively spreading any material."""
    spreader_air_temp: NotRequired[List[VehicleStatsSpreaderAirTempTypedDict]]
    r"""Air (ambient) temperature in milli celsius reading from material spreader."""
    spreader_blast_state: NotRequired[List[VehicleStatsSpreaderBlastStateTypedDict]]
    r"""Whether vehicle is actively spreading material in ‘blast mode’."""
    spreader_granular_name: NotRequired[List[VehicleStatsSpreaderGranularNameTypedDict]]
    r"""Name of most recent type of granular material spread, read from the material spreader."""
    spreader_granular_rate: NotRequired[List[VehicleStatsSpreaderGranularRateTypedDict]]
    r"""Granular spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_liquid_name: NotRequired[List[VehicleStatsSpreaderLiquidNameTypedDict]]
    r"""Name of most recent type of liquid material spread, read from the material spreader."""
    spreader_liquid_rate: NotRequired[List[VehicleStatsSpreaderLiquidRateTypedDict]]
    r"""Liquid spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_on_state: NotRequired[List[VehicleStatsSpreaderOnStateTypedDict]]
    r"""Whether vehicle spreader is enabled."""
    spreader_plow_status: NotRequired[List[VehicleStatsSpreaderPlowStatusTypedDict]]
    r"""Snow plow status (`Up` or `Down`), as read from the material spreader. Note: this is separate from plow status defined via auxInput."""
    spreader_prewet_name: NotRequired[List[VehicleStatsSpreaderPrewetNameTypedDict]]
    r"""Name of most recent type of prewet material spread, read from the material spreader."""
    spreader_prewet_rate: NotRequired[List[VehicleStatsSpreaderPrewetRateTypedDict]]
    r"""Prewet spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_road_temp: NotRequired[List[VehicleStatsSpreaderRoadTempTypedDict]]
    r"""Road temperature reading in milli celsius from material spreader."""
    synthetic_engine_seconds: NotRequired[
        List[VehicleStatsListSyntheticEngineSecondsTypedDict]
    ]
    r"""A list of synthetic engine seconds values."""


class VehicleStatsListResponseData(BaseModel):
    r"""A vehicle and its list of stat events."""

    ambient_air_temperature_milli_c: Annotated[
        Optional[List[VehicleStatsAmbientAirTempMilliCWithDecoration]],
        pydantic.Field(alias="ambientAirTemperatureMilliC"),
    ] = None
    r"""A list of ambient air temperature readings in millidegree Celsius for the given vehicle."""

    aux_input1: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput1"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input10: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput10"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input11: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput11"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input12: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput12"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input13: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput13"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input2: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput2"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input3: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput3"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input4: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput4"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input5: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput5"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input6: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput6"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input7: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput7"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input8: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput8"),
    ] = None
    r"""A list of auxiliary equipment states."""

    aux_input9: Annotated[
        Optional[List[VehicleStatsAuxInputWithDecoration]],
        pydantic.Field(alias="auxInput9"),
    ] = None
    r"""A list of auxiliary equipment states."""

    barometric_pressure_pa: Annotated[
        Optional[List[VehicleStatsBarometricPressurePaWithDecoration]],
        pydantic.Field(alias="barometricPressurePa"),
    ] = None
    r"""A list of barometric pressure readings in pascals for the given vehicle."""

    battery_milli_volts: Annotated[
        Optional[List[VehicleStatsBatteryVoltageWithDecoration]],
        pydantic.Field(alias="batteryMilliVolts"),
    ] = None
    r"""A list of battery levels in milliVolts for the given vehicle."""

    def_level_milli_percent: Annotated[
        Optional[List[VehicleStatsDefLevelMilliPercentWithDecoration]],
        pydantic.Field(alias="defLevelMilliPercent"),
    ] = None
    r"""A list of DEF level milli percentage readings for the given vehicle."""

    ecu_speed_mph: Annotated[
        Optional[List[VehicleStatsEcuSpeedMphWithDecoration]],
        pydantic.Field(alias="ecuSpeedMph"),
    ] = None
    r"""A list of the speeds of the vehicle in miles per hour, as reported by the ECU."""

    engine_coolant_temperature_milli_c: Annotated[
        Optional[List[VehicleStatsEngineCoolantTempMilliCWithDecoration]],
        pydantic.Field(alias="engineCoolantTemperatureMilliC"),
    ] = None
    r"""A list of engine coolant temperature readings in millidegree Celsius for the given vehicle."""

    engine_immobilizer: Annotated[
        Optional[List[VehicleStatsEngineImmobilizerWithDecoration]],
        pydantic.Field(alias="engineImmobilizer"),
    ] = None
    r"""A list of engine immobilizer data for the given vehicle."""

    engine_load_percent: Annotated[
        Optional[List[VehicleStatsEngineLoadPercentWithDecoration]],
        pydantic.Field(alias="engineLoadPercent"),
    ] = None
    r"""A list of engine load percentage readings for the given vehicle."""

    engine_oil_pressure_k_pa: Annotated[
        Optional[List[VehicleStatsEngineOilPressureKPaWithDecoration]],
        pydantic.Field(alias="engineOilPressureKPa"),
    ] = None
    r"""A list of engine oil pressure readings in kilopascals for the given vehicle."""

    engine_rpm: Annotated[
        Optional[List[VehicleStatsEngineRpmWithDecoration]],
        pydantic.Field(alias="engineRpm"),
    ] = None
    r"""A list engine RPM values for the given vehicle."""

    engine_states: Annotated[
        Optional[List[VehicleStatsEngineStateWithDecoration]],
        pydantic.Field(alias="engineStates"),
    ] = None
    r"""A list of engine state events for the given vehicle."""

    ev_average_battery_temperature_milli_celsius: Annotated[
        Optional[List[VehicleStatsEvAverageBatteryTemperatureMilliCelsius]],
        pydantic.Field(alias="evAverageBatteryTemperatureMilliCelsius"),
    ] = None
    r"""Battery temperature for electric and hybrid vehicles in milli celsius. Not all EV and HEVs may report this field."""

    ev_battery_current_milli_amp: Annotated[
        Optional[List[VehicleStatsEvBatteryCurrentMilliAmp]],
        pydantic.Field(alias="evBatteryCurrentMilliAmp"),
    ] = None
    r"""Battery current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""

    ev_battery_state_of_health_milli_percent: Annotated[
        Optional[List[VehicleStatsEvBatteryStateOfHealthMilliPercent]],
        pydantic.Field(alias="evBatteryStateOfHealthMilliPercent"),
    ] = None
    r"""Milli percent battery state of health for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    ev_battery_voltage_milli_volt: Annotated[
        Optional[List[VehicleStatsEvBatteryVoltageMilliVolt]],
        pydantic.Field(alias="evBatteryVoltageMilliVolt"),
    ] = None
    r"""Battery voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""

    ev_charging_current_milli_amp: Annotated[
        Optional[List[VehicleStatsEvChargingCurrentMilliAmp]],
        pydantic.Field(alias="evChargingCurrentMilliAmp"),
    ] = None
    r"""Charging current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""

    ev_charging_energy_micro_wh: Annotated[
        Optional[List[VehicleStatsEvChargingEnergyMicroWh]],
        pydantic.Field(alias="evChargingEnergyMicroWh"),
    ] = None
    r"""Charging energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_charging_status: Annotated[
        Optional[List[VehicleStatsEvChargingStatus]],
        pydantic.Field(alias="evChargingStatus"),
    ] = None
    r"""Charging status for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    ev_charging_voltage_milli_volt: Annotated[
        Optional[List[VehicleStatsEvChargingVoltageMilliVolt]],
        pydantic.Field(alias="evChargingVoltageMilliVolt"),
    ] = None
    r"""Charging voltage for electric and hybrid vehicles in milli  volts. Not all EV and HEVs may report this field."""

    ev_consumed_energy_micro_wh: Annotated[
        Optional[List[VehicleStatsEvConsumedEnergyMicroWh]],
        pydantic.Field(alias="evConsumedEnergyMicroWh"),
    ] = None
    r"""Consumed energy (including regenerated) for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_distance_driven_meters: Annotated[
        Optional[List[VehicleStatsEvDistanceDrivenMeters]],
        pydantic.Field(alias="evDistanceDrivenMeters"),
    ] = None
    r"""Electric distance driven for electric and hybrid vehicles in meters. Not all EV and HEVs may report this field."""

    ev_regenerated_energy_micro_wh: Annotated[
        Optional[List[VehicleStatsEvRegeneratedEnergyMicroWh]],
        pydantic.Field(alias="evRegeneratedEnergyMicroWh"),
    ] = None
    r"""Regenerated energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_state_of_charge_milli_percent: Annotated[
        Optional[List[VehicleStatsEvStateOfChargeMilliPercent]],
        pydantic.Field(alias="evStateOfChargeMilliPercent"),
    ] = None
    r"""State of Charge for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    external_ids: Annotated[
        Optional[VehicleExternalIds], pydantic.Field(alias="externalIds")
    ] = None
    r"""The <a href=\"/docs/external-ids\" target=\"_blank\">external IDs</a> for the given object."""

    fault_codes: Annotated[
        Optional[List[VehicleStatsFaultCodesWithDecoration]],
        pydantic.Field(alias="faultCodes"),
    ] = None
    r"""A list of engine fault codes."""

    fuel_percents: Annotated[
        Optional[List[VehicleStatsFuelPercentWithDecoration]],
        pydantic.Field(alias="fuelPercents"),
    ] = None
    r"""A list of fuel percentage readings for the given vehicle."""

    gps: Optional[List[VehicleStatsListGps]] = None
    r"""A list of GPS location events for the given vehicles."""

    gps_distance_meters: Annotated[
        Optional[List[VehicleStatsGpsDistanceMetersWithDecoration]],
        pydantic.Field(alias="gpsDistanceMeters"),
    ] = None
    r"""A list of GPS distance events for the given vehicle."""

    gps_odometer_meters: Annotated[
        Optional[List[VehicleStatsGpsOdometerMetersWithDecoration]],
        pydantic.Field(alias="gpsOdometerMeters"),
    ] = None
    r"""A list of GPS odometer events for the given vehicle."""

    id: Optional[str] = None
    r"""The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed."""

    intake_manifold_temperature_milli_c: Annotated[
        Optional[List[VehicleStatsIntakeManifoldTempMilliCWithDecoration]],
        pydantic.Field(alias="intakeManifoldTemperatureMilliC"),
    ] = None
    r"""A list of intake manifold temperature readings in millidegree Celsius for the given vehicle."""

    name: Optional[str] = None
    r"""The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time."""

    nfc_card_scans: Annotated[
        Optional[List[VehicleStatsNfcCardScanWithDecoration]],
        pydantic.Field(alias="nfcCardScans"),
    ] = None
    r"""A list of NFC cards that were scanned for the given vehicles."""

    obd_engine_seconds: Annotated[
        Optional[List[VehicleStatsObdEngineSecondsWithDecoration]],
        pydantic.Field(alias="obdEngineSeconds"),
    ] = None
    r"""A list of OBD engine seconds readings for the given vehicle."""

    obd_odometer_meters: Annotated[
        Optional[List[VehicleStatsObdOdometerMetersWithDecoration]],
        pydantic.Field(alias="obdOdometerMeters"),
    ] = None
    r"""A list of OBD odometer readings for the given vehicle."""

    seatbelt_driver: Annotated[
        Optional[List[VehicleStatsSeatbeltDriver]],
        pydantic.Field(alias="seatbeltDriver"),
    ] = None
    r"""Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Annotated[
        Optional[List[VehicleStatsSpreaderActive]],
        pydantic.Field(alias="spreaderActive"),
    ] = None
    r"""Whether vehicle is actively spreading any material."""

    spreader_air_temp: Annotated[
        Optional[List[VehicleStatsSpreaderAirTemp]],
        pydantic.Field(alias="spreaderAirTemp"),
    ] = None
    r"""Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Annotated[
        Optional[List[VehicleStatsSpreaderBlastState]],
        pydantic.Field(alias="spreaderBlastState"),
    ] = None
    r"""Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Annotated[
        Optional[List[VehicleStatsSpreaderGranularName]],
        pydantic.Field(alias="spreaderGranularName"),
    ] = None
    r"""Name of most recent type of granular material spread, read from the material spreader."""

    spreader_granular_rate: Annotated[
        Optional[List[VehicleStatsSpreaderGranularRate]],
        pydantic.Field(alias="spreaderGranularRate"),
    ] = None
    r"""Granular spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_liquid_name: Annotated[
        Optional[List[VehicleStatsSpreaderLiquidName]],
        pydantic.Field(alias="spreaderLiquidName"),
    ] = None
    r"""Name of most recent type of liquid material spread, read from the material spreader."""

    spreader_liquid_rate: Annotated[
        Optional[List[VehicleStatsSpreaderLiquidRate]],
        pydantic.Field(alias="spreaderLiquidRate"),
    ] = None
    r"""Liquid spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_on_state: Annotated[
        Optional[List[VehicleStatsSpreaderOnState]],
        pydantic.Field(alias="spreaderOnState"),
    ] = None
    r"""Whether vehicle spreader is enabled."""

    spreader_plow_status: Annotated[
        Optional[List[VehicleStatsSpreaderPlowStatus]],
        pydantic.Field(alias="spreaderPlowStatus"),
    ] = None
    r"""Snow plow status (`Up` or `Down`), as read from the material spreader. Note: this is separate from plow status defined via auxInput."""

    spreader_prewet_name: Annotated[
        Optional[List[VehicleStatsSpreaderPrewetName]],
        pydantic.Field(alias="spreaderPrewetName"),
    ] = None
    r"""Name of most recent type of prewet material spread, read from the material spreader."""

    spreader_prewet_rate: Annotated[
        Optional[List[VehicleStatsSpreaderPrewetRate]],
        pydantic.Field(alias="spreaderPrewetRate"),
    ] = None
    r"""Prewet spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_road_temp: Annotated[
        Optional[List[VehicleStatsSpreaderRoadTemp]],
        pydantic.Field(alias="spreaderRoadTemp"),
    ] = None
    r"""Road temperature reading in milli celsius from material spreader."""

    synthetic_engine_seconds: Annotated[
        Optional[List[VehicleStatsListSyntheticEngineSeconds]],
        pydantic.Field(alias="syntheticEngineSeconds"),
    ] = None
    r"""A list of synthetic engine seconds values."""
