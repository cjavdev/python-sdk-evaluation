"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Severity(str, Enum):
    r"""Severity of inattentive driving events. Options include low (alerts for all events), medium (alerts for medium and high severity events), and high (alerts for high severity events only).  Valid values: `low`, `medium`, `high`"""

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"


class InattentiveDrivingDetectionAlertSettingsObjectResponseBodyTypedDict(TypedDict):
    r"""Enables AI detection of inattentive driving events."""

    has_in_cab_audio_alerts_enabled: NotRequired[bool]
    r"""Indicates whether in-cab audio alerts for inattentive driving are turned on."""
    is_enabled: NotRequired[bool]
    r"""Indicates whether AI event detection for inattentive driving is turned on."""
    severity: NotRequired[Severity]
    r"""Severity of inattentive driving events. Options include low (alerts for all events), medium (alerts for medium and high severity events), and high (alerts for high severity events only).  Valid values: `low`, `medium`, `high`"""
    speeding_threshold_mph: NotRequired[float]
    r"""Alert when speed is over this many miles per hour."""


class InattentiveDrivingDetectionAlertSettingsObjectResponseBody(BaseModel):
    r"""Enables AI detection of inattentive driving events."""

    has_in_cab_audio_alerts_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="hasInCabAudioAlertsEnabled")
    ] = None
    r"""Indicates whether in-cab audio alerts for inattentive driving are turned on."""

    is_enabled: Annotated[Optional[bool], pydantic.Field(alias="isEnabled")] = None
    r"""Indicates whether AI event detection for inattentive driving is turned on."""

    severity: Optional[Severity] = None
    r"""Severity of inattentive driving events. Options include low (alerts for all events), medium (alerts for medium and high severity events), and high (alerts for high severity events only).  Valid values: `low`, `medium`, `high`"""

    speeding_threshold_mph: Annotated[
        Optional[float], pydantic.Field(alias="speedingThresholdMph")
    ] = None
    r"""Alert when speed is over this many miles per hour."""
