"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dvirauthorsignature import DvirAuthorSignature, DvirAuthorSignatureTypedDict
from .dvirsecondsignature import DvirSecondSignature, DvirSecondSignatureTypedDict
from .dvirthirdsignature import DvirThirdSignature, DvirThirdSignatureTypedDict
from .dvirtrailer import DvirTrailer, DvirTrailerTypedDict
from .dvirtrailerdefectsitems import (
    DvirTrailerDefectsItems,
    DvirTrailerDefectsItemsTypedDict,
)
from .dvirvehicle import DvirVehicle, DvirVehicleTypedDict
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DvirSafetyStatus(str, Enum):
    r"""The condition of vehicle on which DVIR was done. Valid values: `safe`, `unsafe`, `resolved`."""

    SAFE = "safe"
    UNSAFE = "unsafe"
    RESOLVED = "resolved"


class DvirType(str, Enum):
    r"""Inspection type of the DVIR. Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`."""

    PRE_TRIP = "preTrip"
    POST_TRIP = "postTrip"
    MECHANIC = "mechanic"
    UNSPECIFIED = "unspecified"


class DvirTypedDict(TypedDict):
    r"""Information about a DVIR."""

    id: str
    r"""Unique Samsara ID for the DVIR."""
    author_signature: NotRequired[DvirAuthorSignatureTypedDict]
    end_time: NotRequired[str]
    r"""Time when driver signed and completed this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""
    license_plate: NotRequired[str]
    r"""The license plate of this vehicle."""
    location: NotRequired[str]
    r"""Optional string if your jurisdiction requires a location of the DVIR."""
    mechanic_notes: NotRequired[str]
    r"""The mechanics notes on the DVIR."""
    odometer_meters: NotRequired[int]
    r"""The odometer reading in meters."""
    safety_status: NotRequired[DvirSafetyStatus]
    r"""The condition of vehicle on which DVIR was done. Valid values: `safe`, `unsafe`, `resolved`."""
    second_signature: NotRequired[DvirSecondSignatureTypedDict]
    start_time: NotRequired[str]
    r"""Time when driver began filling out this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""
    third_signature: NotRequired[DvirThirdSignatureTypedDict]
    trailer: NotRequired[DvirTrailerTypedDict]
    trailer_defects: NotRequired[List[DvirTrailerDefectsItemsTypedDict]]
    r"""Defects registered for the trailer which was part of the DVIR."""
    trailer_name: NotRequired[str]
    r"""The name of the trailer the DVIR was submitted for.  Only included for tractor+trailer DVIRs."""
    type: NotRequired[DvirType]
    r"""Inspection type of the DVIR. Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`."""
    vehicle: NotRequired[DvirVehicleTypedDict]
    vehicle_defects: NotRequired[List[DvirTrailerDefectsItemsTypedDict]]
    r"""Defects registered for the vehicle which was part of the DVIR."""


class Dvir(BaseModel):
    r"""Information about a DVIR."""

    id: str
    r"""Unique Samsara ID for the DVIR."""

    author_signature: Annotated[
        Optional[DvirAuthorSignature], pydantic.Field(alias="authorSignature")
    ] = None

    end_time: Annotated[Optional[str], pydantic.Field(alias="endTime")] = None
    r"""Time when driver signed and completed this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    license_plate: Annotated[Optional[str], pydantic.Field(alias="licensePlate")] = None
    r"""The license plate of this vehicle."""

    location: Optional[str] = None
    r"""Optional string if your jurisdiction requires a location of the DVIR."""

    mechanic_notes: Annotated[Optional[str], pydantic.Field(alias="mechanicNotes")] = (
        None
    )
    r"""The mechanics notes on the DVIR."""

    odometer_meters: Annotated[
        Optional[int], pydantic.Field(alias="odometerMeters")
    ] = None
    r"""The odometer reading in meters."""

    safety_status: Annotated[
        Optional[DvirSafetyStatus], pydantic.Field(alias="safetyStatus")
    ] = DvirSafetyStatus.UNSAFE
    r"""The condition of vehicle on which DVIR was done. Valid values: `safe`, `unsafe`, `resolved`."""

    second_signature: Annotated[
        Optional[DvirSecondSignature], pydantic.Field(alias="secondSignature")
    ] = None

    start_time: Annotated[Optional[str], pydantic.Field(alias="startTime")] = None
    r"""Time when driver began filling out this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    third_signature: Annotated[
        Optional[DvirThirdSignature], pydantic.Field(alias="thirdSignature")
    ] = None

    trailer: Optional[DvirTrailer] = None

    trailer_defects: Annotated[
        Optional[List[DvirTrailerDefectsItems]], pydantic.Field(alias="trailerDefects")
    ] = None
    r"""Defects registered for the trailer which was part of the DVIR."""

    trailer_name: Annotated[Optional[str], pydantic.Field(alias="trailerName")] = None
    r"""The name of the trailer the DVIR was submitted for.  Only included for tractor+trailer DVIRs."""

    type: Optional[DvirType] = DvirType.UNSPECIFIED
    r"""Inspection type of the DVIR. Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`."""

    vehicle: Optional[DvirVehicle] = None

    vehicle_defects: Annotated[
        Optional[List[DvirTrailerDefectsItems]], pydantic.Field(alias="vehicleDefects")
    ] = None
    r"""Defects registered for the vehicle which was part of the DVIR."""
