"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .equipmentenginerpm import EquipmentEngineRpm, EquipmentEngineRpmTypedDict
from .equipmentengineseconds import (
    EquipmentEngineSeconds,
    EquipmentEngineSecondsTypedDict,
)
from .equipmentenginestate import EquipmentEngineState, EquipmentEngineStateTypedDict
from .equipmentfuelpercent import EquipmentFuelPercent, EquipmentFuelPercentTypedDict
from .equipmentgatewayengineseconds import (
    EquipmentGatewayEngineSeconds,
    EquipmentGatewayEngineSecondsTypedDict,
)
from .equipmentgatewayenginestate import (
    EquipmentGatewayEngineState,
    EquipmentGatewayEngineStateTypedDict,
)
from .equipmentgpsodometermeters import (
    EquipmentGpsOdometerMeters,
    EquipmentGpsOdometerMetersTypedDict,
)
from .equipmentobdengineseconds import (
    EquipmentObdEngineSeconds,
    EquipmentObdEngineSecondsTypedDict,
)
from .equipmentobdenginestate import (
    EquipmentObdEngineState,
    EquipmentObdEngineStateTypedDict,
)
from .equipmentstatsgps import EquipmentStatsGps, EquipmentStatsGpsTypedDict
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EquipmentStatsResponseDataTypedDict(TypedDict):
    r"""A unit of equipment and its most recent stat."""

    id: str
    r"""Unique Samsara ID for the equipment."""
    name: str
    r"""Name of the equipment."""
    engine_rpm: NotRequired[EquipmentEngineRpmTypedDict]
    r"""Engine RPM reading."""
    engine_seconds: NotRequired[EquipmentEngineSecondsTypedDict]
    r"""[DEPRECATED] Please use either `gatewayEngineSeconds` or `obdEngineSeconds`."""
    engine_state: NotRequired[EquipmentEngineStateTypedDict]
    r"""[DEPRECATED] Please use either `gatewayEngineStates` or `obdEngineStates`."""
    fuel_percent: NotRequired[EquipmentFuelPercentTypedDict]
    r"""Fuel percent reading."""
    gateway_engine_seconds: NotRequired[EquipmentGatewayEngineSecondsTypedDict]
    r"""Engine seconds reading from the aux/digio cable."""
    gateway_engine_state: NotRequired[EquipmentGatewayEngineStateTypedDict]
    r"""Engine state reading from the aux/digio cable."""
    gps: NotRequired[EquipmentStatsGpsTypedDict]
    r"""GPS location of equipment."""
    gps_odometer_meters: NotRequired[EquipmentGpsOdometerMetersTypedDict]
    r"""GPS odometer reading."""
    obd_engine_seconds: NotRequired[EquipmentObdEngineSecondsTypedDict]
    r"""Engine seconds reading from on-board diagnostics."""
    obd_engine_state: NotRequired[EquipmentObdEngineStateTypedDict]
    r"""Engine state reading from on-board diagnostics."""


class EquipmentStatsResponseData(BaseModel):
    r"""A unit of equipment and its most recent stat."""

    id: str
    r"""Unique Samsara ID for the equipment."""

    name: str
    r"""Name of the equipment."""

    engine_rpm: Annotated[
        Optional[EquipmentEngineRpm], pydantic.Field(alias="engineRpm")
    ] = None
    r"""Engine RPM reading."""

    engine_seconds: Annotated[
        Optional[EquipmentEngineSeconds], pydantic.Field(alias="engineSeconds")
    ] = None
    r"""[DEPRECATED] Please use either `gatewayEngineSeconds` or `obdEngineSeconds`."""

    engine_state: Annotated[
        Optional[EquipmentEngineState], pydantic.Field(alias="engineState")
    ] = None
    r"""[DEPRECATED] Please use either `gatewayEngineStates` or `obdEngineStates`."""

    fuel_percent: Annotated[
        Optional[EquipmentFuelPercent], pydantic.Field(alias="fuelPercent")
    ] = None
    r"""Fuel percent reading."""

    gateway_engine_seconds: Annotated[
        Optional[EquipmentGatewayEngineSeconds],
        pydantic.Field(alias="gatewayEngineSeconds"),
    ] = None
    r"""Engine seconds reading from the aux/digio cable."""

    gateway_engine_state: Annotated[
        Optional[EquipmentGatewayEngineState],
        pydantic.Field(alias="gatewayEngineState"),
    ] = None
    r"""Engine state reading from the aux/digio cable."""

    gps: Optional[EquipmentStatsGps] = None
    r"""GPS location of equipment."""

    gps_odometer_meters: Annotated[
        Optional[EquipmentGpsOdometerMeters], pydantic.Field(alias="gpsOdometerMeters")
    ] = None
    r"""GPS odometer reading."""

    obd_engine_seconds: Annotated[
        Optional[EquipmentObdEngineSeconds], pydantic.Field(alias="obdEngineSeconds")
    ] = None
    r"""Engine seconds reading from on-board diagnostics."""

    obd_engine_state: Annotated[
        Optional[EquipmentObdEngineState], pydantic.Field(alias="obdEngineState")
    ] = None
    r"""Engine state reading from on-board diagnostics."""
