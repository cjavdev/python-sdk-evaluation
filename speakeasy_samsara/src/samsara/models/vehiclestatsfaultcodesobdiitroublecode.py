"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .vehiclestatsfaultcodesignitiontype import VehicleStatsFaultCodesIgnitionType
from .vehiclestatsfaultcodespassengerdtc import (
    VehicleStatsFaultCodesPassengerDtc,
    VehicleStatsFaultCodesPassengerDtcTypedDict,
)
from .vehiclestatsfaultcodespassengermonitorstatus import (
    VehicleStatsFaultCodesPassengerMonitorStatus,
    VehicleStatsFaultCodesPassengerMonitorStatusTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class VehicleStatsFaultCodesOBDIITroubleCodeTypedDict(TypedDict):
    r"""Diagnostic trouble code for passenger vehicles."""

    tx_id: int
    r"""The TX identifier."""
    confirmed_dtcs: NotRequired[List[VehicleStatsFaultCodesPassengerDtcTypedDict]]
    r"""Confirmed DTC codes."""
    ignition_type: NotRequired[VehicleStatsFaultCodesIgnitionType]
    r"""The ignition type of this passenger vehicle. Valid values: `spark`, `compression`."""
    mil_status: NotRequired[bool]
    r"""The MIL status, indicating a check engine light."""
    monitor_status: NotRequired[VehicleStatsFaultCodesPassengerMonitorStatusTypedDict]
    r"""Readings from engine sensors"""
    pending_dtcs: NotRequired[List[VehicleStatsFaultCodesPassengerDtcTypedDict]]
    r"""Pending DTC codes."""
    permanent_dtcs: NotRequired[List[VehicleStatsFaultCodesPassengerDtcTypedDict]]
    r"""Permanent DTC codes."""


class VehicleStatsFaultCodesOBDIITroubleCode(BaseModel):
    r"""Diagnostic trouble code for passenger vehicles."""

    tx_id: Annotated[int, pydantic.Field(alias="txId")]
    r"""The TX identifier."""

    confirmed_dtcs: Annotated[
        Optional[List[VehicleStatsFaultCodesPassengerDtc]],
        pydantic.Field(alias="confirmedDtcs"),
    ] = None
    r"""Confirmed DTC codes."""

    ignition_type: Annotated[
        Optional[VehicleStatsFaultCodesIgnitionType],
        pydantic.Field(alias="ignitionType"),
    ] = None
    r"""The ignition type of this passenger vehicle. Valid values: `spark`, `compression`."""

    mil_status: Annotated[Optional[bool], pydantic.Field(alias="milStatus")] = None
    r"""The MIL status, indicating a check engine light."""

    monitor_status: Annotated[
        Optional[VehicleStatsFaultCodesPassengerMonitorStatus],
        pydantic.Field(alias="monitorStatus"),
    ] = None
    r"""Readings from engine sensors"""

    pending_dtcs: Annotated[
        Optional[List[VehicleStatsFaultCodesPassengerDtc]],
        pydantic.Field(alias="pendingDtcs"),
    ] = None
    r"""Pending DTC codes."""

    permanent_dtcs: Annotated[
        Optional[List[VehicleStatsFaultCodesPassengerDtc]],
        pydantic.Field(alias="permanentDtcs"),
    ] = None
    r"""Permanent DTC codes."""
