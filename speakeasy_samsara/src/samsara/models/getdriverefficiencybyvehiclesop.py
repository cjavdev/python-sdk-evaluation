"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .driverefficiencygetdriverefficiencybyvehiclesbadrequesterrorresponsebody import (
    DriverEfficiencyGetDriverEfficiencyByVehiclesBadRequestErrorResponseBody,
    DriverEfficiencyGetDriverEfficiencyByVehiclesBadRequestErrorResponseBodyTypedDict,
)
from .driverefficiencygetdriverefficiencybyvehiclesresponsebody import (
    DriverEfficiencyGetDriverEfficiencyByVehiclesResponseBody,
    DriverEfficiencyGetDriverEfficiencyByVehiclesResponseBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetDriverEfficiencyByVehiclesRequestTypedDict(TypedDict):
    start_time: str
    r"""A start time in RFC 3339 format. Must be in multiple of hours and at least 1 day before endTime. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-11T19:00:00Z, 2015-09-12T14:00:00-04:00)."""
    end_time: str
    r"""An end time in RFC 3339 format. Must be in multiple of hours and no later than 3 hours before the current time. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-13T19:00:00Z, 2015-09-15T14:00:00-04:00)."""
    vehicle_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`"""
    data_formats: NotRequired[List[str]]
    r"""A comma-separated list of data formats you want to fetch. Valid values: `score`, `raw` and `percentage`. The default data format is `score`. Example: `dataFormats=raw,score`"""
    tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""
    parent_tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""


class GetDriverEfficiencyByVehiclesRequest(BaseModel):
    start_time: Annotated[
        str,
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A start time in RFC 3339 format. Must be in multiple of hours and at least 1 day before endTime. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-11T19:00:00Z, 2015-09-12T14:00:00-04:00)."""

    end_time: Annotated[
        str,
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""An end time in RFC 3339 format. Must be in multiple of hours and no later than 3 hours before the current time. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-13T19:00:00Z, 2015-09-15T14:00:00-04:00)."""

    vehicle_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="vehicleIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`"""

    data_formats: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="dataFormats"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list of data formats you want to fetch. Valid values: `score`, `raw` and `percentage`. The default data format is `score`. Example: `dataFormats=raw,score`"""

    tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="tagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""

    parent_tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="parentTagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""


GetDriverEfficiencyByVehiclesResponseTypedDict = TypeAliasType(
    "GetDriverEfficiencyByVehiclesResponseTypedDict",
    Union[
        DriverEfficiencyGetDriverEfficiencyByVehiclesResponseBodyTypedDict,
        DriverEfficiencyGetDriverEfficiencyByVehiclesBadRequestErrorResponseBodyTypedDict,
    ],
)


GetDriverEfficiencyByVehiclesResponse = TypeAliasType(
    "GetDriverEfficiencyByVehiclesResponse",
    Union[
        DriverEfficiencyGetDriverEfficiencyByVehiclesResponseBody,
        DriverEfficiencyGetDriverEfficiencyByVehiclesBadRequestErrorResponseBody,
    ],
)
