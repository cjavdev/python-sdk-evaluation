"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateDvirRequestSafetyStatus(str, Enum):
    r"""Whether or not this vehicle or trailer is safe to drive."""

    SAFE = "safe"
    UNSAFE = "unsafe"


class CreateDvirRequestType(str, Enum):
    r"""Only type 'mechanic' is currently accepted."""

    MECHANIC = "mechanic"


class CreateDvirRequestTypedDict(TypedDict):
    r"""DVIR creation body"""

    author_id: str
    r"""Samsara user ID of the mechanic creating the DVIR."""
    safety_status: CreateDvirRequestSafetyStatus
    r"""Whether or not this vehicle or trailer is safe to drive."""
    type: CreateDvirRequestType
    r"""Only type 'mechanic' is currently accepted."""
    license_plate: NotRequired[str]
    r"""The license plate of this vehicle."""
    location: NotRequired[str]
    r"""Optional string if your jurisdiction requires a location of the DVIR."""
    mechanic_notes: NotRequired[str]
    r"""The mechanics notes on the DVIR."""
    odometer_meters: NotRequired[int]
    r"""The odometer reading in meters."""
    resolved_defect_ids: NotRequired[List[str]]
    r"""Array of ids for defects being resolved with this DVIR."""
    trailer_id: NotRequired[str]
    r"""Id of trailer being inspected. Either vehicleId or trailerId must be provided."""
    vehicle_id: NotRequired[str]
    r"""Id of vehicle being inspected. Either vehicleId or trailerId must be provided."""


class CreateDvirRequest(BaseModel):
    r"""DVIR creation body"""

    author_id: Annotated[str, pydantic.Field(alias="authorId")]
    r"""Samsara user ID of the mechanic creating the DVIR."""

    safety_status: Annotated[
        CreateDvirRequestSafetyStatus, pydantic.Field(alias="safetyStatus")
    ]
    r"""Whether or not this vehicle or trailer is safe to drive."""

    type: CreateDvirRequestType
    r"""Only type 'mechanic' is currently accepted."""

    license_plate: Annotated[Optional[str], pydantic.Field(alias="licensePlate")] = None
    r"""The license plate of this vehicle."""

    location: Optional[str] = None
    r"""Optional string if your jurisdiction requires a location of the DVIR."""

    mechanic_notes: Annotated[Optional[str], pydantic.Field(alias="mechanicNotes")] = (
        None
    )
    r"""The mechanics notes on the DVIR."""

    odometer_meters: Annotated[
        Optional[int], pydantic.Field(alias="odometerMeters")
    ] = None
    r"""The odometer reading in meters."""

    resolved_defect_ids: Annotated[
        Optional[List[str]], pydantic.Field(alias="resolvedDefectIds")
    ] = None
    r"""Array of ids for defects being resolved with this DVIR."""

    trailer_id: Annotated[Optional[str], pydantic.Field(alias="trailerId")] = None
    r"""Id of trailer being inspected. Either vehicleId or trailerId must be provided."""

    vehicle_id: Annotated[Optional[str], pydantic.Field(alias="vehicleId")] = None
    r"""Id of vehicle being inspected. Either vehicleId or trailerId must be provided."""
