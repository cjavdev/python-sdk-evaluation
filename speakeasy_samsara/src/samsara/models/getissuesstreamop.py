"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .issuesgetissuesstreambadrequesterrorresponsebody import (
    IssuesGetIssuesStreamBadRequestErrorResponseBody,
    IssuesGetIssuesStreamBadRequestErrorResponseBodyTypedDict,
)
from .issuesgetissuesstreamresponsebody import (
    IssuesGetIssuesStreamResponseBody,
    IssuesGetIssuesStreamResponseBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetIssuesStreamRequestTypedDict(TypedDict):
    start_time: str
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    end_time: NotRequired[str]
    r"""An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    status: NotRequired[List[str]]
    r"""A comma-separated list containing status values to filter issues on. Valid values: `open`, `inProgress`, `resolved`, `dismissed`"""
    asset_ids: NotRequired[List[str]]
    r"""A comma-separated list containing up to 50 asset IDs to filter issues on. Issues with untracked assets can also be included by passing the value: 'untracked'."""
    include: NotRequired[List[str]]
    r"""A comma separated list of additional fields to include on requested objects. Valid values: `externalIds`"""


class GetIssuesStreamRequest(BaseModel):
    start_time: Annotated[
        str,
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    end_time: Annotated[
        Optional[str],
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    status: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list containing status values to filter issues on. Valid values: `open`, `inProgress`, `resolved`, `dismissed`"""

    asset_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="assetIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list containing up to 50 asset IDs to filter issues on. Issues with untracked assets can also be included by passing the value: 'untracked'."""

    include: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma separated list of additional fields to include on requested objects. Valid values: `externalIds`"""


GetIssuesStreamResponseTypedDict = TypeAliasType(
    "GetIssuesStreamResponseTypedDict",
    Union[
        IssuesGetIssuesStreamResponseBodyTypedDict,
        IssuesGetIssuesStreamBadRequestErrorResponseBodyTypedDict,
    ],
)


GetIssuesStreamResponse = TypeAliasType(
    "GetIssuesStreamResponse",
    Union[
        IssuesGetIssuesStreamResponseBody,
        IssuesGetIssuesStreamBadRequestErrorResponseBody,
    ],
)
