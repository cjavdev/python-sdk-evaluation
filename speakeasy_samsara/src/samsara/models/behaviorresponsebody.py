"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .coachableeventresponsebody import (
    CoachableEventResponseBody,
    CoachableEventResponseBodyTypedDict,
)
from datetime import datetime
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CoachableBehaviorType(str, Enum):
    r"""Coachable behavior type for the behavior in the coaching session.  Valid values: `acceleration`, `braking`, `cameraObstruction`, `crash`, `defensiveDriving`, `didNotYield`, `drinkPolicy`, `drowsy`, `eatingDrinking`, `event`, `falsePositive`, `foodPolicy`, `forwardCollisionWarning`, `genericDistraction`, `harshTurn`, `laneDeparture`, `lateResponse`, `maskPolicy`, `maxSpeed`, `mobileUsage`, `nearCollison`, `noSeatbelt`, `obstructedCamera`, `outwardObstruction`, `passengerPolicy`, `ranRedLight`, `rollingRailroadCrossing`, `rollingStop`, `rollingStop`, `rollover`, `rolloverProtection`, `rolloverProtectionBrakeControlActivated`, `rolloverProtectionEngineControlActivated`, `severeSpeeding`, `smoking`, `speeding`, `tailgating`, `unknown`, `yawControl`, `yawControlBrakeControlActivated`, `yawControlEngineControlActivated`"""

    ACCELERATION = "acceleration"
    BRAKING = "braking"
    CAMERA_OBSTRUCTION = "cameraObstruction"
    CRASH = "crash"
    DEFENSIVE_DRIVING = "defensiveDriving"
    DID_NOT_YIELD = "didNotYield"
    DRINK_POLICY = "drinkPolicy"
    DROWSY = "drowsy"
    EATING_DRINKING = "eatingDrinking"
    EVENT = "event"
    FALSE_POSITIVE = "falsePositive"
    FOOD_POLICY = "foodPolicy"
    FORWARD_COLLISION_WARNING = "forwardCollisionWarning"
    GENERIC_DISTRACTION = "genericDistraction"
    HARSH_TURN = "harshTurn"
    LANE_DEPARTURE = "laneDeparture"
    LATE_RESPONSE = "lateResponse"
    MASK_POLICY = "maskPolicy"
    MAX_SPEED = "maxSpeed"
    MOBILE_USAGE = "mobileUsage"
    NEAR_COLLISON = "nearCollison"
    NO_SEATBELT = "noSeatbelt"
    OBSTRUCTED_CAMERA = "obstructedCamera"
    OUTWARD_OBSTRUCTION = "outwardObstruction"
    PASSENGER_POLICY = "passengerPolicy"
    RAN_RED_LIGHT = "ranRedLight"
    ROLLING_RAILROAD_CROSSING = "rollingRailroadCrossing"
    ROLLING_STOP = "rollingStop"
    ROLLOVER = "rollover"
    ROLLOVER_PROTECTION = "rolloverProtection"
    ROLLOVER_PROTECTION_BRAKE_CONTROL_ACTIVATED = (
        "rolloverProtectionBrakeControlActivated"
    )
    ROLLOVER_PROTECTION_ENGINE_CONTROL_ACTIVATED = (
        "rolloverProtectionEngineControlActivated"
    )
    SEVERE_SPEEDING = "severeSpeeding"
    SMOKING = "smoking"
    SPEEDING = "speeding"
    TAILGATING = "tailgating"
    UNKNOWN = "unknown"
    YAW_CONTROL = "yawControl"
    YAW_CONTROL_BRAKE_CONTROL_ACTIVATED = "yawControlBrakeControlActivated"
    YAW_CONTROL_ENGINE_CONTROL_ACTIVATED = "yawControlEngineControlActivated"


class BehaviorResponseBodyTypedDict(TypedDict):
    r"""Object reference for the behavior within the session."""

    coachable_behavior_type: CoachableBehaviorType
    r"""Coachable behavior type for the behavior in the coaching session.  Valid values: `acceleration`, `braking`, `cameraObstruction`, `crash`, `defensiveDriving`, `didNotYield`, `drinkPolicy`, `drowsy`, `eatingDrinking`, `event`, `falsePositive`, `foodPolicy`, `forwardCollisionWarning`, `genericDistraction`, `harshTurn`, `laneDeparture`, `lateResponse`, `maskPolicy`, `maxSpeed`, `mobileUsage`, `nearCollison`, `noSeatbelt`, `obstructedCamera`, `outwardObstruction`, `passengerPolicy`, `ranRedLight`, `rollingRailroadCrossing`, `rollingStop`, `rollingStop`, `rollover`, `rolloverProtection`, `rolloverProtectionBrakeControlActivated`, `rolloverProtectionEngineControlActivated`, `severeSpeeding`, `smoking`, `speeding`, `tailgating`, `unknown`, `yawControl`, `yawControlBrakeControlActivated`, `yawControlEngineControlActivated`"""
    id: str
    r"""Unique ID for the coaching behavior."""
    last_coached_time: datetime
    r"""Time of last coached date for the same behavior label."""
    updated_at_time: datetime
    r"""Time of coaching behavior update in UTC."""
    coachable_events: NotRequired[List[CoachableEventResponseBodyTypedDict]]
    r"""Object references for the coachableEvents within the behavior. For non Speeding events, corresponds to the unique Samsara ID of the safety event as “vehicleId - eventMS”, for Speeding events corresponds to the unique UUID of the event. Returned when includeCoachableEvents is 'true'. Capped at 100 coachable events per Coaching session. For sessions where coachable events exceed 100, please visit the Samsara dashboard to address this coaching session."""
    note: NotRequired[str]
    r"""Associated note for the coaching behavior. Returned when present."""


class BehaviorResponseBody(BaseModel):
    r"""Object reference for the behavior within the session."""

    coachable_behavior_type: Annotated[
        CoachableBehaviorType, pydantic.Field(alias="coachableBehaviorType")
    ]
    r"""Coachable behavior type for the behavior in the coaching session.  Valid values: `acceleration`, `braking`, `cameraObstruction`, `crash`, `defensiveDriving`, `didNotYield`, `drinkPolicy`, `drowsy`, `eatingDrinking`, `event`, `falsePositive`, `foodPolicy`, `forwardCollisionWarning`, `genericDistraction`, `harshTurn`, `laneDeparture`, `lateResponse`, `maskPolicy`, `maxSpeed`, `mobileUsage`, `nearCollison`, `noSeatbelt`, `obstructedCamera`, `outwardObstruction`, `passengerPolicy`, `ranRedLight`, `rollingRailroadCrossing`, `rollingStop`, `rollingStop`, `rollover`, `rolloverProtection`, `rolloverProtectionBrakeControlActivated`, `rolloverProtectionEngineControlActivated`, `severeSpeeding`, `smoking`, `speeding`, `tailgating`, `unknown`, `yawControl`, `yawControlBrakeControlActivated`, `yawControlEngineControlActivated`"""

    id: str
    r"""Unique ID for the coaching behavior."""

    last_coached_time: Annotated[datetime, pydantic.Field(alias="lastCoachedTime")]
    r"""Time of last coached date for the same behavior label."""

    updated_at_time: Annotated[datetime, pydantic.Field(alias="updatedAtTime")]
    r"""Time of coaching behavior update in UTC."""

    coachable_events: Annotated[
        Optional[List[CoachableEventResponseBody]],
        pydantic.Field(alias="coachableEvents"),
    ] = None
    r"""Object references for the coachableEvents within the behavior. For non Speeding events, corresponds to the unique Samsara ID of the safety event as “vehicleId - eventMS”, for Speeding events corresponds to the unique UUID of the event. Returned when includeCoachableEvents is 'true'. Capped at 100 coachable events per Coaching session. For sessions where coachable events exceed 100, please visit the Samsara dashboard to address this coaching session."""

    note: Optional[str] = None
    r"""Associated note for the coaching behavior. Returned when present."""
