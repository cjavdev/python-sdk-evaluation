"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .addressresponseresponsebody import (
    AddressResponseResponseBody,
    AddressResponseResponseBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SpeedingIntervalLocationResponseResponseBodyTypedDict(TypedDict):
    r"""Location object of the closest location point to the interval."""

    address: AddressResponseResponseBodyTypedDict
    r"""Closest address that the GPS latitude and longitude match to."""
    heading_degrees: int
    r"""Heading of the asset in degrees. May be 0 if the asset is not moving."""
    latitude: float
    r"""Latitude of the closest location point to the interval."""
    longitude: float
    r"""Longitude of the closest location point to the interval."""
    accuracy_meters: NotRequired[float]
    r"""Radial accuracy of gps location in meters. This will only return if strong GPS is not available."""


class SpeedingIntervalLocationResponseResponseBody(BaseModel):
    r"""Location object of the closest location point to the interval."""

    address: AddressResponseResponseBody
    r"""Closest address that the GPS latitude and longitude match to."""

    heading_degrees: Annotated[int, pydantic.Field(alias="headingDegrees")]
    r"""Heading of the asset in degrees. May be 0 if the asset is not moving."""

    latitude: float
    r"""Latitude of the closest location point to the interval."""

    longitude: float
    r"""Longitude of the closest location point to the interval."""

    accuracy_meters: Annotated[
        Optional[float], pydantic.Field(alias="accuracyMeters")
    ] = None
    r"""Radial accuracy of gps location in meters. This will only return if strong GPS is not available."""
