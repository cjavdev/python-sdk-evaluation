"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .authorsignatureobjectresponsebody import (
    AuthorSignatureObjectResponseBody,
    AuthorSignatureObjectResponseBodyTypedDict,
)
from .trailerdvirobjectresponsebody import (
    TrailerDvirObjectResponseBody,
    TrailerDvirObjectResponseBodyTypedDict,
)
from .vehicledvirobjectresponsebody import (
    VehicleDvirObjectResponseBody,
    VehicleDvirObjectResponseBodyTypedDict,
)
from .walkaroundphotoobjectresponsebody import (
    WalkaroundPhotoObjectResponseBody,
    WalkaroundPhotoObjectResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DvirStreamResponseDataResponseBodySafetyStatus(str, Enum):
    r"""The condition of vehicle on which DVIR was done.  Valid values: `unknown`, `safe`, `unsafe`, `resolved`"""

    UNKNOWN = "unknown"
    SAFE = "safe"
    UNSAFE = "unsafe"
    RESOLVED = "resolved"


class DvirStreamResponseDataResponseBodyType(str, Enum):
    r"""Inspection type of the DVIR.  Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`"""

    PRE_TRIP = "preTrip"
    POST_TRIP = "postTrip"
    MECHANIC = "mechanic"
    UNSPECIFIED = "unspecified"


class DvirStreamResponseDataResponseBodyTypedDict(TypedDict):
    author_signature: AuthorSignatureObjectResponseBodyTypedDict
    r"""An author signature for DVIRs with a signed time."""
    dvir_submission_begin_time: str
    r"""Time when driver created DVIR. UTC timestamp in RFC 3339 format."""
    dvir_submission_time: str
    r"""Time when driver submitted the DVIR. UTC timestamp in RFC 3339 format."""
    id: str
    r"""The unique id of the DVIR"""
    type: DvirStreamResponseDataResponseBodyType
    r"""Inspection type of the DVIR.  Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`"""
    updated_at_time: str
    r"""Time of any DVIR updates. UTC timestamp in RFC 3339 format."""
    defect_ids: NotRequired[List[str]]
    r"""IDs of defects registered for the DVIR."""
    formatted_address: NotRequired[str]
    mechanic_notes: NotRequired[str]
    r"""The mechanics notes on the DVIR."""
    odometer_meters: NotRequired[int]
    r"""The odometer reading in meters."""
    safety_status: NotRequired[DvirStreamResponseDataResponseBodySafetyStatus]
    r"""The condition of vehicle on which DVIR was done.  Valid values: `unknown`, `safe`, `unsafe`, `resolved`"""
    second_signature: NotRequired[AuthorSignatureObjectResponseBodyTypedDict]
    r"""An author signature for DVIRs with a signed time."""
    third_signature: NotRequired[AuthorSignatureObjectResponseBodyTypedDict]
    r"""An author signature for DVIRs with a signed time."""
    trailer: NotRequired[TrailerDvirObjectResponseBodyTypedDict]
    r"""A trailer object"""
    vehicle: NotRequired[VehicleDvirObjectResponseBodyTypedDict]
    r"""A vehicle object"""
    walkaround_photos: NotRequired[List[WalkaroundPhotoObjectResponseBodyTypedDict]]
    r"""List of walkaround photos"""


class DvirStreamResponseDataResponseBody(BaseModel):
    author_signature: Annotated[
        AuthorSignatureObjectResponseBody, pydantic.Field(alias="authorSignature")
    ]
    r"""An author signature for DVIRs with a signed time."""

    dvir_submission_begin_time: Annotated[
        str, pydantic.Field(alias="dvirSubmissionBeginTime")
    ]
    r"""Time when driver created DVIR. UTC timestamp in RFC 3339 format."""

    dvir_submission_time: Annotated[str, pydantic.Field(alias="dvirSubmissionTime")]
    r"""Time when driver submitted the DVIR. UTC timestamp in RFC 3339 format."""

    id: str
    r"""The unique id of the DVIR"""

    type: DvirStreamResponseDataResponseBodyType
    r"""Inspection type of the DVIR.  Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`"""

    updated_at_time: Annotated[str, pydantic.Field(alias="updatedAtTime")]
    r"""Time of any DVIR updates. UTC timestamp in RFC 3339 format."""

    defect_ids: Annotated[Optional[List[str]], pydantic.Field(alias="defectIds")] = None
    r"""IDs of defects registered for the DVIR."""

    formatted_address: Annotated[
        Optional[str], pydantic.Field(alias="formattedAddress")
    ] = None

    mechanic_notes: Annotated[Optional[str], pydantic.Field(alias="mechanicNotes")] = (
        None
    )
    r"""The mechanics notes on the DVIR."""

    odometer_meters: Annotated[
        Optional[int], pydantic.Field(alias="odometerMeters")
    ] = None
    r"""The odometer reading in meters."""

    safety_status: Annotated[
        Optional[DvirStreamResponseDataResponseBodySafetyStatus],
        pydantic.Field(alias="safetyStatus"),
    ] = None
    r"""The condition of vehicle on which DVIR was done.  Valid values: `unknown`, `safe`, `unsafe`, `resolved`"""

    second_signature: Annotated[
        Optional[AuthorSignatureObjectResponseBody],
        pydantic.Field(alias="secondSignature"),
    ] = None
    r"""An author signature for DVIRs with a signed time."""

    third_signature: Annotated[
        Optional[AuthorSignatureObjectResponseBody],
        pydantic.Field(alias="thirdSignature"),
    ] = None
    r"""An author signature for DVIRs with a signed time."""

    trailer: Optional[TrailerDvirObjectResponseBody] = None
    r"""A trailer object"""

    vehicle: Optional[VehicleDvirObjectResponseBody] = None
    r"""A vehicle object"""

    walkaround_photos: Annotated[
        Optional[List[WalkaroundPhotoObjectResponseBody]],
        pydantic.Field(alias="walkaroundPhotos"),
    ] = None
    r"""List of walkaround photos"""
