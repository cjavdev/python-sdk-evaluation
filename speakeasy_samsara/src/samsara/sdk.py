"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from samsara import models, utils
from samsara._hooks import SDKHooks
from samsara.addresses import Addresses
from samsara.alerts import Alerts
from samsara.assets import Assets
from samsara.attributes import Attributes
from samsara.beta_apis import BetaAPIs
from samsara.carrier_proposed_assignments import CarrierProposedAssignments
from samsara.coaching import Coaching
from samsara.contacts import Contacts
from samsara.documents import Documents
from samsara.driver_qr_codes import DriverQRCodes
from samsara.driver_vehicle_assignments import DriverVehicleAssignments
from samsara.drivers import Drivers
from samsara.equipment_sdk import EquipmentSDK
from samsara.fuel_and_energy import FuelAndEnergy
from samsara.gateways import Gateways
from samsara.hours_of_service import HoursOfService
from samsara.idling import Idling
from samsara.ifta import Ifta
from samsara.industrial import Industrial
from samsara.legacy_apis import LegacyAPIs
from samsara.live_sharing_links import LiveSharingLinks
from samsara.location_and_speed import LocationAndSpeed
from samsara.maintenance import Maintenance
from samsara.messages import Messages
from samsara.organization_info_sdk import OrganizationInfoSDK
from samsara.preview_apis import PreviewAPIs
from samsara.routes import Routes
from samsara.safety import Safety
from samsara.sensors import Sensors
from samsara.settings import Settings
from samsara.tachograph_eu_only_ import TachographEUOnly
from samsara.tags import Tags
from samsara.trailer_assignments import TrailerAssignments
from samsara.trailers import Trailers
from samsara.trips import Trips
from samsara.types import OptionalNullable, UNSET
from samsara.users import Users
from samsara.vehicle_locations import VehicleLocations
from samsara.vehicle_stats import VehicleStats
from samsara.vehicles import Vehicles
from samsara.webhooks import Webhooks
from typing import Any, Callable, Dict, Optional, Union, cast
import weakref


class Samsara(BaseSDK):
    r"""Samsara API: <style type=\"text/css\">
    n {
    padding: 1em;
    width: 100%;
    display: block;
    margin: 28px 0;
    }
    n.info {
    background-color: rgba(0, 51, 160, 0.1);
    }
    n.warning {
    background-color: #fdf6e3;
    }
    i:before {
    margin-right: 6px;
    }
    nh {
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 1.1;
    display: block;
    }
    nb {
    margin-top: 10px;
    padding-left: 22px;
    display: block;
    }
    </style>

    # Overview

    <n class=\"info\">
    <nh>
    <i class=\"fa fa-info-circle\"></i>
    Something new!
    </nh>
    <nb>
    Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br>
    <br>
    Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br>
    <br>
    *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br>
    <br>
    Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)!
    </nb>
    </n>

    Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.

    The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.

    Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.

    If you have any questions, please visit https://samsara.com/help.

    ## Endpoints

    All our APIs can be accessed through HTTP requests to URLs like:

    ```
    https://api.samsara.com/<endpoint>
    ```

    For EU customers, this URL will be:

    ```
    https://api.eu.samsara.com/<endpoint>
    ```

    <n class=\"warning\">
    <nh>
    <i class=\"fa fa-exclamation-circle\"></i>
    Note
    </nh>
    <nb>
    Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>`
    </nb>
    </n>

    ## Authentication

    To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.

    Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.

    Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:

    ```curl
    Authorization: Bearer {access_token}
    ```

    All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.

    ### OAuth2
    If building an application for our marketplace, our API is accessible via. OAuth2 as well.

    | Type  | Value |
    | ------------- |:-------------:|
    | Security scheme      | OAuth2                                   |
    | OAuth2 Flow          | accessCode                               |
    | Authorization URL    | https://api.samsara.com/oauth2/authorize |
    | Token URL            | https://api.samsara.com/oauth2/token     |



    ## Common Patterns

    You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).

    """

    addresses: Addresses
    alerts: Alerts
    beta_ap_is: BetaAPIs
    location_and_speed: LocationAndSpeed
    attributes: Attributes
    coaching: Coaching
    contacts: Contacts
    maintenance: Maintenance
    driver_qr_codes: DriverQRCodes
    carrier_proposed_assignments: CarrierProposedAssignments
    documents: Documents
    driver_vehicle_assignments: DriverVehicleAssignments
    drivers: Drivers
    tachograph_eu_only: TachographEUOnly
    legacy_ap_is: LegacyAPIs
    equipment: EquipmentSDK
    hours_of_service: HoursOfService
    fuel_and_energy: FuelAndEnergy
    ifta: Ifta
    idling: Idling
    routes: Routes
    safety: Safety
    settings: Settings
    trailers: Trailers
    vehicles: Vehicles
    vehicle_locations: VehicleLocations
    vehicle_stats: VehicleStats
    gateways: Gateways
    industrial: Industrial
    live_sharing_links: LiveSharingLinks
    organization_info: OrganizationInfoSDK
    preview_ap_is: PreviewAPIs
    tags: Tags
    users: Users
    assets: Assets
    messages: Messages
    trailer_assignments: TrailerAssignments
    trips: Trips
    sensors: Sensors
    webhooks: Webhooks

    def __init__(
        self,
        access_token_header: Optional[
            Union[Optional[str], Callable[[], Optional[str]]]
        ] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param access_token_header: The access_token_header required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(access_token_header):
            # pylint: disable=unnecessary-lambda-assignment
            security = lambda: models.Security(
                access_token_header=access_token_header()
            )
        else:
            security = models.Security(access_token_header=access_token_header)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.async_client,
        )

        self._init_sdks()

    def _init_sdks(self):
        self.addresses = Addresses(self.sdk_configuration)
        self.alerts = Alerts(self.sdk_configuration)
        self.beta_ap_is = BetaAPIs(self.sdk_configuration)
        self.location_and_speed = LocationAndSpeed(self.sdk_configuration)
        self.attributes = Attributes(self.sdk_configuration)
        self.coaching = Coaching(self.sdk_configuration)
        self.contacts = Contacts(self.sdk_configuration)
        self.maintenance = Maintenance(self.sdk_configuration)
        self.driver_qr_codes = DriverQRCodes(self.sdk_configuration)
        self.carrier_proposed_assignments = CarrierProposedAssignments(
            self.sdk_configuration
        )
        self.documents = Documents(self.sdk_configuration)
        self.driver_vehicle_assignments = DriverVehicleAssignments(
            self.sdk_configuration
        )
        self.drivers = Drivers(self.sdk_configuration)
        self.tachograph_eu_only = TachographEUOnly(self.sdk_configuration)
        self.legacy_ap_is = LegacyAPIs(self.sdk_configuration)
        self.equipment = EquipmentSDK(self.sdk_configuration)
        self.hours_of_service = HoursOfService(self.sdk_configuration)
        self.fuel_and_energy = FuelAndEnergy(self.sdk_configuration)
        self.ifta = Ifta(self.sdk_configuration)
        self.idling = Idling(self.sdk_configuration)
        self.routes = Routes(self.sdk_configuration)
        self.safety = Safety(self.sdk_configuration)
        self.settings = Settings(self.sdk_configuration)
        self.trailers = Trailers(self.sdk_configuration)
        self.vehicles = Vehicles(self.sdk_configuration)
        self.vehicle_locations = VehicleLocations(self.sdk_configuration)
        self.vehicle_stats = VehicleStats(self.sdk_configuration)
        self.gateways = Gateways(self.sdk_configuration)
        self.industrial = Industrial(self.sdk_configuration)
        self.live_sharing_links = LiveSharingLinks(self.sdk_configuration)
        self.organization_info = OrganizationInfoSDK(self.sdk_configuration)
        self.preview_ap_is = PreviewAPIs(self.sdk_configuration)
        self.tags = Tags(self.sdk_configuration)
        self.users = Users(self.sdk_configuration)
        self.assets = Assets(self.sdk_configuration)
        self.messages = Messages(self.sdk_configuration)
        self.trailer_assignments = TrailerAssignments(self.sdk_configuration)
        self.trips = Trips(self.sdk_configuration)
        self.sensors = Sensors(self.sdk_configuration)
        self.webhooks = Webhooks(self.sdk_configuration)

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.client is not None:
            self.sdk_configuration.client.close()

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.async_client is not None:
            await self.sdk_configuration.async_client.aclose()
