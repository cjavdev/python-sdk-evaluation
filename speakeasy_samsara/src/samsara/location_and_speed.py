"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from samsara import models, utils
from samsara._hooks import HookContext
from samsara.types import OptionalNullable, UNSET
from samsara.utils import get_security_from_env
from typing import Any, List, Mapping, Optional


class LocationAndSpeed(BaseSDK):
    def get_location_and_speed(
        self,
        *,
        after: Optional[str] = None,
        limit: Optional[int] = 512,
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        ids: Optional[List[str]] = None,
        include_speed: Optional[bool] = None,
        include_reverse_geo: Optional[bool] = None,
        include_geofence_lookup: Optional[bool] = None,
        include_external_ids: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetLocationAndSpeedResponse:
        r"""List asset location and speed data in an organization.

        This endpoint will return asset locations and speed data that has been collected for your organization based on the time parameters passed in. Results are paginated. If you include an endTime, the endpoint will return data up until that point. If you donâ€™t include an endTime, you can continue to poll the API real-time with the pagination cursor that gets returned on every call. The endpoint will only return data up until the endTime that has been processed by the server at the time of the original request. You will need to request the same [startTime, endTime) range again to receive data for assets processed after the original request time. This endpoint sorts the time-series data by device.

        <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Vehicles** under the Vehicles category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param limit: The limit for how many objects will be in the response. Default and max for this value is 512 objects.
        :param start_time: A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param end_time: An end time in RFC 3339 format. Defaults to never if not provided; if not provided then pagination will not cease, and a valid pagination cursor will always be returned. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param ids: Comma-separated list of asset IDs.
        :param include_speed: Optional boolean indicating whether or not to return the 'speed' object
        :param include_reverse_geo: Optional boolean indicating whether or not to return the 'address' object
        :param include_geofence_lookup: Optional boolean indicating whether or not to return the 'geofence' object
        :param include_external_ids: Optional boolean indicating whether to return external IDs on supported entities
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetLocationAndSpeedRequest(
            after=after,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            ids=ids,
            include_speed=include_speed,
            include_reverse_geo=include_reverse_geo,
            include_geofence_lookup=include_geofence_lookup,
            include_external_ids=include_external_ids,
        )

        req = self._build_request(
            method="GET",
            path="/assets/location-and-speed/stream",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getLocationAndSpeed",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.LocationAndSpeedGetLocationAndSpeedResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedUnauthorizedErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedNotFoundErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedTooManyRequestsErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedInternalServerErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedNotImplementedErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedBadGatewayErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedServiceUnavailableErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_location_and_speed_async(
        self,
        *,
        after: Optional[str] = None,
        limit: Optional[int] = 512,
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        ids: Optional[List[str]] = None,
        include_speed: Optional[bool] = None,
        include_reverse_geo: Optional[bool] = None,
        include_geofence_lookup: Optional[bool] = None,
        include_external_ids: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetLocationAndSpeedResponse:
        r"""List asset location and speed data in an organization.

        This endpoint will return asset locations and speed data that has been collected for your organization based on the time parameters passed in. Results are paginated. If you include an endTime, the endpoint will return data up until that point. If you donâ€™t include an endTime, you can continue to poll the API real-time with the pagination cursor that gets returned on every call. The endpoint will only return data up until the endTime that has been processed by the server at the time of the original request. You will need to request the same [startTime, endTime) range again to receive data for assets processed after the original request time. This endpoint sorts the time-series data by device.

        <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Vehicles** under the Vehicles category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param limit: The limit for how many objects will be in the response. Default and max for this value is 512 objects.
        :param start_time: A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param end_time: An end time in RFC 3339 format. Defaults to never if not provided; if not provided then pagination will not cease, and a valid pagination cursor will always be returned. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param ids: Comma-separated list of asset IDs.
        :param include_speed: Optional boolean indicating whether or not to return the 'speed' object
        :param include_reverse_geo: Optional boolean indicating whether or not to return the 'address' object
        :param include_geofence_lookup: Optional boolean indicating whether or not to return the 'geofence' object
        :param include_external_ids: Optional boolean indicating whether to return external IDs on supported entities
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetLocationAndSpeedRequest(
            after=after,
            limit=limit,
            start_time=start_time,
            end_time=end_time,
            ids=ids,
            include_speed=include_speed,
            include_reverse_geo=include_reverse_geo,
            include_geofence_lookup=include_geofence_lookup,
            include_external_ids=include_external_ids,
        )

        req = self._build_request_async(
            method="GET",
            path="/assets/location-and-speed/stream",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getLocationAndSpeed",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.LocationAndSpeedGetLocationAndSpeedResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedUnauthorizedErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedNotFoundErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedTooManyRequestsErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedInternalServerErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedNotImplementedErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedBadGatewayErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedServiceUnavailableErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LocationAndSpeedGetLocationAndSpeedGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LocationAndSpeedGetLocationAndSpeedBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
