"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from samsara import models, utils
from samsara._hooks import HookContext
from samsara.types import OptionalNullable, UNSET
from samsara.utils import get_security_from_env
from typing import Dict, List, Mapping, Optional, Union


class Drivers(BaseSDK):
    def list_drivers(
        self,
        *,
        driver_activation_status: Optional[
            models.ListDriversQueryParamDriverActivationStatus
        ] = None,
        limit: Optional[int] = None,
        after: Optional[str] = None,
        parent_tag_ids: Optional[List[str]] = None,
        tag_ids: Optional[List[str]] = None,
        attribute_value_ids: Optional[List[str]] = None,
        updated_after_time: Optional[str] = None,
        created_after_time: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListDriversResponse1:
        r"""List all drivers

        Get all drivers in organization.

        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        To use this endpoint, select **Read Drivers** under the Drivers category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        :param driver_activation_status: If value is `deactivated`, only drivers that are deactivated will appear in the response. This parameter will default to `active` if not provided (fetching only active drivers).
        :param limit: The limit for how many objects will be in the response. Default and max for this value is 512 objects.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param parent_tag_ids: A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`
        :param tag_ids: A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`
        :param attribute_value_ids: A filter on the data based on this comma-separated list of attribute value IDs. Only entities associated with ALL of the referenced values will be returned (i.e. the intersection of the sets of entities with each value). Example: `attributeValueIds=076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544`
        :param updated_after_time: A filter on data to have an updated at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param created_after_time: A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListDriversRequest(
            driver_activation_status=driver_activation_status,
            limit=limit,
            after=after,
            parent_tag_ids=parent_tag_ids,
            tag_ids=tag_ids,
            attribute_value_ids=attribute_value_ids,
            updated_after_time=updated_after_time,
            created_after_time=created_after_time,
        )

        req = self._build_request(
            method="GET",
            path="/fleet/drivers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="listDrivers",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ListDriversResponse)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(http_res.text, models.StandardErrorResponse)

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_drivers_async(
        self,
        *,
        driver_activation_status: Optional[
            models.ListDriversQueryParamDriverActivationStatus
        ] = None,
        limit: Optional[int] = None,
        after: Optional[str] = None,
        parent_tag_ids: Optional[List[str]] = None,
        tag_ids: Optional[List[str]] = None,
        attribute_value_ids: Optional[List[str]] = None,
        updated_after_time: Optional[str] = None,
        created_after_time: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListDriversResponse1:
        r"""List all drivers

        Get all drivers in organization.

        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        To use this endpoint, select **Read Drivers** under the Drivers category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        :param driver_activation_status: If value is `deactivated`, only drivers that are deactivated will appear in the response. This parameter will default to `active` if not provided (fetching only active drivers).
        :param limit: The limit for how many objects will be in the response. Default and max for this value is 512 objects.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param parent_tag_ids: A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`
        :param tag_ids: A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`
        :param attribute_value_ids: A filter on the data based on this comma-separated list of attribute value IDs. Only entities associated with ALL of the referenced values will be returned (i.e. the intersection of the sets of entities with each value). Example: `attributeValueIds=076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544`
        :param updated_after_time: A filter on data to have an updated at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param created_after_time: A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListDriversRequest(
            driver_activation_status=driver_activation_status,
            limit=limit,
            after=after,
            parent_tag_ids=parent_tag_ids,
            tag_ids=tag_ids,
            attribute_value_ids=attribute_value_ids,
            updated_after_time=updated_after_time,
            created_after_time=created_after_time,
        )

        req = self._build_request_async(
            method="GET",
            path="/fleet/drivers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="listDrivers",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.ListDriversResponse)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(http_res.text, models.StandardErrorResponse)

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def create_driver(
        self,
        *,
        name: str,
        password: str,
        username: str,
        attributes: Optional[
            Union[
                List[models.CreateDriverRequestAttributes],
                List[models.CreateDriverRequestAttributesTypedDict],
            ]
        ] = None,
        carrier_settings: Optional[
            Union[models.DriverCarrierSettings, models.DriverCarrierSettingsTypedDict]
        ] = None,
        current_id_card_code: Optional[str] = None,
        eld_adverse_weather_exemption_enabled: Optional[bool] = None,
        eld_big_day_exemption_enabled: Optional[bool] = None,
        eld_day_start_hour: Optional[int] = None,
        eld_exempt: Optional[bool] = None,
        eld_exempt_reason: Optional[str] = None,
        eld_pc_enabled: Optional[bool] = None,
        eld_ym_enabled: Optional[bool] = None,
        external_ids: Optional[Dict[str, str]] = None,
        has_driving_features_hidden: Optional[bool] = None,
        hos_setting: Optional[
            Union[models.DriverHosSetting, models.DriverHosSettingTypedDict]
        ] = None,
        license_number: Optional[str] = None,
        license_state: Optional[str] = None,
        locale: Optional[models.Locale] = None,
        notes: Optional[str] = None,
        peer_group_tag_id: Optional[str] = None,
        phone: Optional[str] = None,
        static_assigned_vehicle_id: Optional[str] = None,
        tachograph_card_number: Optional[str] = None,
        tag_ids: Optional[List[str]] = None,
        timezone: Optional[str] = None,
        us_driver_ruleset_override: Optional[
            Union[
                models.UsDriverRulesetOverride, models.UsDriverRulesetOverrideTypedDict
            ]
        ] = None,
        vehicle_group_tag_id: Optional[str] = None,
        waiting_time_duty_status_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateDriverResponse:
        r"""Create a driver

        Add a driver to the organization.

        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        To use this endpoint, select **Write Drivers** under the Drivers category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        :param name: Driver's name.
        :param password: Password that the driver can use to login to the Samsara driver app.
        :param username: Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.
        :param attributes:
        :param carrier_settings: Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.
        :param current_id_card_code: The ID Card Code on the back of the physical card assigned to the driver.  Contact Samsara if you would like to enable this feature.
        :param eld_adverse_weather_exemption_enabled: Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
        :param eld_big_day_exemption_enabled: Flag indicating this driver may use Big Day exemption in ELD logs.
        :param eld_day_start_hour: `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
        :param eld_exempt: Flag indicating this driver is exempt from the Electronic Logging Mandate.
        :param eld_exempt_reason: Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
        :param eld_pc_enabled: Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
        :param eld_ym_enabled: Flag indicating this driver may select the Yard Move duty status in ELD logs.
        :param external_ids: The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
        :param has_driving_features_hidden: A boolean indicating whether the driver has driving-related features hidden in the Driver App, including Vehicle selection, HOS, Routing, Team Driving, Documents, and Trip Logs. Default value is false if omitted. Note: only available to customers of Connected Forms.
        :param hos_setting: Hos settings for a driver.
        :param license_number: Driver's state issued license number. The combination of this number and `licenseState` must be unique.
        :param license_state: Abbreviation of US state, Canadian province, or US territory that issued driver's license.
        :param locale: Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales. Valid values: `us`, `at`, `be`, `ca`, `gb`, `fr`, `de`, `ie`, `it`, `lu`, `mx`, `nl`, `es`, `ch`, `pr`.
        :param notes: Notes about the driver.
        :param peer_group_tag_id: The peer group tag id this driver belong to, used for gamification.
        :param phone: Phone number of the driver.
        :param static_assigned_vehicle_id: ID of vehicle that the driver is permanently assigned to. (uncommon).
        :param tachograph_card_number: Driver's assigned tachograph card number (Europe specific)
        :param tag_ids: IDs of tags the driver is associated with. If your access to the API is scoped by one or more tags, this field is required to pass in.
        :param timezone: Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
        :param us_driver_ruleset_override: US Driver Ruleset override for a given driver. If the driver is operating under a ruleset different from the organization default, the override is used. Updating this value only updates the override setting for this driver. Explicitly setting this field to `null` will delete driver's ruleset override. If the driver does not have an override ruleset set, the response will not include any usDriverRulesetOverride information.
        :param vehicle_group_tag_id: Tag ID which determines which vehicles a driver will see when selecting vehicles.
        :param waiting_time_duty_status_enabled: Flag indicating this driver may select waiting time duty status in ELD logs
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateDriverRequest(
            attributes=utils.get_pydantic_model(
                attributes, Optional[List[models.CreateDriverRequestAttributes]]
            ),
            carrier_settings=utils.get_pydantic_model(
                carrier_settings, Optional[models.DriverCarrierSettings]
            ),
            current_id_card_code=current_id_card_code,
            eld_adverse_weather_exemption_enabled=eld_adverse_weather_exemption_enabled,
            eld_big_day_exemption_enabled=eld_big_day_exemption_enabled,
            eld_day_start_hour=eld_day_start_hour,
            eld_exempt=eld_exempt,
            eld_exempt_reason=eld_exempt_reason,
            eld_pc_enabled=eld_pc_enabled,
            eld_ym_enabled=eld_ym_enabled,
            external_ids=external_ids,
            has_driving_features_hidden=has_driving_features_hidden,
            hos_setting=utils.get_pydantic_model(
                hos_setting, Optional[models.DriverHosSetting]
            ),
            license_number=license_number,
            license_state=license_state,
            locale=locale,
            name=name,
            notes=notes,
            password=password,
            peer_group_tag_id=peer_group_tag_id,
            phone=phone,
            static_assigned_vehicle_id=static_assigned_vehicle_id,
            tachograph_card_number=tachograph_card_number,
            tag_ids=tag_ids,
            timezone=timezone,
            us_driver_ruleset_override=utils.get_pydantic_model(
                us_driver_ruleset_override, Optional[models.UsDriverRulesetOverride]
            ),
            username=username,
            vehicle_group_tag_id=vehicle_group_tag_id,
            waiting_time_duty_status_enabled=waiting_time_duty_status_enabled,
        )

        req = self._build_request(
            method="POST",
            path="/fleet/drivers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateDriverRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="createDriver",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DriverResponse)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(http_res.text, models.StandardErrorResponse)

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_driver_async(
        self,
        *,
        name: str,
        password: str,
        username: str,
        attributes: Optional[
            Union[
                List[models.CreateDriverRequestAttributes],
                List[models.CreateDriverRequestAttributesTypedDict],
            ]
        ] = None,
        carrier_settings: Optional[
            Union[models.DriverCarrierSettings, models.DriverCarrierSettingsTypedDict]
        ] = None,
        current_id_card_code: Optional[str] = None,
        eld_adverse_weather_exemption_enabled: Optional[bool] = None,
        eld_big_day_exemption_enabled: Optional[bool] = None,
        eld_day_start_hour: Optional[int] = None,
        eld_exempt: Optional[bool] = None,
        eld_exempt_reason: Optional[str] = None,
        eld_pc_enabled: Optional[bool] = None,
        eld_ym_enabled: Optional[bool] = None,
        external_ids: Optional[Dict[str, str]] = None,
        has_driving_features_hidden: Optional[bool] = None,
        hos_setting: Optional[
            Union[models.DriverHosSetting, models.DriverHosSettingTypedDict]
        ] = None,
        license_number: Optional[str] = None,
        license_state: Optional[str] = None,
        locale: Optional[models.Locale] = None,
        notes: Optional[str] = None,
        peer_group_tag_id: Optional[str] = None,
        phone: Optional[str] = None,
        static_assigned_vehicle_id: Optional[str] = None,
        tachograph_card_number: Optional[str] = None,
        tag_ids: Optional[List[str]] = None,
        timezone: Optional[str] = None,
        us_driver_ruleset_override: Optional[
            Union[
                models.UsDriverRulesetOverride, models.UsDriverRulesetOverrideTypedDict
            ]
        ] = None,
        vehicle_group_tag_id: Optional[str] = None,
        waiting_time_duty_status_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateDriverResponse:
        r"""Create a driver

        Add a driver to the organization.

        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        To use this endpoint, select **Write Drivers** under the Drivers category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        :param name: Driver's name.
        :param password: Password that the driver can use to login to the Samsara driver app.
        :param username: Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.
        :param attributes:
        :param carrier_settings: Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.
        :param current_id_card_code: The ID Card Code on the back of the physical card assigned to the driver.  Contact Samsara if you would like to enable this feature.
        :param eld_adverse_weather_exemption_enabled: Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
        :param eld_big_day_exemption_enabled: Flag indicating this driver may use Big Day exemption in ELD logs.
        :param eld_day_start_hour: `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
        :param eld_exempt: Flag indicating this driver is exempt from the Electronic Logging Mandate.
        :param eld_exempt_reason: Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
        :param eld_pc_enabled: Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
        :param eld_ym_enabled: Flag indicating this driver may select the Yard Move duty status in ELD logs.
        :param external_ids: The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
        :param has_driving_features_hidden: A boolean indicating whether the driver has driving-related features hidden in the Driver App, including Vehicle selection, HOS, Routing, Team Driving, Documents, and Trip Logs. Default value is false if omitted. Note: only available to customers of Connected Forms.
        :param hos_setting: Hos settings for a driver.
        :param license_number: Driver's state issued license number. The combination of this number and `licenseState` must be unique.
        :param license_state: Abbreviation of US state, Canadian province, or US territory that issued driver's license.
        :param locale: Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales. Valid values: `us`, `at`, `be`, `ca`, `gb`, `fr`, `de`, `ie`, `it`, `lu`, `mx`, `nl`, `es`, `ch`, `pr`.
        :param notes: Notes about the driver.
        :param peer_group_tag_id: The peer group tag id this driver belong to, used for gamification.
        :param phone: Phone number of the driver.
        :param static_assigned_vehicle_id: ID of vehicle that the driver is permanently assigned to. (uncommon).
        :param tachograph_card_number: Driver's assigned tachograph card number (Europe specific)
        :param tag_ids: IDs of tags the driver is associated with. If your access to the API is scoped by one or more tags, this field is required to pass in.
        :param timezone: Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
        :param us_driver_ruleset_override: US Driver Ruleset override for a given driver. If the driver is operating under a ruleset different from the organization default, the override is used. Updating this value only updates the override setting for this driver. Explicitly setting this field to `null` will delete driver's ruleset override. If the driver does not have an override ruleset set, the response will not include any usDriverRulesetOverride information.
        :param vehicle_group_tag_id: Tag ID which determines which vehicles a driver will see when selecting vehicles.
        :param waiting_time_duty_status_enabled: Flag indicating this driver may select waiting time duty status in ELD logs
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateDriverRequest(
            attributes=utils.get_pydantic_model(
                attributes, Optional[List[models.CreateDriverRequestAttributes]]
            ),
            carrier_settings=utils.get_pydantic_model(
                carrier_settings, Optional[models.DriverCarrierSettings]
            ),
            current_id_card_code=current_id_card_code,
            eld_adverse_weather_exemption_enabled=eld_adverse_weather_exemption_enabled,
            eld_big_day_exemption_enabled=eld_big_day_exemption_enabled,
            eld_day_start_hour=eld_day_start_hour,
            eld_exempt=eld_exempt,
            eld_exempt_reason=eld_exempt_reason,
            eld_pc_enabled=eld_pc_enabled,
            eld_ym_enabled=eld_ym_enabled,
            external_ids=external_ids,
            has_driving_features_hidden=has_driving_features_hidden,
            hos_setting=utils.get_pydantic_model(
                hos_setting, Optional[models.DriverHosSetting]
            ),
            license_number=license_number,
            license_state=license_state,
            locale=locale,
            name=name,
            notes=notes,
            password=password,
            peer_group_tag_id=peer_group_tag_id,
            phone=phone,
            static_assigned_vehicle_id=static_assigned_vehicle_id,
            tachograph_card_number=tachograph_card_number,
            tag_ids=tag_ids,
            timezone=timezone,
            us_driver_ruleset_override=utils.get_pydantic_model(
                us_driver_ruleset_override, Optional[models.UsDriverRulesetOverride]
            ),
            username=username,
            vehicle_group_tag_id=vehicle_group_tag_id,
            waiting_time_duty_status_enabled=waiting_time_duty_status_enabled,
        )

        req = self._build_request_async(
            method="POST",
            path="/fleet/drivers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateDriverRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="createDriver",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DriverResponse)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(http_res.text, models.StandardErrorResponse)

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_driver(
        self,
        *,
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDriverResponse:
        r"""Retrieve a driver

        Get information about a driver.

        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        To use this endpoint, select **Read Drivers** under the Drivers category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        :param id: ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: `key:value`. For example, `payrollId:ABFS18600`
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDriverRequest(
            id=id,
        )

        req = self._build_request(
            method="GET",
            path="/fleet/drivers/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getDriver",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DriverResponse)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(http_res.text, models.StandardErrorResponse)

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_driver_async(
        self,
        *,
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDriverResponse:
        r"""Retrieve a driver

        Get information about a driver.

        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        To use this endpoint, select **Read Drivers** under the Drivers category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        :param id: ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: `key:value`. For example, `payrollId:ABFS18600`
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDriverRequest(
            id=id,
        )

        req = self._build_request_async(
            method="GET",
            path="/fleet/drivers/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getDriver",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DriverResponse)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(http_res.text, models.StandardErrorResponse)

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def update_driver(
        self,
        *,
        id: str,
        attributes: Optional[
            Union[
                List[models.CreateDriverRequestAttributes],
                List[models.CreateDriverRequestAttributesTypedDict],
            ]
        ] = None,
        carrier_settings: Optional[
            Union[models.DriverCarrierSettings, models.DriverCarrierSettingsTypedDict]
        ] = None,
        current_id_card_code: Optional[str] = None,
        deactivated_at_time: Optional[str] = None,
        driver_activation_status: Optional[
            models.UpdateDriverRequestDriverActivationStatus
        ] = None,
        eld_adverse_weather_exemption_enabled: Optional[bool] = None,
        eld_big_day_exemption_enabled: Optional[bool] = None,
        eld_day_start_hour: Optional[int] = None,
        eld_exempt: Optional[bool] = None,
        eld_exempt_reason: Optional[str] = None,
        eld_pc_enabled: Optional[bool] = None,
        eld_ym_enabled: Optional[bool] = None,
        external_ids: Optional[Dict[str, str]] = None,
        has_driving_features_hidden: Optional[bool] = None,
        hos_setting: Optional[
            Union[
                models.UpdateDriverRequestHosSetting,
                models.UpdateDriverRequestHosSettingTypedDict,
            ]
        ] = None,
        license_number: Optional[str] = None,
        license_state: Optional[str] = None,
        locale: Optional[models.UpdateDriverRequestLocale] = None,
        name: Optional[str] = None,
        notes: Optional[str] = None,
        password: Optional[str] = None,
        peer_group_tag_id: Optional[str] = None,
        phone: Optional[str] = None,
        static_assigned_vehicle_id: Optional[str] = None,
        tachograph_card_number: Optional[str] = None,
        tag_ids: Optional[List[str]] = None,
        timezone: Optional[str] = None,
        us_driver_ruleset_override: Optional[
            Union[
                models.UsDriverRulesetOverride, models.UsDriverRulesetOverrideTypedDict
            ]
        ] = None,
        username: Optional[str] = None,
        vehicle_group_tag_id: Optional[str] = None,
        waiting_time_duty_status_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateDriverResponse:
        r"""Update a driver

        Update a specific driver's information. This can also be used to activate or de-activate a given driver by setting the driverActivationStatus field. If the driverActivationStatus field is 'deactivated' then the user can also specify the deactivatedAtTime. The deactivatedAtTime cannot be more than 6 months in the past and must not come before the dirver's latest active HOS log. It will be considered an error if deactivatedAtTime is provided with a driverActivationStatus of active.

        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        To use this endpoint, select **Write Drivers** under the Drivers category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        :param id: ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: `key:value`. For example, `payrollId:ABFS18600`
        :param attributes:
        :param carrier_settings: Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.
        :param current_id_card_code: The ID Card Code on the back of the physical card assigned to the driver.  Contact Samsara if you would like to enable this feature.
        :param deactivated_at_time: The date and time this driver is considered to be deactivated in RFC 3339 format.
        :param driver_activation_status: A value indicating whether the driver is active or deactivated. Valid values: `active`, `deactivated`.
        :param eld_adverse_weather_exemption_enabled: Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
        :param eld_big_day_exemption_enabled: Flag indicating this driver may use Big Day exemption in ELD logs.
        :param eld_day_start_hour: `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
        :param eld_exempt: Flag indicating this driver is exempt from the Electronic Logging Mandate.
        :param eld_exempt_reason: Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
        :param eld_pc_enabled: Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
        :param eld_ym_enabled: Flag indicating this driver may select the Yard Move duty status in ELD logs.
        :param external_ids: The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
        :param has_driving_features_hidden: A boolean indicating whether the driver has driving-related features hidden in the Driver App, including Vehicle selection, HOS, Routing, Team Driving, Documents, and Trip Logs. Default value is false if omitted. Note: only available to customers of Connected Forms.
        :param hos_setting: Hos settings for a driver.
        :param license_number: Driver's state issued license number. The combination of this number and `licenseState` must be unique.
        :param license_state: Abbreviation of US state, Canadian province, or US territory that issued driver's license.
        :param locale: Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales. Valid values: `us`, `at`, `be`, `ca`, `gb`, `fr`, `de`, `ie`, `it`, `lu`, `mx`, `nl`, `es`, `ch`, `pr`.
        :param name: Driver's name.
        :param notes: Notes about the driver.
        :param password: Password that the driver can use to login to the Samsara driver app.
        :param peer_group_tag_id: The peer group tag id this driver belong to, leave blank to be in group with everyone, used for gamification.
        :param phone: Phone number of the driver.
        :param static_assigned_vehicle_id: ID of vehicle that the driver is permanently assigned to. (uncommon).
        :param tachograph_card_number: Driver's assigned tachograph card number (Europe specific)
        :param tag_ids: IDs of tags the driver is associated with. If your access to the API is scoped by one or more tags, this field is required to pass in.
        :param timezone: Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
        :param us_driver_ruleset_override: US Driver Ruleset override for a given driver. If the driver is operating under a ruleset different from the organization default, the override is used. Updating this value only updates the override setting for this driver. Explicitly setting this field to `null` will delete driver's ruleset override. If the driver does not have an override ruleset set, the response will not include any usDriverRulesetOverride information.
        :param username: Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.
        :param vehicle_group_tag_id: Tag ID which determines which vehicles a driver will see when selecting vehicles.
        :param waiting_time_duty_status_enabled: Flag indicating this driver may select waiting time duty status in ELD logs
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdateDriverRequest1(
            id=id,
            update_driver_request=models.UpdateDriverRequest(
                attributes=utils.get_pydantic_model(
                    attributes, Optional[List[models.CreateDriverRequestAttributes]]
                ),
                carrier_settings=utils.get_pydantic_model(
                    carrier_settings, Optional[models.DriverCarrierSettings]
                ),
                current_id_card_code=current_id_card_code,
                deactivated_at_time=deactivated_at_time,
                driver_activation_status=driver_activation_status,
                eld_adverse_weather_exemption_enabled=eld_adverse_weather_exemption_enabled,
                eld_big_day_exemption_enabled=eld_big_day_exemption_enabled,
                eld_day_start_hour=eld_day_start_hour,
                eld_exempt=eld_exempt,
                eld_exempt_reason=eld_exempt_reason,
                eld_pc_enabled=eld_pc_enabled,
                eld_ym_enabled=eld_ym_enabled,
                external_ids=external_ids,
                has_driving_features_hidden=has_driving_features_hidden,
                hos_setting=utils.get_pydantic_model(
                    hos_setting, Optional[models.UpdateDriverRequestHosSetting]
                ),
                license_number=license_number,
                license_state=license_state,
                locale=locale,
                name=name,
                notes=notes,
                password=password,
                peer_group_tag_id=peer_group_tag_id,
                phone=phone,
                static_assigned_vehicle_id=static_assigned_vehicle_id,
                tachograph_card_number=tachograph_card_number,
                tag_ids=tag_ids,
                timezone=timezone,
                us_driver_ruleset_override=utils.get_pydantic_model(
                    us_driver_ruleset_override, Optional[models.UsDriverRulesetOverride]
                ),
                username=username,
                vehicle_group_tag_id=vehicle_group_tag_id,
                waiting_time_duty_status_enabled=waiting_time_duty_status_enabled,
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/fleet/drivers/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_driver_request,
                False,
                False,
                "json",
                models.UpdateDriverRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="updateDriver",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DriverResponse)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(http_res.text, models.StandardErrorResponse)

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def update_driver_async(
        self,
        *,
        id: str,
        attributes: Optional[
            Union[
                List[models.CreateDriverRequestAttributes],
                List[models.CreateDriverRequestAttributesTypedDict],
            ]
        ] = None,
        carrier_settings: Optional[
            Union[models.DriverCarrierSettings, models.DriverCarrierSettingsTypedDict]
        ] = None,
        current_id_card_code: Optional[str] = None,
        deactivated_at_time: Optional[str] = None,
        driver_activation_status: Optional[
            models.UpdateDriverRequestDriverActivationStatus
        ] = None,
        eld_adverse_weather_exemption_enabled: Optional[bool] = None,
        eld_big_day_exemption_enabled: Optional[bool] = None,
        eld_day_start_hour: Optional[int] = None,
        eld_exempt: Optional[bool] = None,
        eld_exempt_reason: Optional[str] = None,
        eld_pc_enabled: Optional[bool] = None,
        eld_ym_enabled: Optional[bool] = None,
        external_ids: Optional[Dict[str, str]] = None,
        has_driving_features_hidden: Optional[bool] = None,
        hos_setting: Optional[
            Union[
                models.UpdateDriverRequestHosSetting,
                models.UpdateDriverRequestHosSettingTypedDict,
            ]
        ] = None,
        license_number: Optional[str] = None,
        license_state: Optional[str] = None,
        locale: Optional[models.UpdateDriverRequestLocale] = None,
        name: Optional[str] = None,
        notes: Optional[str] = None,
        password: Optional[str] = None,
        peer_group_tag_id: Optional[str] = None,
        phone: Optional[str] = None,
        static_assigned_vehicle_id: Optional[str] = None,
        tachograph_card_number: Optional[str] = None,
        tag_ids: Optional[List[str]] = None,
        timezone: Optional[str] = None,
        us_driver_ruleset_override: Optional[
            Union[
                models.UsDriverRulesetOverride, models.UsDriverRulesetOverrideTypedDict
            ]
        ] = None,
        username: Optional[str] = None,
        vehicle_group_tag_id: Optional[str] = None,
        waiting_time_duty_status_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateDriverResponse:
        r"""Update a driver

        Update a specific driver's information. This can also be used to activate or de-activate a given driver by setting the driverActivationStatus field. If the driverActivationStatus field is 'deactivated' then the user can also specify the deactivatedAtTime. The deactivatedAtTime cannot be more than 6 months in the past and must not come before the dirver's latest active HOS log. It will be considered an error if deactivatedAtTime is provided with a driverActivationStatus of active.

        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        To use this endpoint, select **Write Drivers** under the Drivers category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        :param id: ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: `key:value`. For example, `payrollId:ABFS18600`
        :param attributes:
        :param carrier_settings: Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.
        :param current_id_card_code: The ID Card Code on the back of the physical card assigned to the driver.  Contact Samsara if you would like to enable this feature.
        :param deactivated_at_time: The date and time this driver is considered to be deactivated in RFC 3339 format.
        :param driver_activation_status: A value indicating whether the driver is active or deactivated. Valid values: `active`, `deactivated`.
        :param eld_adverse_weather_exemption_enabled: Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
        :param eld_big_day_exemption_enabled: Flag indicating this driver may use Big Day exemption in ELD logs.
        :param eld_day_start_hour: `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
        :param eld_exempt: Flag indicating this driver is exempt from the Electronic Logging Mandate.
        :param eld_exempt_reason: Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
        :param eld_pc_enabled: Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
        :param eld_ym_enabled: Flag indicating this driver may select the Yard Move duty status in ELD logs.
        :param external_ids: The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
        :param has_driving_features_hidden: A boolean indicating whether the driver has driving-related features hidden in the Driver App, including Vehicle selection, HOS, Routing, Team Driving, Documents, and Trip Logs. Default value is false if omitted. Note: only available to customers of Connected Forms.
        :param hos_setting: Hos settings for a driver.
        :param license_number: Driver's state issued license number. The combination of this number and `licenseState` must be unique.
        :param license_state: Abbreviation of US state, Canadian province, or US territory that issued driver's license.
        :param locale: Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales. Valid values: `us`, `at`, `be`, `ca`, `gb`, `fr`, `de`, `ie`, `it`, `lu`, `mx`, `nl`, `es`, `ch`, `pr`.
        :param name: Driver's name.
        :param notes: Notes about the driver.
        :param password: Password that the driver can use to login to the Samsara driver app.
        :param peer_group_tag_id: The peer group tag id this driver belong to, leave blank to be in group with everyone, used for gamification.
        :param phone: Phone number of the driver.
        :param static_assigned_vehicle_id: ID of vehicle that the driver is permanently assigned to. (uncommon).
        :param tachograph_card_number: Driver's assigned tachograph card number (Europe specific)
        :param tag_ids: IDs of tags the driver is associated with. If your access to the API is scoped by one or more tags, this field is required to pass in.
        :param timezone: Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
        :param us_driver_ruleset_override: US Driver Ruleset override for a given driver. If the driver is operating under a ruleset different from the organization default, the override is used. Updating this value only updates the override setting for this driver. Explicitly setting this field to `null` will delete driver's ruleset override. If the driver does not have an override ruleset set, the response will not include any usDriverRulesetOverride information.
        :param username: Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.
        :param vehicle_group_tag_id: Tag ID which determines which vehicles a driver will see when selecting vehicles.
        :param waiting_time_duty_status_enabled: Flag indicating this driver may select waiting time duty status in ELD logs
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdateDriverRequest1(
            id=id,
            update_driver_request=models.UpdateDriverRequest(
                attributes=utils.get_pydantic_model(
                    attributes, Optional[List[models.CreateDriverRequestAttributes]]
                ),
                carrier_settings=utils.get_pydantic_model(
                    carrier_settings, Optional[models.DriverCarrierSettings]
                ),
                current_id_card_code=current_id_card_code,
                deactivated_at_time=deactivated_at_time,
                driver_activation_status=driver_activation_status,
                eld_adverse_weather_exemption_enabled=eld_adverse_weather_exemption_enabled,
                eld_big_day_exemption_enabled=eld_big_day_exemption_enabled,
                eld_day_start_hour=eld_day_start_hour,
                eld_exempt=eld_exempt,
                eld_exempt_reason=eld_exempt_reason,
                eld_pc_enabled=eld_pc_enabled,
                eld_ym_enabled=eld_ym_enabled,
                external_ids=external_ids,
                has_driving_features_hidden=has_driving_features_hidden,
                hos_setting=utils.get_pydantic_model(
                    hos_setting, Optional[models.UpdateDriverRequestHosSetting]
                ),
                license_number=license_number,
                license_state=license_state,
                locale=locale,
                name=name,
                notes=notes,
                password=password,
                peer_group_tag_id=peer_group_tag_id,
                phone=phone,
                static_assigned_vehicle_id=static_assigned_vehicle_id,
                tachograph_card_number=tachograph_card_number,
                tag_ids=tag_ids,
                timezone=timezone,
                us_driver_ruleset_override=utils.get_pydantic_model(
                    us_driver_ruleset_override, Optional[models.UsDriverRulesetOverride]
                ),
                username=username,
                vehicle_group_tag_id=vehicle_group_tag_id,
                waiting_time_duty_status_enabled=waiting_time_duty_status_enabled,
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/fleet/drivers/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_driver_request,
                False,
                False,
                "json",
                models.UpdateDriverRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="updateDriver",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DriverResponse)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(http_res.text, models.StandardErrorResponse)

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
