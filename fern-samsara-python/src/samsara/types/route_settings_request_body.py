# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .route_settings_request_body_route_completion_condition import RouteSettingsRequestBodyRouteCompletionCondition
from ..core.serialization import FieldMetadata
import pydantic
from .route_settings_request_body_route_starting_condition import RouteSettingsRequestBodyRouteStartingCondition
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class RouteSettingsRequestBody(UniversalBaseModel):
    """
    An optional dictionary, only necessary to override the defaults for route start and end conditions.
    """

    route_completion_condition: typing_extensions.Annotated[
        typing.Optional[RouteSettingsRequestBodyRouteCompletionCondition],
        FieldMetadata(alias="routeCompletionCondition"),
    ] = pydantic.Field(default=None)
    """
    Defaults to 'arriveLastStop' which ends the route upon arriving at the final stop. The condition 'departLastStop' 
    ends the route upon departing the last stop. If 'arriveLastStop' is set, then the departure time of the final stop should not be set.  Valid values: `arriveLastStop`, `departLastStop`
    """

    route_starting_condition: typing_extensions.Annotated[
        typing.Optional[RouteSettingsRequestBodyRouteStartingCondition], FieldMetadata(alias="routeStartingCondition")
    ] = pydantic.Field(default=None)
    """
    Defaults to 'departFirstStop' which starts the route upon departing the first stop in the route.
     The condition 'arriveFirstStop' starts the route upon arriving at the first stop in the route. If 'departFirstStop' is set,
    the arrival time of the first stop should not be set.  Valid values: `departFirstStop`, `arriveFirstStop`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
