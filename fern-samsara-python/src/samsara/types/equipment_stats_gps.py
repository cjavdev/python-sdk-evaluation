# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .address_tiny_response import AddressTinyResponse
import typing_extensions
from .asset_location_heading import AssetLocationHeading
from ..core.serialization import FieldMetadata
import pydantic
from .reverse_geo import ReverseGeo
from .asset_location_speed import AssetLocationSpeed
from .time import Time
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class EquipmentStatsGps(UniversalBaseModel):
    """
    GPS location of equipment.
    """

    address: typing.Optional[AddressTinyResponse] = None
    heading_degrees: typing_extensions.Annotated[
        typing.Optional[AssetLocationHeading], FieldMetadata(alias="headingDegrees")
    ] = None
    latitude: float = pydantic.Field()
    """
    GPS latitude represented in degrees
    """

    longitude: float = pydantic.Field()
    """
    GPS longitude represented in degrees
    """

    reverse_geo: typing_extensions.Annotated[typing.Optional[ReverseGeo], FieldMetadata(alias="reverseGeo")] = None
    speed_miles_per_hour: typing_extensions.Annotated[
        typing.Optional[AssetLocationSpeed], FieldMetadata(alias="speedMilesPerHour")
    ] = None
    time: Time

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
