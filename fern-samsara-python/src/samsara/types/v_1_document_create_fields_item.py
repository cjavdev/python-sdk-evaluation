# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .v_1_document_create_fields_item_date_time_value import V1DocumentCreateFieldsItemDateTimeValue
from ..core.serialization import FieldMetadata
import pydantic
from .v_1_document_create_fields_item_multiple_choice_value_item import (
    V1DocumentCreateFieldsItemMultipleChoiceValueItem,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DocumentCreateFieldsItem(UniversalBaseModel):
    """
    Field item parameters.
    """

    date_time_value: typing_extensions.Annotated[
        typing.Optional[V1DocumentCreateFieldsItemDateTimeValue], FieldMetadata(alias="dateTimeValue")
    ] = pydantic.Field(default=None)
    """
    The date time value to populate the field. Use with ValueType_DateTime. Cannot be ommited or set to null
    """

    label: str = pydantic.Field()
    """
    label of the field
    """

    multiple_choice_value: typing_extensions.Annotated[
        typing.Optional[typing.List[V1DocumentCreateFieldsItemMultipleChoiceValueItem]],
        FieldMetadata(alias="multipleChoiceValue"),
    ] = pydantic.Field(default=None)
    """
    The multiple choice value to populate the field. Use with ValueType_MultipleChoice. Cannot be ommited or set to null
    """

    number_value: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="numberValue")] = (
        pydantic.Field(default=None)
    )
    """
    The number value to populate the field. Use with ValueType_Number. Can be ommited or set to null
    """

    string_value: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="stringValue")] = (
        pydantic.Field(default=None)
    )
    """
    The string value to populate the field. Use with ValueType_String. Can be ommited or set to null
    """

    value: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    DEPRECATED. Please use one of the type-specific parameters.
    """

    value_type: typing_extensions.Annotated[str, FieldMetadata(alias="valueType")] = pydantic.Field()
    """
    The valueType of the field. Use with the corresponding {type of field}Value attribute. Signature and photo fields do not support values added via API. Their values must be omitted or set to null. For example:
    
    ```
    
    "fields": [
    
      {
    
        "label": "Signature",
    
        "valueType": "ValueType_Signature"
    
      },
    
      ... more fields
    
    ]
    
    ```
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
