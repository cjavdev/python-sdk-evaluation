# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .v_1_document_field_type import V1DocumentFieldType
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DocumentType(UniversalBaseModel):
    field_types: typing_extensions.Annotated[typing.List[V1DocumentFieldType], FieldMetadata(alias="fieldTypes")] = (
        pydantic.Field()
    )
    """
    The fields associated with this document type.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the document type.
    """

    org_id: typing_extensions.Annotated[int, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    ID for the organization this document belongs to.
    """

    uuid_: typing_extensions.Annotated[str, FieldMetadata(alias="uuid")] = pydantic.Field()
    """
    Universally unique identifier for the document type. Can be passed in as the `documentTypeUuid` when creating a document for this document type.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
