# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
import datetime as dt
from .get_custom_report_run_object_response_body_status import GetCustomReportRunObjectResponseBodyStatus
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class GetCustomReportRunObjectResponseBody(UniversalBaseModel):
    """
    The full custom report run object.
    """

    attribute_value_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="attributeValueIds")
    ] = pydantic.Field(default=None)
    """
    The optional array of attribute value ids to filter the custom report run data by.
    """

    created_at_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAtTime")] = pydantic.Field()
    """
    Time of when the custom report run was created in RFC 3339 format.
    """

    custom_report_id: typing_extensions.Annotated[str, FieldMetadata(alias="customReportId")] = pydantic.Field()
    """
    Unique ID for the custom report that it belongs to.
    """

    end_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="endTime")] = pydantic.Field()
    """
    The end time of the custom report run in RFC 3339 format.
    """

    id: str = pydantic.Field()
    """
    Unique ID for the custom report run object.
    """

    percent_complete: typing_extensions.Annotated[int, FieldMetadata(alias="percentComplete")] = pydantic.Field()
    """
    The percentage completed of this custom report run. Valid values from 0-100, inclusive.
    """

    start_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="startTime")] = pydantic.Field()
    """
    The start time of the custom report run in RFC 3339 format.
    """

    status: GetCustomReportRunObjectResponseBodyStatus = pydantic.Field()
    """
    The status of the custom report run.  Valid values: `completed`, `pending`, `failed`, `cancelled`
    """

    tag_ids: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="tagIds")] = (
        pydantic.Field(default=None)
    )
    """
    The optional array of tag ids to filter the custom report run by.
    """

    updated_at_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAtTime")] = pydantic.Field()
    """
    Time of when the custom report run was last updated in RFC 3339 format.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
