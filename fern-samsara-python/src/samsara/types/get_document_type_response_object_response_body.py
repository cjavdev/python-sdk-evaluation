# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .conditional_field_section_object_response_body import ConditionalFieldSectionObjectResponseBody
from ..core.serialization import FieldMetadata
import pydantic
from .field_types_object_response_body import FieldTypesObjectResponseBody
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class GetDocumentTypeResponseObjectResponseBody(UniversalBaseModel):
    conditional_field_sections: typing_extensions.Annotated[
        typing.Optional[typing.List[ConditionalFieldSectionObjectResponseBody]],
        FieldMetadata(alias="conditionalFieldSections"),
    ] = pydantic.Field(default=None)
    """
    List of the document type conditional field sections.
    """

    field_types: typing_extensions.Annotated[
        typing.Optional[typing.List[FieldTypesObjectResponseBody]], FieldMetadata(alias="fieldTypes")
    ] = pydantic.Field(default=None)
    """
    The fields associated with this document type.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Universally unique identifier for the document type. This value can be passed in as the documentTypeId when creating a document.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the document type.
    """

    org_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="orgId")] = pydantic.Field(
        default=None
    )
    """
    ID for the organization this document type belongs to.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
