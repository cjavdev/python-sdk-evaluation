# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .v_1_vehicle_location_odometer_type import V1VehicleLocationOdometerType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1VehicleLocation(UniversalBaseModel):
    """
    Contains the location, in latitude and longitude, of a vehicle.
    """

    driver_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="driverId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the driver currently assigned to this vehicle.
    """

    heading: typing.Optional[float] = pydantic.Field(default=None)
    """
    Heading in degrees.
    """

    id: int = pydantic.Field()
    """
    ID of the vehicle.
    """

    latitude: typing.Optional[float] = pydantic.Field(default=None)
    """
    Latitude in decimal degrees.
    """

    location: typing.Optional[str] = pydantic.Field(default=None)
    """
    Text representation of nearest identifiable location to (latitude, longitude) coordinates.
    """

    longitude: typing.Optional[float] = pydantic.Field(default=None)
    """
    Longitude in decimal degrees.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the vehicle.
    """

    odometer_meters: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="odometerMeters")] = (
        pydantic.Field(default=None)
    )
    """
    The number of meters reported by the odometer.
    """

    odometer_type: typing_extensions.Annotated[
        typing.Optional[V1VehicleLocationOdometerType], FieldMetadata(alias="odometerType")
    ] = pydantic.Field(default=None)
    """
    The source of data for odometerMeters. Will be either GPS or OBD
    """

    on_trip: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="onTrip")] = pydantic.Field(
        default=None
    )
    """
    Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.
    """

    route_ids: typing_extensions.Annotated[typing.Optional[typing.List[int]], FieldMetadata(alias="routeIds")] = (
        pydantic.Field(default=None)
    )
    """
    A list of currently active route IDs that the vehicle is in.
    """

    speed: typing.Optional[float] = pydantic.Field(default=None)
    """
    Speed in miles per hour.
    """

    time: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
    """

    vin: typing.Optional[str] = pydantic.Field(default=None)
    """
    Vehicle Identification Number (VIN) of the vehicle.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
