# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .location_data_point_gps_location_place import LocationDataPointGpsLocationPlace
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class LocationDataPointGpsLocation(UniversalBaseModel):
    """
    GPS location information of the data input's datapoint.
    """

    formatted_address: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="formattedAddress")] = (
        pydantic.Field(default=None)
    )
    """
    Formatted address of the location
    """

    gps_meters_per_second: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="gpsMetersPerSecond")
    ] = pydantic.Field(default=None)
    """
    Speed of GPS (meters per second)
    """

    heading_degrees: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="headingDegrees")] = (
        pydantic.Field(default=None)
    )
    """
    Heading degrees
    """

    latitude: typing.Optional[float] = pydantic.Field(default=None)
    """
    Latitude of the location
    """

    longitude: typing.Optional[float] = pydantic.Field(default=None)
    """
    Longitude of the location
    """

    place: typing.Optional[LocationDataPointGpsLocationPlace] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
