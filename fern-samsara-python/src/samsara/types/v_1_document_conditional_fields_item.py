# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DocumentConditionalFieldsItem(UniversalBaseModel):
    conditional_field_index_first: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="conditionalFieldIndexFirst")
    ] = pydantic.Field(default=None)
    """
    Start index of the conditional fields set
    """

    conditional_field_index_last: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="conditionalFieldIndexLast")
    ] = pydantic.Field(default=None)
    """
    End index of the conditional fields set
    """

    triggering_field_index: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="triggeringFieldIndex")
    ] = pydantic.Field(default=None)
    """
    Index of the multiple choice field that triggers the conditional fields
    """

    triggering_field_value: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="triggeringFieldValue")
    ] = pydantic.Field(default=None)
    """
    Multiple choice value that triggers the conditional fields
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
