"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .vehicleexternalids import VehicleExternalIds, VehicleExternalIdsTypedDict
from .vehiclestatsambientairtempmillic import (
    VehicleStatsAmbientAirTempMilliC,
    VehicleStatsAmbientAirTempMilliCTypedDict,
)
from .vehiclestatsauxinput import VehicleStatsAuxInput, VehicleStatsAuxInputTypedDict
from .vehiclestatsbarometricpressurepa import (
    VehicleStatsBarometricPressurePa,
    VehicleStatsBarometricPressurePaTypedDict,
)
from .vehiclestatsbatteryvoltage import (
    VehicleStatsBatteryVoltage,
    VehicleStatsBatteryVoltageTypedDict,
)
from .vehiclestatsdeflevelmillipercent import (
    VehicleStatsDefLevelMilliPercent,
    VehicleStatsDefLevelMilliPercentTypedDict,
)
from .vehiclestatsecuspeedmph import (
    VehicleStatsEcuSpeedMph,
    VehicleStatsEcuSpeedMphTypedDict,
)
from .vehiclestatsenginecoolanttempmillic import (
    VehicleStatsEngineCoolantTempMilliC,
    VehicleStatsEngineCoolantTempMilliCTypedDict,
)
from .vehiclestatsengineimmobilizer import (
    VehicleStatsEngineImmobilizer,
    VehicleStatsEngineImmobilizerTypedDict,
)
from .vehiclestatsengineloadpercent import (
    VehicleStatsEngineLoadPercent,
    VehicleStatsEngineLoadPercentTypedDict,
)
from .vehiclestatsengineoilpressurekpa import (
    VehicleStatsEngineOilPressureKPa,
    VehicleStatsEngineOilPressureKPaTypedDict,
)
from .vehiclestatsenginerpm import VehicleStatsEngineRpm, VehicleStatsEngineRpmTypedDict
from .vehiclestatsenginestate import (
    VehicleStatsEngineState,
    VehicleStatsEngineStateTypedDict,
)
from .vehiclestatsfaultcodes import (
    VehicleStatsFaultCodes,
    VehicleStatsFaultCodesTypedDict,
)
from .vehiclestatsfuelpercent import (
    VehicleStatsFuelPercent,
    VehicleStatsFuelPercentTypedDict,
)
from .vehiclestatsgps import VehicleStatsGps, VehicleStatsGpsTypedDict
from .vehiclestatsgpsdistancemeters import (
    VehicleStatsGpsDistanceMeters,
    VehicleStatsGpsDistanceMetersTypedDict,
)
from .vehiclestatsgpsodometermeters import (
    VehicleStatsGpsOdometerMeters,
    VehicleStatsGpsOdometerMetersTypedDict,
)
from .vehiclestatsintakemanifoldtempmillic import (
    VehicleStatsIntakeManifoldTempMilliC,
    VehicleStatsIntakeManifoldTempMilliCTypedDict,
)
from .vehiclestatsnfccardscan import (
    VehicleStatsNfcCardScan,
    VehicleStatsNfcCardScanTypedDict,
)
from .vehiclestatsobdengineseconds import (
    VehicleStatsObdEngineSeconds,
    VehicleStatsObdEngineSecondsTypedDict,
)
from .vehiclestatsobdodometermeters import (
    VehicleStatsObdOdometerMeters,
    VehicleStatsObdOdometerMetersTypedDict,
)
from .vehiclestatsresponse_evaveragebatterytemperaturemillicelsius import (
    VehicleStatsResponseEvAverageBatteryTemperatureMilliCelsius,
    VehicleStatsResponseEvAverageBatteryTemperatureMilliCelsiusTypedDict,
)
from .vehiclestatsresponse_evbatterycurrentmilliamp import (
    VehicleStatsResponseEvBatteryCurrentMilliAmp,
    VehicleStatsResponseEvBatteryCurrentMilliAmpTypedDict,
)
from .vehiclestatsresponse_evbatterystateofhealthmillipercent import (
    VehicleStatsResponseEvBatteryStateOfHealthMilliPercent,
    VehicleStatsResponseEvBatteryStateOfHealthMilliPercentTypedDict,
)
from .vehiclestatsresponse_evbatteryvoltagemillivolt import (
    VehicleStatsResponseEvBatteryVoltageMilliVolt,
    VehicleStatsResponseEvBatteryVoltageMilliVoltTypedDict,
)
from .vehiclestatsresponse_evchargingcurrentmilliamp import (
    VehicleStatsResponseEvChargingCurrentMilliAmp,
    VehicleStatsResponseEvChargingCurrentMilliAmpTypedDict,
)
from .vehiclestatsresponse_evchargingenergymicrowh import (
    VehicleStatsResponseEvChargingEnergyMicroWh,
    VehicleStatsResponseEvChargingEnergyMicroWhTypedDict,
)
from .vehiclestatsresponse_evchargingstatus import (
    VehicleStatsResponseEvChargingStatus,
    VehicleStatsResponseEvChargingStatusTypedDict,
)
from .vehiclestatsresponse_evchargingvoltagemillivolt import (
    VehicleStatsResponseEvChargingVoltageMilliVolt,
    VehicleStatsResponseEvChargingVoltageMilliVoltTypedDict,
)
from .vehiclestatsresponse_evconsumedenergymicrowh import (
    VehicleStatsResponseEvConsumedEnergyMicroWh,
    VehicleStatsResponseEvConsumedEnergyMicroWhTypedDict,
)
from .vehiclestatsresponse_evdistancedrivenmeters import (
    VehicleStatsResponseEvDistanceDrivenMeters,
    VehicleStatsResponseEvDistanceDrivenMetersTypedDict,
)
from .vehiclestatsresponse_evregeneratedenergymicrowh import (
    VehicleStatsResponseEvRegeneratedEnergyMicroWh,
    VehicleStatsResponseEvRegeneratedEnergyMicroWhTypedDict,
)
from .vehiclestatsresponse_evstateofchargemillipercent import (
    VehicleStatsResponseEvStateOfChargeMilliPercent,
    VehicleStatsResponseEvStateOfChargeMilliPercentTypedDict,
)
from .vehiclestatsresponse_seatbeltdriver import (
    VehicleStatsResponseSeatbeltDriver,
    VehicleStatsResponseSeatbeltDriverTypedDict,
)
from .vehiclestatsresponse_spreaderactive import (
    VehicleStatsResponseSpreaderActive,
    VehicleStatsResponseSpreaderActiveTypedDict,
)
from .vehiclestatsresponse_spreaderairtemp import (
    VehicleStatsResponseSpreaderAirTemp,
    VehicleStatsResponseSpreaderAirTempTypedDict,
)
from .vehiclestatsresponse_spreaderblaststate import (
    VehicleStatsResponseSpreaderBlastState,
    VehicleStatsResponseSpreaderBlastStateTypedDict,
)
from .vehiclestatsresponse_spreadergranularname import (
    VehicleStatsResponseSpreaderGranularName,
    VehicleStatsResponseSpreaderGranularNameTypedDict,
)
from .vehiclestatsresponse_spreadergranularrate import (
    VehicleStatsResponseSpreaderGranularRate,
    VehicleStatsResponseSpreaderGranularRateTypedDict,
)
from .vehiclestatsresponse_spreaderliquidname import (
    VehicleStatsResponseSpreaderLiquidName,
    VehicleStatsResponseSpreaderLiquidNameTypedDict,
)
from .vehiclestatsresponse_spreaderliquidrate import (
    VehicleStatsResponseSpreaderLiquidRate,
    VehicleStatsResponseSpreaderLiquidRateTypedDict,
)
from .vehiclestatsresponse_spreaderonstate import (
    VehicleStatsResponseSpreaderOnState,
    VehicleStatsResponseSpreaderOnStateTypedDict,
)
from .vehiclestatsresponse_spreaderplowstatus import (
    VehicleStatsResponseSpreaderPlowStatus,
    VehicleStatsResponseSpreaderPlowStatusTypedDict,
)
from .vehiclestatsresponse_spreaderprewetname import (
    VehicleStatsResponseSpreaderPrewetName,
    VehicleStatsResponseSpreaderPrewetNameTypedDict,
)
from .vehiclestatsresponse_spreaderprewetrate import (
    VehicleStatsResponseSpreaderPrewetRate,
    VehicleStatsResponseSpreaderPrewetRateTypedDict,
)
from .vehiclestatsresponse_spreaderroadtemp import (
    VehicleStatsResponseSpreaderRoadTemp,
    VehicleStatsResponseSpreaderRoadTempTypedDict,
)
from .vehiclestatssyntheticengineseconds import (
    VehicleStatsSyntheticEngineSeconds,
    VehicleStatsSyntheticEngineSecondsTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class VehicleStatsResponseDataTypedDict(TypedDict):
    r"""A vehicle and its most recent stat."""

    id: str
    r"""The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed."""
    name: str
    r"""The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsaraâ€™s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time."""
    ambient_air_temperature_milli_c: NotRequired[
        VehicleStatsAmbientAirTempMilliCTypedDict
    ]
    r"""Vehicle ambient air temperature reading."""
    aux_input1: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input10: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input11: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input12: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input13: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input2: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input3: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input4: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input5: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input6: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input7: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input8: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    aux_input9: NotRequired[VehicleStatsAuxInputTypedDict]
    r"""Data for auxiliary digio equipment."""
    barometric_pressure_pa: NotRequired[VehicleStatsBarometricPressurePaTypedDict]
    r"""Vehicle barometric pressure reading."""
    battery_milli_volts: NotRequired[VehicleStatsBatteryVoltageTypedDict]
    r"""Vehicle battery voltage reading."""
    def_level_milli_percent: NotRequired[VehicleStatsDefLevelMilliPercentTypedDict]
    r"""The Diesel Exhaust Fluid (DEF) milli percentage reading."""
    ecu_speed_mph: NotRequired[VehicleStatsEcuSpeedMphTypedDict]
    r"""The speed of the vehicle in miles per hour, as reported by the ECU."""
    engine_coolant_temperature_milli_c: NotRequired[
        VehicleStatsEngineCoolantTempMilliCTypedDict
    ]
    r"""Vehicle engine coolant temperature reading."""
    engine_immobilizer: NotRequired[VehicleStatsEngineImmobilizerTypedDict]
    r"""Data for the engine immobilizer"""
    engine_load_percent: NotRequired[VehicleStatsEngineLoadPercentTypedDict]
    r"""The engine load percentage reading."""
    engine_oil_pressure_k_pa: NotRequired[VehicleStatsEngineOilPressureKPaTypedDict]
    r"""Vehicle engine oil pressure reading."""
    engine_rpm: NotRequired[VehicleStatsEngineRpmTypedDict]
    r"""Vehicle engine RPM reading."""
    engine_state: NotRequired[VehicleStatsEngineStateTypedDict]
    r"""Vehicle engine state event."""
    ev_average_battery_temperature_milli_celsius: NotRequired[
        VehicleStatsResponseEvAverageBatteryTemperatureMilliCelsiusTypedDict
    ]
    r"""Battery temperature for electric and hybrid vehicles in milli celsius. Not all EV and HEVs may report this field."""
    ev_battery_current_milli_amp: NotRequired[
        VehicleStatsResponseEvBatteryCurrentMilliAmpTypedDict
    ]
    r"""Battery current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""
    ev_battery_state_of_health_milli_percent: NotRequired[
        VehicleStatsResponseEvBatteryStateOfHealthMilliPercentTypedDict
    ]
    r"""Milli percent battery state of health for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    ev_battery_voltage_milli_volt: NotRequired[
        VehicleStatsResponseEvBatteryVoltageMilliVoltTypedDict
    ]
    r"""Battery voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""
    ev_charging_current_milli_amp: NotRequired[
        VehicleStatsResponseEvChargingCurrentMilliAmpTypedDict
    ]
    r"""Charging current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""
    ev_charging_energy_micro_wh: NotRequired[
        VehicleStatsResponseEvChargingEnergyMicroWhTypedDict
    ]
    r"""Charging energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_charging_status: NotRequired[VehicleStatsResponseEvChargingStatusTypedDict]
    r"""Charging status for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    ev_charging_voltage_milli_volt: NotRequired[
        VehicleStatsResponseEvChargingVoltageMilliVoltTypedDict
    ]
    r"""Charging voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""
    ev_consumed_energy_micro_wh: NotRequired[
        VehicleStatsResponseEvConsumedEnergyMicroWhTypedDict
    ]
    r"""Consumed energy (including regenerated) for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_distance_driven_meters: NotRequired[
        VehicleStatsResponseEvDistanceDrivenMetersTypedDict
    ]
    r"""Electric distance driven for electric and hybrid vehicles in meters. Not all EV and HEVs may report this field."""
    ev_regenerated_energy_micro_wh: NotRequired[
        VehicleStatsResponseEvRegeneratedEnergyMicroWhTypedDict
    ]
    r"""Regenerated energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""
    ev_state_of_charge_milli_percent: NotRequired[
        VehicleStatsResponseEvStateOfChargeMilliPercentTypedDict
    ]
    r"""State of Charge for electric and hybrid vehicles. Not all EV and HEVs may report this field."""
    external_ids: NotRequired[VehicleExternalIdsTypedDict]
    r"""The <a href=\"/docs/external-ids\" target=\"_blank\">external IDs</a> for the given object."""
    fault_codes: NotRequired[VehicleStatsFaultCodesTypedDict]
    r"""Engine fault codes read from J1939, OBDII, and OEM vehicles."""
    fuel_percent: NotRequired[VehicleStatsFuelPercentTypedDict]
    r"""Vehicle fuel percentage reading."""
    gps: NotRequired[VehicleStatsGpsTypedDict]
    r"""GPS location data for the vehicle."""
    gps_distance_meters: NotRequired[VehicleStatsGpsDistanceMetersTypedDict]
    r"""Vehicle GPS distance event."""
    gps_odometer_meters: NotRequired[VehicleStatsGpsOdometerMetersTypedDict]
    r"""Vehicle GPS odometer event."""
    intake_manifold_temperature_milli_c: NotRequired[
        VehicleStatsIntakeManifoldTempMilliCTypedDict
    ]
    r"""Vehicle intake manifold temperature reading."""
    nfc_card_scan: NotRequired[VehicleStatsNfcCardScanTypedDict]
    r"""Data for the nfc card and the time that it was scanned."""
    obd_engine_seconds: NotRequired[VehicleStatsObdEngineSecondsTypedDict]
    r"""Vehicle OBD engine seconds reading."""
    obd_odometer_meters: NotRequired[VehicleStatsObdOdometerMetersTypedDict]
    r"""Vehicle OBD odometer reading."""
    seatbelt_driver: NotRequired[VehicleStatsResponseSeatbeltDriverTypedDict]
    r"""Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""
    spreader_active: NotRequired[VehicleStatsResponseSpreaderActiveTypedDict]
    r"""Whether vehicle is actively spreading any material."""
    spreader_air_temp: NotRequired[VehicleStatsResponseSpreaderAirTempTypedDict]
    r"""Air (ambient) temperature in milli celsius reading from material spreader."""
    spreader_blast_state: NotRequired[VehicleStatsResponseSpreaderBlastStateTypedDict]
    r"""Whether vehicle is actively spreading material in â€˜blast modeâ€™."""
    spreader_granular_name: NotRequired[
        VehicleStatsResponseSpreaderGranularNameTypedDict
    ]
    r"""Name of most recent type of granular material spread, read from the material spreader."""
    spreader_granular_rate: NotRequired[
        VehicleStatsResponseSpreaderGranularRateTypedDict
    ]
    r"""Granular spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_liquid_name: NotRequired[VehicleStatsResponseSpreaderLiquidNameTypedDict]
    r"""Name of most recent type of liquid material spread, read from the material spreader."""
    spreader_liquid_rate: NotRequired[VehicleStatsResponseSpreaderLiquidRateTypedDict]
    r"""Liquid spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_on_state: NotRequired[VehicleStatsResponseSpreaderOnStateTypedDict]
    r"""Whether vehicle spreader is enabled."""
    spreader_plow_status: NotRequired[VehicleStatsResponseSpreaderPlowStatusTypedDict]
    r"""Snow plow status (`Up` or `Down`), as read from the material spreader. Note: this is separate from plow status defined via auxInput."""
    spreader_prewet_name: NotRequired[VehicleStatsResponseSpreaderPrewetNameTypedDict]
    r"""Name of most recent type of prewet material spread, read from the material spreader."""
    spreader_prewet_rate: NotRequired[VehicleStatsResponseSpreaderPrewetRateTypedDict]
    r"""Prewet spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""
    spreader_road_temp: NotRequired[VehicleStatsResponseSpreaderRoadTempTypedDict]
    r"""Road temperature reading in milli celsius from material spreader."""
    synthetic_engine_seconds: NotRequired[VehicleStatsSyntheticEngineSecondsTypedDict]
    r"""Data for the synthetic engine seconds for the vehicle"""


class VehicleStatsResponseData(BaseModel):
    r"""A vehicle and its most recent stat."""

    id: str
    r"""The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed."""

    name: str
    r"""The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsaraâ€™s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time."""

    ambient_air_temperature_milli_c: Annotated[
        Optional[VehicleStatsAmbientAirTempMilliC],
        pydantic.Field(alias="ambientAirTemperatureMilliC"),
    ] = None
    r"""Vehicle ambient air temperature reading."""

    aux_input1: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput1")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input10: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput10")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input11: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput11")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input12: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput12")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input13: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput13")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input2: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput2")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input3: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput3")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input4: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput4")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input5: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput5")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input6: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput6")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input7: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput7")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input8: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput8")
    ] = None
    r"""Data for auxiliary digio equipment."""

    aux_input9: Annotated[
        Optional[VehicleStatsAuxInput], pydantic.Field(alias="auxInput9")
    ] = None
    r"""Data for auxiliary digio equipment."""

    barometric_pressure_pa: Annotated[
        Optional[VehicleStatsBarometricPressurePa],
        pydantic.Field(alias="barometricPressurePa"),
    ] = None
    r"""Vehicle barometric pressure reading."""

    battery_milli_volts: Annotated[
        Optional[VehicleStatsBatteryVoltage], pydantic.Field(alias="batteryMilliVolts")
    ] = None
    r"""Vehicle battery voltage reading."""

    def_level_milli_percent: Annotated[
        Optional[VehicleStatsDefLevelMilliPercent],
        pydantic.Field(alias="defLevelMilliPercent"),
    ] = None
    r"""The Diesel Exhaust Fluid (DEF) milli percentage reading."""

    ecu_speed_mph: Annotated[
        Optional[VehicleStatsEcuSpeedMph], pydantic.Field(alias="ecuSpeedMph")
    ] = None
    r"""The speed of the vehicle in miles per hour, as reported by the ECU."""

    engine_coolant_temperature_milli_c: Annotated[
        Optional[VehicleStatsEngineCoolantTempMilliC],
        pydantic.Field(alias="engineCoolantTemperatureMilliC"),
    ] = None
    r"""Vehicle engine coolant temperature reading."""

    engine_immobilizer: Annotated[
        Optional[VehicleStatsEngineImmobilizer],
        pydantic.Field(alias="engineImmobilizer"),
    ] = None
    r"""Data for the engine immobilizer"""

    engine_load_percent: Annotated[
        Optional[VehicleStatsEngineLoadPercent],
        pydantic.Field(alias="engineLoadPercent"),
    ] = None
    r"""The engine load percentage reading."""

    engine_oil_pressure_k_pa: Annotated[
        Optional[VehicleStatsEngineOilPressureKPa],
        pydantic.Field(alias="engineOilPressureKPa"),
    ] = None
    r"""Vehicle engine oil pressure reading."""

    engine_rpm: Annotated[
        Optional[VehicleStatsEngineRpm], pydantic.Field(alias="engineRpm")
    ] = None
    r"""Vehicle engine RPM reading."""

    engine_state: Annotated[
        Optional[VehicleStatsEngineState], pydantic.Field(alias="engineState")
    ] = None
    r"""Vehicle engine state event."""

    ev_average_battery_temperature_milli_celsius: Annotated[
        Optional[VehicleStatsResponseEvAverageBatteryTemperatureMilliCelsius],
        pydantic.Field(alias="evAverageBatteryTemperatureMilliCelsius"),
    ] = None
    r"""Battery temperature for electric and hybrid vehicles in milli celsius. Not all EV and HEVs may report this field."""

    ev_battery_current_milli_amp: Annotated[
        Optional[VehicleStatsResponseEvBatteryCurrentMilliAmp],
        pydantic.Field(alias="evBatteryCurrentMilliAmp"),
    ] = None
    r"""Battery current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""

    ev_battery_state_of_health_milli_percent: Annotated[
        Optional[VehicleStatsResponseEvBatteryStateOfHealthMilliPercent],
        pydantic.Field(alias="evBatteryStateOfHealthMilliPercent"),
    ] = None
    r"""Milli percent battery state of health for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    ev_battery_voltage_milli_volt: Annotated[
        Optional[VehicleStatsResponseEvBatteryVoltageMilliVolt],
        pydantic.Field(alias="evBatteryVoltageMilliVolt"),
    ] = None
    r"""Battery voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""

    ev_charging_current_milli_amp: Annotated[
        Optional[VehicleStatsResponseEvChargingCurrentMilliAmp],
        pydantic.Field(alias="evChargingCurrentMilliAmp"),
    ] = None
    r"""Charging current for electric and hybrid vehicles in milli amps. Not all EV and HEVs may report this field."""

    ev_charging_energy_micro_wh: Annotated[
        Optional[VehicleStatsResponseEvChargingEnergyMicroWh],
        pydantic.Field(alias="evChargingEnergyMicroWh"),
    ] = None
    r"""Charging energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_charging_status: Annotated[
        Optional[VehicleStatsResponseEvChargingStatus],
        pydantic.Field(alias="evChargingStatus"),
    ] = None
    r"""Charging status for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    ev_charging_voltage_milli_volt: Annotated[
        Optional[VehicleStatsResponseEvChargingVoltageMilliVolt],
        pydantic.Field(alias="evChargingVoltageMilliVolt"),
    ] = None
    r"""Charging voltage for electric and hybrid vehicles in milli volts. Not all EV and HEVs may report this field."""

    ev_consumed_energy_micro_wh: Annotated[
        Optional[VehicleStatsResponseEvConsumedEnergyMicroWh],
        pydantic.Field(alias="evConsumedEnergyMicroWh"),
    ] = None
    r"""Consumed energy (including regenerated) for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_distance_driven_meters: Annotated[
        Optional[VehicleStatsResponseEvDistanceDrivenMeters],
        pydantic.Field(alias="evDistanceDrivenMeters"),
    ] = None
    r"""Electric distance driven for electric and hybrid vehicles in meters. Not all EV and HEVs may report this field."""

    ev_regenerated_energy_micro_wh: Annotated[
        Optional[VehicleStatsResponseEvRegeneratedEnergyMicroWh],
        pydantic.Field(alias="evRegeneratedEnergyMicroWh"),
    ] = None
    r"""Regenerated energy for electric and hybrid vehicles in microwatt hours. Not all EV and HEVs may report this field."""

    ev_state_of_charge_milli_percent: Annotated[
        Optional[VehicleStatsResponseEvStateOfChargeMilliPercent],
        pydantic.Field(alias="evStateOfChargeMilliPercent"),
    ] = None
    r"""State of Charge for electric and hybrid vehicles. Not all EV and HEVs may report this field."""

    external_ids: Annotated[
        Optional[VehicleExternalIds], pydantic.Field(alias="externalIds")
    ] = None
    r"""The <a href=\"/docs/external-ids\" target=\"_blank\">external IDs</a> for the given object."""

    fault_codes: Annotated[
        Optional[VehicleStatsFaultCodes], pydantic.Field(alias="faultCodes")
    ] = None
    r"""Engine fault codes read from J1939, OBDII, and OEM vehicles."""

    fuel_percent: Annotated[
        Optional[VehicleStatsFuelPercent], pydantic.Field(alias="fuelPercent")
    ] = None
    r"""Vehicle fuel percentage reading."""

    gps: Optional[VehicleStatsGps] = None
    r"""GPS location data for the vehicle."""

    gps_distance_meters: Annotated[
        Optional[VehicleStatsGpsDistanceMeters],
        pydantic.Field(alias="gpsDistanceMeters"),
    ] = None
    r"""Vehicle GPS distance event."""

    gps_odometer_meters: Annotated[
        Optional[VehicleStatsGpsOdometerMeters],
        pydantic.Field(alias="gpsOdometerMeters"),
    ] = None
    r"""Vehicle GPS odometer event."""

    intake_manifold_temperature_milli_c: Annotated[
        Optional[VehicleStatsIntakeManifoldTempMilliC],
        pydantic.Field(alias="intakeManifoldTemperatureMilliC"),
    ] = None
    r"""Vehicle intake manifold temperature reading."""

    nfc_card_scan: Annotated[
        Optional[VehicleStatsNfcCardScan], pydantic.Field(alias="nfcCardScan")
    ] = None
    r"""Data for the nfc card and the time that it was scanned."""

    obd_engine_seconds: Annotated[
        Optional[VehicleStatsObdEngineSeconds], pydantic.Field(alias="obdEngineSeconds")
    ] = None
    r"""Vehicle OBD engine seconds reading."""

    obd_odometer_meters: Annotated[
        Optional[VehicleStatsObdOdometerMeters],
        pydantic.Field(alias="obdOdometerMeters"),
    ] = None
    r"""Vehicle OBD odometer reading."""

    seatbelt_driver: Annotated[
        Optional[VehicleStatsResponseSeatbeltDriver],
        pydantic.Field(alias="seatbeltDriver"),
    ] = None
    r"""Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Annotated[
        Optional[VehicleStatsResponseSpreaderActive],
        pydantic.Field(alias="spreaderActive"),
    ] = None
    r"""Whether vehicle is actively spreading any material."""

    spreader_air_temp: Annotated[
        Optional[VehicleStatsResponseSpreaderAirTemp],
        pydantic.Field(alias="spreaderAirTemp"),
    ] = None
    r"""Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Annotated[
        Optional[VehicleStatsResponseSpreaderBlastState],
        pydantic.Field(alias="spreaderBlastState"),
    ] = None
    r"""Whether vehicle is actively spreading material in â€˜blast modeâ€™."""

    spreader_granular_name: Annotated[
        Optional[VehicleStatsResponseSpreaderGranularName],
        pydantic.Field(alias="spreaderGranularName"),
    ] = None
    r"""Name of most recent type of granular material spread, read from the material spreader."""

    spreader_granular_rate: Annotated[
        Optional[VehicleStatsResponseSpreaderGranularRate],
        pydantic.Field(alias="spreaderGranularRate"),
    ] = None
    r"""Granular spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_liquid_name: Annotated[
        Optional[VehicleStatsResponseSpreaderLiquidName],
        pydantic.Field(alias="spreaderLiquidName"),
    ] = None
    r"""Name of most recent type of liquid material spread, read from the material spreader."""

    spreader_liquid_rate: Annotated[
        Optional[VehicleStatsResponseSpreaderLiquidRate],
        pydantic.Field(alias="spreaderLiquidRate"),
    ] = None
    r"""Liquid spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_on_state: Annotated[
        Optional[VehicleStatsResponseSpreaderOnState],
        pydantic.Field(alias="spreaderOnState"),
    ] = None
    r"""Whether vehicle spreader is enabled."""

    spreader_plow_status: Annotated[
        Optional[VehicleStatsResponseSpreaderPlowStatus],
        pydantic.Field(alias="spreaderPlowStatus"),
    ] = None
    r"""Snow plow status (`Up` or `Down`), as read from the material spreader. Note: this is separate from plow status defined via auxInput."""

    spreader_prewet_name: Annotated[
        Optional[VehicleStatsResponseSpreaderPrewetName],
        pydantic.Field(alias="spreaderPrewetName"),
    ] = None
    r"""Name of most recent type of prewet material spread, read from the material spreader."""

    spreader_prewet_rate: Annotated[
        Optional[VehicleStatsResponseSpreaderPrewetRate],
        pydantic.Field(alias="spreaderPrewetRate"),
    ] = None
    r"""Prewet spread rate reading in milliliters per meter, read from the material spreader. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance. Unfiltered live stats are supplied as-read from the Material Spreader unit. Readings do not consider total spread rate(s) over time or distance."""

    spreader_road_temp: Annotated[
        Optional[VehicleStatsResponseSpreaderRoadTemp],
        pydantic.Field(alias="spreaderRoadTemp"),
    ] = None
    r"""Road temperature reading in milli celsius from material spreader."""

    synthetic_engine_seconds: Annotated[
        Optional[VehicleStatsSyntheticEngineSeconds],
        pydantic.Field(alias="syntheticEngineSeconds"),
    ] = None
    r"""Data for the synthetic engine seconds for the vehicle"""
