"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .defect_resolvedby import DefectResolvedBy, DefectResolvedByTypedDict
import pydantic
from samsara.types import BaseModel
from typing import Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TrailerTypedDict(TypedDict):
    r"""A minified trailer object."""

    id: NotRequired[str]
    r"""ID of the trailer."""
    name: NotRequired[str]
    r"""Name of the trailer."""


class Trailer(BaseModel):
    r"""A minified trailer object."""

    id: Optional[str] = None
    r"""ID of the trailer."""

    name: Optional[str] = None
    r"""Name of the trailer."""


class DefectVehicleTypedDict(TypedDict):
    r"""A minified vehicle object."""

    external_ids: NotRequired[Dict[str, str]]
    r"""The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object."""
    id: NotRequired[str]
    r"""ID of the vehicle."""
    name: NotRequired[str]
    r"""Name of the vehicle."""


class DefectVehicle(BaseModel):
    r"""A minified vehicle object."""

    external_ids: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="ExternalIds")
    ] = None
    r"""The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object."""

    id: Optional[str] = None
    r"""ID of the vehicle."""

    name: Optional[str] = None
    r"""Name of the vehicle."""


class DefectTypedDict(TypedDict):
    id: str
    r"""ID of the defect."""
    is_resolved: bool
    r"""Signifies if this defect is resolved."""
    comment: NotRequired[str]
    r"""Comment on the defect."""
    created_at_time: NotRequired[str]
    r"""Time when the defect was created. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""
    defect_type: NotRequired[str]
    r"""The type of DVIR defect."""
    mechanic_notes: NotRequired[str]
    r"""The mechanics notes on the defect."""
    mechanic_notes_updated_at_time: NotRequired[str]
    r"""Time when mechanic notes were last updated. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""
    resolved_at_time: NotRequired[str]
    r"""Time when this defect was resolved. Will not be returned if the defect is unresolved. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""
    resolved_by: NotRequired[DefectResolvedByTypedDict]
    r"""The person who resolved this defect.  Will not be returned if the defect is unresolved."""
    trailer: NotRequired[TrailerTypedDict]
    vehicle: NotRequired[DefectVehicleTypedDict]


class Defect(BaseModel):
    id: str
    r"""ID of the defect."""

    is_resolved: Annotated[bool, pydantic.Field(alias="isResolved")]
    r"""Signifies if this defect is resolved."""

    comment: Optional[str] = None
    r"""Comment on the defect."""

    created_at_time: Annotated[Optional[str], pydantic.Field(alias="createdAtTime")] = (
        None
    )
    r"""Time when the defect was created. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    defect_type: Annotated[Optional[str], pydantic.Field(alias="defectType")] = None
    r"""The type of DVIR defect."""

    mechanic_notes: Annotated[Optional[str], pydantic.Field(alias="mechanicNotes")] = (
        None
    )
    r"""The mechanics notes on the defect."""

    mechanic_notes_updated_at_time: Annotated[
        Optional[str], pydantic.Field(alias="mechanicNotesUpdatedAtTime")
    ] = None
    r"""Time when mechanic notes were last updated. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    resolved_at_time: Annotated[
        Optional[str], pydantic.Field(alias="resolvedAtTime")
    ] = None
    r"""Time when this defect was resolved. Will not be returned if the defect is unresolved. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    resolved_by: Annotated[
        Optional[DefectResolvedBy], pydantic.Field(alias="resolvedBy")
    ] = None
    r"""The person who resolved this defect.  Will not be returned if the defect is unresolved."""

    trailer: Optional[Trailer] = None

    vehicle: Optional[DefectVehicle] = None
