"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .iftagetiftajurisdictionreportsbadrequesterrorresponsebody import (
    IFTAGetIFTAJurisdictionReportsBadRequestErrorResponseBody,
    IFTAGetIFTAJurisdictionReportsBadRequestErrorResponseBodyTypedDict,
)
from .iftagetiftajurisdictionreportsresponsebody import (
    IFTAGetIFTAJurisdictionReportsResponseBody,
    IFTAGetIFTAJurisdictionReportsResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class Month(str, Enum):
    r"""The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: `month=January`  Valid values: `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November`, `December`"""

    JANUARY = "January"
    FEBRUARY = "February"
    MARCH = "March"
    APRIL = "April"
    MAY = "May"
    JUNE = "June"
    JULY = "July"
    AUGUST = "August"
    SEPTEMBER = "September"
    OCTOBER = "October"
    NOVEMBER = "November"
    DECEMBER = "December"


class Quarter(str, Enum):
    r"""The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: `quarter=Q1`  Valid values: `Q1`, `Q2`, `Q3`, `Q4`"""

    Q1 = "Q1"
    Q2 = "Q2"
    Q3 = "Q3"
    Q4 = "Q4"


class FuelType(str, Enum):
    r"""A filter on the data based on this comma-separated list of IFTA fuel types. Example: `fuelType=Diesel`  Valid values: `Unspecified`, `A55`, `Biodiesel`, `CompressedNaturalGas`, `Diesel`, `E85`, `Electricity`, `Ethanol`, `Gasohol`, `Gasoline`, `Hydrogen`, `LiquifiedNaturalGas`, `M85`, `Methanol`, `Propane`, `Other`"""

    UNSPECIFIED = "Unspecified"
    A55 = "A55"
    BIODIESEL = "Biodiesel"
    COMPRESSED_NATURAL_GAS = "CompressedNaturalGas"
    DIESEL = "Diesel"
    E85 = "E85"
    ELECTRICITY = "Electricity"
    ETHANOL = "Ethanol"
    GASOHOL = "Gasohol"
    GASOLINE = "Gasoline"
    HYDROGEN = "Hydrogen"
    LIQUIFIED_NATURAL_GAS = "LiquifiedNaturalGas"
    M85 = "M85"
    METHANOL = "Methanol"
    PROPANE = "Propane"
    OTHER = "Other"


class GetIftaJurisdictionReportsRequestTypedDict(TypedDict):
    year: int
    r"""The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: `year=2021`"""
    month: NotRequired[Month]
    r"""The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: `month=January`  Valid values: `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November`, `December`"""
    quarter: NotRequired[Quarter]
    r"""The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: `quarter=Q1`  Valid values: `Q1`, `Q2`, `Q3`, `Q4`"""
    jurisdictions: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of jurisdictions. Example: `jurisdictions=GA`"""
    fuel_type: NotRequired[FuelType]
    r"""A filter on the data based on this comma-separated list of IFTA fuel types. Example: `fuelType=Diesel`  Valid values: `Unspecified`, `A55`, `Biodiesel`, `CompressedNaturalGas`, `Diesel`, `E85`, `Electricity`, `Ethanol`, `Gasohol`, `Gasoline`, `Hydrogen`, `LiquifiedNaturalGas`, `M85`, `Methanol`, `Propane`, `Other`"""
    vehicle_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`"""
    tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""
    parent_tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""


class GetIftaJurisdictionReportsRequest(BaseModel):
    year: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: `year=2021`"""

    month: Annotated[
        Optional[Month],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: `month=January`  Valid values: `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November`, `December`"""

    quarter: Annotated[
        Optional[Quarter],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: `quarter=Q1`  Valid values: `Q1`, `Q2`, `Q3`, `Q4`"""

    jurisdictions: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of jurisdictions. Example: `jurisdictions=GA`"""

    fuel_type: Annotated[
        Optional[FuelType],
        pydantic.Field(alias="fuelType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of IFTA fuel types. Example: `fuelType=Diesel`  Valid values: `Unspecified`, `A55`, `Biodiesel`, `CompressedNaturalGas`, `Diesel`, `E85`, `Electricity`, `Ethanol`, `Gasohol`, `Gasoline`, `Hydrogen`, `LiquifiedNaturalGas`, `M85`, `Methanol`, `Propane`, `Other`"""

    vehicle_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="vehicleIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`"""

    tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="tagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""

    parent_tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="parentTagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""


GetIftaJurisdictionReportsResponseTypedDict = TypeAliasType(
    "GetIftaJurisdictionReportsResponseTypedDict",
    Union[
        IFTAGetIFTAJurisdictionReportsResponseBodyTypedDict,
        IFTAGetIFTAJurisdictionReportsBadRequestErrorResponseBodyTypedDict,
    ],
)


GetIftaJurisdictionReportsResponse = TypeAliasType(
    "GetIftaJurisdictionReportsResponse",
    Union[
        IFTAGetIFTAJurisdictionReportsResponseBody,
        IFTAGetIFTAJurisdictionReportsBadRequestErrorResponseBody,
    ],
)
