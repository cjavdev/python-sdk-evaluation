"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jobsgetjobsbadrequesterrorresponsebody import (
    JobsGetJobsBadRequestErrorResponseBody,
    JobsGetJobsBadRequestErrorResponseBodyTypedDict,
)
from .jobsgetjobsresponsebody import (
    JobsGetJobsResponseBody,
    JobsGetJobsResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetJobsQueryParamStatus(str, Enum):
    r"""A job status in STRING format. Job statuses can be one of three (ignores case): `\"active\", \"scheduled\", \"completed\"`  Valid values: `active`, `scheduled`, `completed`"""

    ACTIVE = "active"
    SCHEDULED = "scheduled"
    COMPLETED = "completed"


class GetJobsRequestTypedDict(TypedDict):
    id: NotRequired[str]
    r"""A jobId or uuid in STRING format. JobId must be prefixed with `jobId:`(Examples: `\"8d218e6c-7a16-4f9f-90f7-cc1d93b9e596\"`, `\"jobId:98765\"`)."""
    start_date: NotRequired[str]
    r"""A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    end_date: NotRequired[str]
    r"""An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    industrial_asset_ids: NotRequired[List[str]]
    r"""IndustrialAssetId in STRING format. (Example: `\"8d218e6c-7a16-4f9f-90f7-cc1d93b9e596\"`)."""
    fleet_device_ids: NotRequired[List[int]]
    r"""FleetDeviceId in INTEGER format. (Example: `123456`)."""
    status: NotRequired[GetJobsQueryParamStatus]
    r"""A job status in STRING format. Job statuses can be one of three (ignores case): `\"active\", \"scheduled\", \"completed\"`  Valid values: `active`, `scheduled`, `completed`"""
    customer_name: NotRequired[str]
    r"""Customer name to filter by"""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""


class GetJobsRequest(BaseModel):
    id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A jobId or uuid in STRING format. JobId must be prefixed with `jobId:`(Examples: `\"8d218e6c-7a16-4f9f-90f7-cc1d93b9e596\"`, `\"jobId:98765\"`)."""

    start_date: Annotated[
        Optional[str],
        pydantic.Field(alias="startDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    end_date: Annotated[
        Optional[str],
        pydantic.Field(alias="endDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    industrial_asset_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="industrialAssetIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""IndustrialAssetId in STRING format. (Example: `\"8d218e6c-7a16-4f9f-90f7-cc1d93b9e596\"`)."""

    fleet_device_ids: Annotated[
        Optional[List[int]],
        pydantic.Field(alias="fleetDeviceIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""FleetDeviceId in INTEGER format. (Example: `123456`)."""

    status: Annotated[
        Optional[GetJobsQueryParamStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A job status in STRING format. Job statuses can be one of three (ignores case): `\"active\", \"scheduled\", \"completed\"`  Valid values: `active`, `scheduled`, `completed`"""

    customer_name: Annotated[
        Optional[str],
        pydantic.Field(alias="customerName"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Customer name to filter by"""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""


GetJobsResponseTypedDict = TypeAliasType(
    "GetJobsResponseTypedDict",
    Union[
        JobsGetJobsBadRequestErrorResponseBodyTypedDict,
        JobsGetJobsResponseBodyTypedDict,
    ],
)


GetJobsResponse = TypeAliasType(
    "GetJobsResponse",
    Union[JobsGetJobsBadRequestErrorResponseBody, JobsGetJobsResponseBody],
)
