"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dvirdefectsobject_v2022_09_13responsebody import (
    DvirDefectsObjectV20220913ResponseBody,
    DvirDefectsObjectV20220913ResponseBodyTypedDict,
)
from .goatrailertinyresponseresponsebody import (
    GoaTrailerTinyResponseResponseBody,
    GoaTrailerTinyResponseResponseBodyTypedDict,
)
from .workflowauthorsignatureobjectresponsebody import (
    WorkflowAuthorSignatureObjectResponseBody,
    WorkflowAuthorSignatureObjectResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SafetyStatus(str, Enum):
    r"""The condition of vehicle on which DVIR was done.  Valid values: `safe`, `unsafe`, `resolved`"""

    SAFE = "safe"
    UNSAFE = "unsafe"
    RESOLVED = "resolved"


class WorkflowDvirObjectResponseBodyType(str, Enum):
    r"""Inspection type of the DVIR.  Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`"""

    PRE_TRIP = "preTrip"
    POST_TRIP = "postTrip"
    MECHANIC = "mechanic"
    UNSPECIFIED = "unspecified"


class WorkflowDvirObjectResponseBodyTypedDict(TypedDict):
    r"""A DVIR description"""

    author_signature: WorkflowAuthorSignatureObjectResponseBodyTypedDict
    r"""An author signature for DVIRs with a signed time."""
    end_time: str
    r"""Time when the driver signed and completed this DVIR. UTC timestamp in RFC 3339 format."""
    id: str
    r"""The unique id of the DVIR"""
    needs_correction: bool
    r"""Indicates if a defect needs correction."""
    safety_status: SafetyStatus
    r"""The condition of vehicle on which DVIR was done.  Valid values: `safe`, `unsafe`, `resolved`"""
    start_time: str
    r"""Time when driver began filling out this DVIR in RFC 3339 format."""
    type: WorkflowDvirObjectResponseBodyType
    r"""Inspection type of the DVIR.  Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`"""
    defects: NotRequired[List[DvirDefectsObjectV20220913ResponseBodyTypedDict]]
    r"""Defects registered for the DVIR."""
    formatted_location: NotRequired[str]
    r"""Optional string if your jurisdiction requires a location of the DVIR."""
    mechanic_notes: NotRequired[str]
    r"""The mechanics notes on the DVIR."""
    odometer_meters: NotRequired[int]
    r"""The odometer reading in meters."""
    second_signature: NotRequired[WorkflowAuthorSignatureObjectResponseBodyTypedDict]
    r"""An author signature for DVIRs with a signed time."""
    third_signature: NotRequired[WorkflowAuthorSignatureObjectResponseBodyTypedDict]
    r"""An author signature for DVIRs with a signed time."""
    trailer: NotRequired[GoaTrailerTinyResponseResponseBodyTypedDict]
    r"""A minified trailer object"""


class WorkflowDvirObjectResponseBody(BaseModel):
    r"""A DVIR description"""

    author_signature: Annotated[
        WorkflowAuthorSignatureObjectResponseBody,
        pydantic.Field(alias="authorSignature"),
    ]
    r"""An author signature for DVIRs with a signed time."""

    end_time: Annotated[str, pydantic.Field(alias="endTime")]
    r"""Time when the driver signed and completed this DVIR. UTC timestamp in RFC 3339 format."""

    id: str
    r"""The unique id of the DVIR"""

    needs_correction: Annotated[bool, pydantic.Field(alias="needsCorrection")]
    r"""Indicates if a defect needs correction."""

    safety_status: Annotated[SafetyStatus, pydantic.Field(alias="safetyStatus")]
    r"""The condition of vehicle on which DVIR was done.  Valid values: `safe`, `unsafe`, `resolved`"""

    start_time: Annotated[str, pydantic.Field(alias="startTime")]
    r"""Time when driver began filling out this DVIR in RFC 3339 format."""

    type: WorkflowDvirObjectResponseBodyType
    r"""Inspection type of the DVIR.  Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`"""

    defects: Optional[List[DvirDefectsObjectV20220913ResponseBody]] = None
    r"""Defects registered for the DVIR."""

    formatted_location: Annotated[
        Optional[str], pydantic.Field(alias="formattedLocation")
    ] = None
    r"""Optional string if your jurisdiction requires a location of the DVIR."""

    mechanic_notes: Annotated[Optional[str], pydantic.Field(alias="mechanicNotes")] = (
        None
    )
    r"""The mechanics notes on the DVIR."""

    odometer_meters: Annotated[
        Optional[int], pydantic.Field(alias="odometerMeters")
    ] = None
    r"""The odometer reading in meters."""

    second_signature: Annotated[
        Optional[WorkflowAuthorSignatureObjectResponseBody],
        pydantic.Field(alias="secondSignature"),
    ] = None
    r"""An author signature for DVIRs with a signed time."""

    third_signature: Annotated[
        Optional[WorkflowAuthorSignatureObjectResponseBody],
        pydantic.Field(alias="thirdSignature"),
    ] = None
    r"""An author signature for DVIRs with a signed time."""

    trailer: Optional[GoaTrailerTinyResponseResponseBody] = None
    r"""A minified trailer object"""
