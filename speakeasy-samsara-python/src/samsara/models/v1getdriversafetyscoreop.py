"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .v1driversafetyscoreresponse import (
    V1DriverSafetyScoreResponse,
    V1DriverSafetyScoreResponseTypedDict,
)
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from typing import Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class V1getDriverSafetyScoreRequestTypedDict(TypedDict):
    driver_id: int
    r"""ID of the driver. Must contain only digits 0-9."""
    start_ms: int
    r"""Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour."""
    end_ms: int
    r"""Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour."""


class V1getDriverSafetyScoreRequest(BaseModel):
    driver_id: Annotated[
        int,
        pydantic.Field(alias="driverId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""ID of the driver. Must contain only digits 0-9."""

    start_ms: Annotated[
        int,
        pydantic.Field(alias="startMs"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour."""

    end_ms: Annotated[
        int,
        pydantic.Field(alias="endMs"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour."""


V1getDriverSafetyScoreResponseTypedDict = TypeAliasType(
    "V1getDriverSafetyScoreResponseTypedDict",
    Union[V1DriverSafetyScoreResponseTypedDict, str],
)


V1getDriverSafetyScoreResponse = TypeAliasType(
    "V1getDriverSafetyScoreResponse", Union[V1DriverSafetyScoreResponse, str]
)
