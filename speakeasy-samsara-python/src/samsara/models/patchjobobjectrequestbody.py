"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .patchjobobjectjoblocationrequestobjectrequestbody import (
    PatchJobObjectjobLocationRequestObjectRequestBody,
    PatchJobObjectjobLocationRequestObjectRequestBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PatchJobObjectRequestBodyTypedDict(TypedDict):
    r"""Job object with fields to update. If a field is not provided, it will not be updated"""

    address: NotRequired[PatchJobObjectjobLocationRequestObjectRequestBodyTypedDict]
    r"""A location object for the job"""
    customer_name: NotRequired[str]
    r"""Customer name for job"""
    end_date: NotRequired[str]
    r"""End date of job in RFC 3339 format. Must be greater than or equal to the start date"""
    fleet_device_ids: NotRequired[List[int]]
    r"""Fleet devices to be added to this job (cannot have both industrial assets and fleet devices in the same job)"""
    id: NotRequired[str]
    r"""Job Id"""
    industrial_asset_ids: NotRequired[List[str]]
    r"""IndustrialAssets to be added to this job (cannot have both industrial assets and fleet devices in the same job)"""
    name: NotRequired[str]
    r"""Job name"""
    notes: NotRequired[str]
    r"""Notes for the upcoming job"""
    ontime_window_after_arrival_ms: NotRequired[int]
    r"""Specifies the time window (in milliseconds) after a stop's scheduled arrival time during which the stop is considered 'on-time'."""
    ontime_window_before_arrival_ms: NotRequired[int]
    r"""Specifies the time window (in milliseconds) before a stop's scheduled arrival time during which the stop is considered 'on-time'."""
    start_date: NotRequired[str]
    r"""Start date of job in RFC 3339 format."""


class PatchJobObjectRequestBody(BaseModel):
    r"""Job object with fields to update. If a field is not provided, it will not be updated"""

    address: Optional[PatchJobObjectjobLocationRequestObjectRequestBody] = None
    r"""A location object for the job"""

    customer_name: Annotated[Optional[str], pydantic.Field(alias="customerName")] = None
    r"""Customer name for job"""

    end_date: Annotated[Optional[str], pydantic.Field(alias="endDate")] = None
    r"""End date of job in RFC 3339 format. Must be greater than or equal to the start date"""

    fleet_device_ids: Annotated[
        Optional[List[int]], pydantic.Field(alias="fleetDeviceIds")
    ] = None
    r"""Fleet devices to be added to this job (cannot have both industrial assets and fleet devices in the same job)"""

    id: Optional[str] = None
    r"""Job Id"""

    industrial_asset_ids: Annotated[
        Optional[List[str]], pydantic.Field(alias="industrialAssetIds")
    ] = None
    r"""IndustrialAssets to be added to this job (cannot have both industrial assets and fleet devices in the same job)"""

    name: Optional[str] = None
    r"""Job name"""

    notes: Optional[str] = None
    r"""Notes for the upcoming job"""

    ontime_window_after_arrival_ms: Annotated[
        Optional[int], pydantic.Field(alias="ontimeWindowAfterArrivalMs")
    ] = None
    r"""Specifies the time window (in milliseconds) after a stop's scheduled arrival time during which the stop is considered 'on-time'."""

    ontime_window_before_arrival_ms: Annotated[
        Optional[int], pydantic.Field(alias="ontimeWindowBeforeArrivalMs")
    ] = None
    r"""Specifies the time window (in milliseconds) before a stop's scheduled arrival time during which the stop is considered 'on-time'."""

    start_date: Annotated[Optional[str], pydantic.Field(alias="startDate")] = None
    r"""Start date of job in RFC 3339 format."""
