"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .coachingsessionsgetcoachingsessionsbadrequesterrorresponsebody import (
    CoachingSessionsGetCoachingSessionsBadRequestErrorResponseBody,
    CoachingSessionsGetCoachingSessionsBadRequestErrorResponseBodyTypedDict,
)
from .coachingsessionsgetcoachingsessionsresponsebody import (
    CoachingSessionsGetCoachingSessionsResponseBody,
    CoachingSessionsGetCoachingSessionsResponseBodyTypedDict,
)
from datetime import datetime
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetCoachingSessionsRequestTypedDict(TypedDict):
    start_time: datetime
    r"""Required RFC 3339 timestamp that indicates when to begin receiving data. Value is compared against `updatedAtTime`"""
    driver_ids: NotRequired[List[str]]
    r"""Optional string of comma separated driver IDs. If driver ID is present, sessions for the specified driver(s) will be returned."""
    coach_ids: NotRequired[List[str]]
    r"""Optional string of comma separated user IDs. If coach ID is present, sessions for the specified coach(s) will be returned for either assignedCoach or completedCoach. If both driverId(s) and coachId(s) are present, sessions with specified driver(s) and coach(es) will be returned."""
    session_statuses: NotRequired[List[str]]
    r"""Optional string of comma separated statuses. Valid values:  “upcoming”, “completed”, “deleted”."""
    include_coachable_events: NotRequired[bool]
    r"""Optional boolean to control whether behaviors will include coachableEvents in the response. Defaults to false."""
    end_time: NotRequired[datetime]
    r"""Optional RFC 3339 timestamp. If not provided then the endpoint behaves as an unending feed of changes. If endTime is set the same as startTime, the most recent data point before that time will be returned per asset. Value is compared against `updatedAtTime`"""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    include_external_ids: NotRequired[bool]
    r"""Optional boolean indicating whether to return external IDs on supported entities"""


class GetCoachingSessionsRequest(BaseModel):
    start_time: Annotated[
        datetime,
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Required RFC 3339 timestamp that indicates when to begin receiving data. Value is compared against `updatedAtTime`"""

    driver_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="driverIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional string of comma separated driver IDs. If driver ID is present, sessions for the specified driver(s) will be returned."""

    coach_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="coachIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional string of comma separated user IDs. If coach ID is present, sessions for the specified coach(s) will be returned for either assignedCoach or completedCoach. If both driverId(s) and coachId(s) are present, sessions with specified driver(s) and coach(es) will be returned."""

    session_statuses: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="sessionStatuses"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional string of comma separated statuses. Valid values:  “upcoming”, “completed”, “deleted”."""

    include_coachable_events: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeCoachableEvents"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean to control whether behaviors will include coachableEvents in the response. Defaults to false."""

    end_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional RFC 3339 timestamp. If not provided then the endpoint behaves as an unending feed of changes. If endTime is set the same as startTime, the most recent data point before that time will be returned per asset. Value is compared against `updatedAtTime`"""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    include_external_ids: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeExternalIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether to return external IDs on supported entities"""


GetCoachingSessionsResponseTypedDict = TypeAliasType(
    "GetCoachingSessionsResponseTypedDict",
    Union[
        CoachingSessionsGetCoachingSessionsResponseBodyTypedDict,
        CoachingSessionsGetCoachingSessionsBadRequestErrorResponseBodyTypedDict,
    ],
)


GetCoachingSessionsResponse = TypeAliasType(
    "GetCoachingSessionsResponse",
    Union[
        CoachingSessionsGetCoachingSessionsResponseBody,
        CoachingSessionsGetCoachingSessionsBadRequestErrorResponseBody,
    ],
)
