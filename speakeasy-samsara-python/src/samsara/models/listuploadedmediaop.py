"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .mediaretrievallistuploadedmediabadrequesterrorresponsebody import (
    MediaRetrievalListUploadedMediaBadRequestErrorResponseBody,
    MediaRetrievalListUploadedMediaBadRequestErrorResponseBodyTypedDict,
)
from .mediaretrievallistuploadedmediaresponsebody import (
    MediaRetrievalListUploadedMediaResponseBody,
    MediaRetrievalListUploadedMediaResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class QueryParamInputs(str, Enum):
    DASHCAM_ROAD_FACING = "dashcamRoadFacing"
    DASHCAM_DRIVER_FACING = "dashcamDriverFacing"
    ANALOG = "analog"


class MediaTypes(str, Enum):
    IMAGE = "image"


class TriggerReasons(str, Enum):
    API = "api"
    PANIC_BUTTON = "panicButton"
    PERIODIC_STILL = "periodicStill"
    TRIP_END_STILL = "tripEndStill"
    TRIP_START_STILL = "tripStartStill"
    VIDEO_RETRIEVAL = "videoRetrieval"


class ListUploadedMediaRequestTypedDict(TypedDict):
    start_time: str
    r"""A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    end_time: str
    r"""An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    vehicle_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`"""
    inputs: NotRequired[List[QueryParamInputs]]
    r"""A list of desired camera inputs for which to return captured media. If empty, media for all available inputs will be returned."""
    media_types: NotRequired[List[MediaTypes]]
    r"""A list of desired media types for which to return captured media. If empty, media for all available media types will be returned."""
    trigger_reasons: NotRequired[List[TriggerReasons]]
    r"""A list of desired trigger reasons for which to return captured media. If empty, media for all available trigger reasons will be returned."""
    tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""
    parent_tag_ids: NotRequired[str]
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""
    available_after_time: NotRequired[str]
    r"""A timestamp in RFC 3339 format that can act as a cursor to track which media has previously been retrieved; only media whose availableAtTime comes after this parameter will be returned. Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00"""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""


class ListUploadedMediaRequest(BaseModel):
    start_time: Annotated[
        str,
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    end_time: Annotated[
        str,
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    vehicle_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="vehicleIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`"""

    inputs: Annotated[
        Optional[List[QueryParamInputs]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A list of desired camera inputs for which to return captured media. If empty, media for all available inputs will be returned."""

    media_types: Annotated[
        Optional[List[MediaTypes]],
        pydantic.Field(alias="mediaTypes"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A list of desired media types for which to return captured media. If empty, media for all available media types will be returned."""

    trigger_reasons: Annotated[
        Optional[List[TriggerReasons]],
        pydantic.Field(alias="triggerReasons"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A list of desired trigger reasons for which to return captured media. If empty, media for all available trigger reasons will be returned."""

    tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="tagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`"""

    parent_tag_ids: Annotated[
        Optional[str],
        pydantic.Field(alias="parentTagIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`"""

    available_after_time: Annotated[
        Optional[str],
        pydantic.Field(alias="availableAfterTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A timestamp in RFC 3339 format that can act as a cursor to track which media has previously been retrieved; only media whose availableAtTime comes after this parameter will be returned. Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00"""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""


ListUploadedMediaResponseTypedDict = TypeAliasType(
    "ListUploadedMediaResponseTypedDict",
    Union[
        MediaRetrievalListUploadedMediaResponseBodyTypedDict,
        MediaRetrievalListUploadedMediaBadRequestErrorResponseBodyTypedDict,
    ],
)


ListUploadedMediaResponse = TypeAliasType(
    "ListUploadedMediaResponse",
    Union[
        MediaRetrievalListUploadedMediaResponseBody,
        MediaRetrievalListUploadedMediaBadRequestErrorResponseBody,
    ],
)
