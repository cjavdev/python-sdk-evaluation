"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .trainingcourseobjectresponsebody import (
    TrainingCourseObjectResponseBody,
    TrainingCourseObjectResponseBodyTypedDict,
)
from .traininglearnerobjectresponsebody import (
    TrainingLearnerObjectResponseBody,
    TrainingLearnerObjectResponseBodyTypedDict,
)
from datetime import datetime
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TrainingAssignmentResponseObjectResponseBodyStatus(str, Enum):
    r"""State for the Training Assignment. Always returned.  Valid values: `notStarted`, `inProgress`, `completed`"""

    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    COMPLETED = "completed"


class TrainingAssignmentResponseObjectResponseBodyTypedDict(TypedDict):
    r"""Training Assignment response object."""

    course: TrainingCourseObjectResponseBodyTypedDict
    r"""Course that is associated with the training assignments."""
    created_at_time: datetime
    r"""Creation time of the training assignment. UTC timestamp in RFC 3339 format."""
    created_by_id: str
    r"""ID of the user who created the training assignment."""
    duration_minutes: int
    r"""Time spent on the training assignment."""
    id: str
    r"""ID of the training assignment."""
    learner: TrainingLearnerObjectResponseBodyTypedDict
    r"""Learner that is associated with the training assignment. Only driver learners are supported currently."""
    status: TrainingAssignmentResponseObjectResponseBodyStatus
    r"""State for the Training Assignment. Always returned.  Valid values: `notStarted`, `inProgress`, `completed`"""
    updated_at_time: datetime
    r"""Time training assignment was updated by either a learner or an admin. UTC timestamp in RFC 3339 format."""
    updated_by_id: str
    r"""ID of the user who updated the training assignment, either an admin or a learner."""
    completed_at_time: NotRequired[datetime]
    r"""Time training assignment is completed. UTC timestamp in RFC 3339 format. Returned when a training assignment completion status is \"complete\"."""
    deleted_at_time: NotRequired[datetime]
    r"""Time training assignment is deleted. UTC timestamp in RFC 3339 format."""
    due_at_time: NotRequired[datetime]
    r"""Time training assignment is due. UTC timestamp in RFC 3339 format. Returned when an assignment has a due date set by an admin."""
    is_completed_late: NotRequired[bool]
    r"""Indicates whether the training assignment was completed on time or not. Returned when a training assignment completion status is \"complete\" and has a dueAtTime set by an admin."""
    is_overdue: NotRequired[bool]
    r"""Indicates whether the training assignment is past the due date. Returned when a training assignment completion status is 'inProgress' or 'notStarted' and has a dueAtTime set by an admin."""
    score_percent: NotRequired[float]
    r"""Quiz score associated with training assignment. Returned when a training assignment completion status is \"complete\"."""
    started_at_time: NotRequired[datetime]
    r"""Time training assignment is started. UTC timestamp in RFC 3339 format. Returned when a training assignment completion status is \"complete\" or \"inProgress\"."""


class TrainingAssignmentResponseObjectResponseBody(BaseModel):
    r"""Training Assignment response object."""

    course: TrainingCourseObjectResponseBody
    r"""Course that is associated with the training assignments."""

    created_at_time: Annotated[datetime, pydantic.Field(alias="createdAtTime")]
    r"""Creation time of the training assignment. UTC timestamp in RFC 3339 format."""

    created_by_id: Annotated[str, pydantic.Field(alias="createdById")]
    r"""ID of the user who created the training assignment."""

    duration_minutes: Annotated[int, pydantic.Field(alias="durationMinutes")]
    r"""Time spent on the training assignment."""

    id: str
    r"""ID of the training assignment."""

    learner: TrainingLearnerObjectResponseBody
    r"""Learner that is associated with the training assignment. Only driver learners are supported currently."""

    status: TrainingAssignmentResponseObjectResponseBodyStatus
    r"""State for the Training Assignment. Always returned.  Valid values: `notStarted`, `inProgress`, `completed`"""

    updated_at_time: Annotated[datetime, pydantic.Field(alias="updatedAtTime")]
    r"""Time training assignment was updated by either a learner or an admin. UTC timestamp in RFC 3339 format."""

    updated_by_id: Annotated[str, pydantic.Field(alias="updatedById")]
    r"""ID of the user who updated the training assignment, either an admin or a learner."""

    completed_at_time: Annotated[
        Optional[datetime], pydantic.Field(alias="completedAtTime")
    ] = None
    r"""Time training assignment is completed. UTC timestamp in RFC 3339 format. Returned when a training assignment completion status is \"complete\"."""

    deleted_at_time: Annotated[
        Optional[datetime], pydantic.Field(alias="deletedAtTime")
    ] = None
    r"""Time training assignment is deleted. UTC timestamp in RFC 3339 format."""

    due_at_time: Annotated[Optional[datetime], pydantic.Field(alias="dueAtTime")] = None
    r"""Time training assignment is due. UTC timestamp in RFC 3339 format. Returned when an assignment has a due date set by an admin."""

    is_completed_late: Annotated[
        Optional[bool], pydantic.Field(alias="isCompletedLate")
    ] = None
    r"""Indicates whether the training assignment was completed on time or not. Returned when a training assignment completion status is \"complete\" and has a dueAtTime set by an admin."""

    is_overdue: Annotated[Optional[bool], pydantic.Field(alias="isOverdue")] = None
    r"""Indicates whether the training assignment is past the due date. Returned when a training assignment completion status is 'inProgress' or 'notStarted' and has a dueAtTime set by an admin."""

    score_percent: Annotated[Optional[float], pydantic.Field(alias="scorePercent")] = (
        None
    )
    r"""Quiz score associated with training assignment. Returned when a training assignment completion status is \"complete\"."""

    started_at_time: Annotated[
        Optional[datetime], pydantic.Field(alias="startedAtTime")
    ] = None
    r"""Time training assignment is started. UTC timestamp in RFC 3339 format. Returned when a training assignment completion status is \"complete\" or \"inProgress\"."""
