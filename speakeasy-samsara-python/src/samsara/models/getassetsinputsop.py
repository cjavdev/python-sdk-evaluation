"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .assetsinputsgetassetsinputsbadrequesterrorresponsebody import (
    AssetsInputsGetAssetsInputsBadRequestErrorResponseBody,
    AssetsInputsGetAssetsInputsBadRequestErrorResponseBodyTypedDict,
)
from .assetsinputsgetassetsinputsresponsebody import (
    AssetsInputsGetAssetsInputsResponseBody,
    AssetsInputsGetAssetsInputsResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetAssetsInputsQueryParamType(str, Enum):
    r"""Input stat type to query for.  Valid values: `auxInput1`, `auxInput2`, `auxInput3`, `auxInput4`, `auxInput5`, `auxInput6`, `auxInput7`, `auxInput8`, `auxInput9`, `auxInput10`, `auxInput11`, `auxInput12`, `auxInput13`, `analogInput1Voltage`, `analogInput2Voltage`, `analogInput1Current`, `analogInput2Current`, `batteryVoltage`"""

    AUX_INPUT1 = "auxInput1"
    AUX_INPUT2 = "auxInput2"
    AUX_INPUT3 = "auxInput3"
    AUX_INPUT4 = "auxInput4"
    AUX_INPUT5 = "auxInput5"
    AUX_INPUT6 = "auxInput6"
    AUX_INPUT7 = "auxInput7"
    AUX_INPUT8 = "auxInput8"
    AUX_INPUT9 = "auxInput9"
    AUX_INPUT10 = "auxInput10"
    AUX_INPUT11 = "auxInput11"
    AUX_INPUT12 = "auxInput12"
    AUX_INPUT13 = "auxInput13"
    ANALOG_INPUT1_VOLTAGE = "analogInput1Voltage"
    ANALOG_INPUT2_VOLTAGE = "analogInput2Voltage"
    ANALOG_INPUT1_CURRENT = "analogInput1Current"
    ANALOG_INPUT2_CURRENT = "analogInput2Current"
    BATTERY_VOLTAGE = "batteryVoltage"


class GetAssetsInputsRequestTypedDict(TypedDict):
    ids: List[str]
    r"""Comma-separated list of asset IDs. Limited to 100 ID's for each request."""
    type: GetAssetsInputsQueryParamType
    r"""Input stat type to query for.  Valid values: `auxInput1`, `auxInput2`, `auxInput3`, `auxInput4`, `auxInput5`, `auxInput6`, `auxInput7`, `auxInput8`, `auxInput9`, `auxInput10`, `auxInput11`, `auxInput12`, `auxInput13`, `analogInput1Voltage`, `analogInput2Voltage`, `analogInput1Current`, `analogInput2Current`, `batteryVoltage`"""
    start_time: str
    r"""A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    end_time: NotRequired[str]
    r"""An end time in RFC 3339 format. Defaults to never if not provided; if not provided then pagination will not cease, and a valid pagination cursor will always be returned. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    include_external_ids: NotRequired[bool]
    r"""Optional boolean indicating whether to return external IDs on supported entities"""
    include_tags: NotRequired[bool]
    r"""Optional boolean indicating whether to return tags on supported entities"""
    include_attributes: NotRequired[bool]
    r"""Optional boolean indicating whether to return attributes on supported entities"""


class GetAssetsInputsRequest(BaseModel):
    ids: Annotated[
        List[str], FieldMetadata(query=QueryParamMetadata(style="form", explode=False))
    ]
    r"""Comma-separated list of asset IDs. Limited to 100 ID's for each request."""

    type: Annotated[
        GetAssetsInputsQueryParamType,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Input stat type to query for.  Valid values: `auxInput1`, `auxInput2`, `auxInput3`, `auxInput4`, `auxInput5`, `auxInput6`, `auxInput7`, `auxInput8`, `auxInput9`, `auxInput10`, `auxInput11`, `auxInput12`, `auxInput13`, `analogInput1Voltage`, `analogInput2Voltage`, `analogInput1Current`, `analogInput2Current`, `batteryVoltage`"""

    start_time: Annotated[
        str,
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    end_time: Annotated[
        Optional[str],
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An end time in RFC 3339 format. Defaults to never if not provided; if not provided then pagination will not cease, and a valid pagination cursor will always be returned. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    include_external_ids: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeExternalIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether to return external IDs on supported entities"""

    include_tags: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeTags"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether to return tags on supported entities"""

    include_attributes: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeAttributes"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional boolean indicating whether to return attributes on supported entities"""


GetAssetsInputsResponseTypedDict = TypeAliasType(
    "GetAssetsInputsResponseTypedDict",
    Union[
        AssetsInputsGetAssetsInputsResponseBodyTypedDict,
        AssetsInputsGetAssetsInputsBadRequestErrorResponseBodyTypedDict,
    ],
)


GetAssetsInputsResponse = TypeAliasType(
    "GetAssetsInputsResponse",
    Union[
        AssetsInputsGetAssetsInputsResponseBody,
        AssetsInputsGetAssetsInputsBadRequestErrorResponseBody,
    ],
)
