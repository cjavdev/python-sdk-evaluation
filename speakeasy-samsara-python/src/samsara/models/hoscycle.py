"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class HosCycleTypedDict(TypedDict):
    r"""Remaining durations and start time for the HOS driving cycle."""

    cycle_remaining_duration_ms: NotRequired[float]
    r"""Remaining on duty or driving time the driver has in the current cycle in milliseconds. For property-carrying drivers, this is the amount of time the driver can be on duty or driving before hitting the 60/70-hour limit in 7/8 days."""
    cycle_started_at_time: NotRequired[str]
    r"""UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""
    cycle_tomorrow_duration_ms: NotRequired[float]
    r"""Remaining on duty or driving time the driver has available tomorrow in milliseconds. For property-carrying drivers this is calculated based on the 60/70-hour limit in 7/8 days rule."""


class HosCycle(BaseModel):
    r"""Remaining durations and start time for the HOS driving cycle."""

    cycle_remaining_duration_ms: Annotated[
        Optional[float], pydantic.Field(alias="cycleRemainingDurationMs")
    ] = None
    r"""Remaining on duty or driving time the driver has in the current cycle in milliseconds. For property-carrying drivers, this is the amount of time the driver can be on duty or driving before hitting the 60/70-hour limit in 7/8 days."""

    cycle_started_at_time: Annotated[
        Optional[str], pydantic.Field(alias="cycleStartedAtTime")
    ] = None
    r"""UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    cycle_tomorrow_duration_ms: Annotated[
        Optional[float], pydantic.Field(alias="cycleTomorrowDurationMs")
    ] = None
    r"""Remaining on duty or driving time the driver has available tomorrow in milliseconds. For property-carrying drivers this is calculated based on the 60/70-hour limit in 7/8 days rule."""
