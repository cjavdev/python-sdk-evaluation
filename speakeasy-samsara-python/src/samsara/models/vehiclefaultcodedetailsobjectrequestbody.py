"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .specificvehiclefaultcodeobjectrequestbody import (
    SpecificVehicleFaultCodeObjectRequestBody,
    SpecificVehicleFaultCodeObjectRequestBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class VehicleFaultCodeDetailsObjectRequestBodyTypedDict(TypedDict):
    r"""Details specific to Vehicle Fault Code. At least one fault code or fault code group must be selected."""

    has_any_amber_warning_lamp_codes: NotRequired[bool]
    r"""If true then alert on codes for less serious errors that do not warrant stopping. Defaults to false."""
    has_any_fault_codes: NotRequired[bool]
    r"""If true this means that any code is alertable. Defaults to false."""
    has_any_malfunction_indicator_lamp_codes: NotRequired[bool]
    r"""If true then alert on emission-related codes. Defaults to false."""
    has_any_protection_lamp_codes: NotRequired[bool]
    r"""If true then alert on codes for non-electric vehicle parts. Defaults to false."""
    has_any_red_stop_lamp_codes: NotRequired[bool]
    r"""If true then alert when the vehicle warrants stopping. Defaults to false."""
    has_any_trailer_abs_lamp_codes: NotRequired[bool]
    r"""If true then alert when the ABS light is on. Defaults to false."""
    specific_fault_codes: NotRequired[
        List[SpecificVehicleFaultCodeObjectRequestBodyTypedDict]
    ]
    r"""The list of specific fault codes to be alerted on."""


class VehicleFaultCodeDetailsObjectRequestBody(BaseModel):
    r"""Details specific to Vehicle Fault Code. At least one fault code or fault code group must be selected."""

    has_any_amber_warning_lamp_codes: Annotated[
        Optional[bool], pydantic.Field(alias="hasAnyAmberWarningLampCodes")
    ] = None
    r"""If true then alert on codes for less serious errors that do not warrant stopping. Defaults to false."""

    has_any_fault_codes: Annotated[
        Optional[bool], pydantic.Field(alias="hasAnyFaultCodes")
    ] = None
    r"""If true this means that any code is alertable. Defaults to false."""

    has_any_malfunction_indicator_lamp_codes: Annotated[
        Optional[bool], pydantic.Field(alias="hasAnyMalfunctionIndicatorLampCodes")
    ] = None
    r"""If true then alert on emission-related codes. Defaults to false."""

    has_any_protection_lamp_codes: Annotated[
        Optional[bool], pydantic.Field(alias="hasAnyProtectionLampCodes")
    ] = None
    r"""If true then alert on codes for non-electric vehicle parts. Defaults to false."""

    has_any_red_stop_lamp_codes: Annotated[
        Optional[bool], pydantic.Field(alias="hasAnyRedStopLampCodes")
    ] = None
    r"""If true then alert when the vehicle warrants stopping. Defaults to false."""

    has_any_trailer_abs_lamp_codes: Annotated[
        Optional[bool], pydantic.Field(alias="hasAnyTrailerAbsLampCodes")
    ] = None
    r"""If true then alert when the ABS light is on. Defaults to false."""

    specific_fault_codes: Annotated[
        Optional[List[SpecificVehicleFaultCodeObjectRequestBody]],
        pydantic.Field(alias="specificFaultCodes"),
    ] = None
    r"""The list of specific fault codes to be alerted on."""
