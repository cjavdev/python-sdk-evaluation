"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .resolvedby import ResolvedBy, ResolvedByTypedDict
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DefectPatchTypedDict(TypedDict):
    r"""Information about resolving a defect. If resolving a defect, must specify `isResolved` as `true` and `resolvedBy`."""

    is_resolved: NotRequired[bool]
    r"""Resolves the defect. Must be `true`."""
    mechanic_notes: NotRequired[str]
    r"""The mechanics notes on the defect."""
    resolved_at_time: NotRequired[str]
    r"""Time when defect was resolved. Defaults to now if not provided. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""
    resolved_by: NotRequired[ResolvedByTypedDict]
    r"""Information about the user who is resolving a defect."""


class DefectPatch(BaseModel):
    r"""Information about resolving a defect. If resolving a defect, must specify `isResolved` as `true` and `resolvedBy`."""

    is_resolved: Annotated[Optional[bool], pydantic.Field(alias="isResolved")] = None
    r"""Resolves the defect. Must be `true`."""

    mechanic_notes: Annotated[Optional[str], pydantic.Field(alias="mechanicNotes")] = (
        None
    )
    r"""The mechanics notes on the defect."""

    resolved_at_time: Annotated[
        Optional[str], pydantic.Field(alias="resolvedAtTime")
    ] = None
    r"""Time when defect was resolved. Defaults to now if not provided. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    resolved_by: Annotated[Optional[ResolvedBy], pydantic.Field(alias="resolvedBy")] = (
        None
    )
    r"""Information about the user who is resolving a defect."""
