"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .routesettingsrequestbody import (
    RouteSettingsRequestBody,
    RouteSettingsRequestBodyTypedDict,
)
from .updateroutesstoprequestobjectrequestbody import (
    UpdateRoutesStopRequestObjectRequestBody,
    UpdateRoutesStopRequestObjectRequestBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RoutesPatchRouteRequestBodyTypedDict(TypedDict):
    driver_id: NotRequired[str]
    r"""ID of the driver. Can be either a unique Samsara ID or an [external ID](https://developers.samsara.com/docs/external-ids) for the driver."""
    external_ids: NotRequired[Dict[str, str]]
    r"""A map of external ids"""
    name: NotRequired[str]
    r"""Name for the route"""
    notes: NotRequired[str]
    r"""Notes about the route."""
    settings: NotRequired[RouteSettingsRequestBodyTypedDict]
    r"""An optional dictionary, only necessary to override the defaults for route start and end conditions."""
    stops: NotRequired[List[UpdateRoutesStopRequestObjectRequestBodyTypedDict]]
    r"""List of stops along the route. If a valid `id` of a stop is provided, that stop will be updated. If no `id` is provided for a passed in stop, that stop will be created. If `id` value are passed in for some stops and not for others, those with `id` value specified will be retained and updated in the original route, those without `id` value specified in the body will be created, and those without `id` value specified that already existed on the route will be deleted. For each new stop, exactly one of `addressId` and `singleUseLocation` are required. Depending on the `settings` on your route, either a `scheduledArrivalTime` or `scheduledDepartureTime` must be specified for the first job, if a new first job is being added."""
    vehicle_id: NotRequired[str]
    r"""ID of the vehicle. Can be either a unique Samsara ID or an [external ID](https://developers.samsara.com/docs/external-ids) for the vehicle."""


class RoutesPatchRouteRequestBody(BaseModel):
    driver_id: Annotated[Optional[str], pydantic.Field(alias="driverId")] = None
    r"""ID of the driver. Can be either a unique Samsara ID or an [external ID](https://developers.samsara.com/docs/external-ids) for the driver."""

    external_ids: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="externalIds")
    ] = None
    r"""A map of external ids"""

    name: Optional[str] = None
    r"""Name for the route"""

    notes: Optional[str] = None
    r"""Notes about the route."""

    settings: Optional[RouteSettingsRequestBody] = None
    r"""An optional dictionary, only necessary to override the defaults for route start and end conditions."""

    stops: Optional[List[UpdateRoutesStopRequestObjectRequestBody]] = None
    r"""List of stops along the route. If a valid `id` of a stop is provided, that stop will be updated. If no `id` is provided for a passed in stop, that stop will be created. If `id` value are passed in for some stops and not for others, those with `id` value specified will be retained and updated in the original route, those without `id` value specified in the body will be created, and those without `id` value specified that already existed on the route will be deleted. For each new stop, exactly one of `addressId` and `singleUseLocation` are required. Depending on the `settings` on your route, either a `scheduledArrivalTime` or `scheduledDepartureTime` must be specified for the first job, if a new first job is being added."""

    vehicle_id: Annotated[Optional[str], pydantic.Field(alias="vehicleId")] = None
    r"""ID of the vehicle. Can be either a unique Samsara ID or an [external ID](https://developers.samsara.com/docs/external-ids) for the vehicle."""
