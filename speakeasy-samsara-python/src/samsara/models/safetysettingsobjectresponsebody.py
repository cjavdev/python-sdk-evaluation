"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .distracteddrivingdetectionalertsettingsobjectresponsebody import (
    DistractedDrivingDetectionAlertSettingsObjectResponseBody,
    DistractedDrivingDetectionAlertSettingsObjectResponseBodyTypedDict,
)
from .followingdistancedetectionalertsettingsobjectresponsebody import (
    FollowingDistanceDetectionAlertSettingsObjectResponseBody,
    FollowingDistanceDetectionAlertSettingsObjectResponseBodyTypedDict,
)
from .forwardcollisiondetectionalertsettingsobjectresponsebody import (
    ForwardCollisionDetectionAlertSettingsObjectResponseBody,
    ForwardCollisionDetectionAlertSettingsObjectResponseBodyTypedDict,
)
from .harsheventsensitivitysettingsobjectresponsebody import (
    HarshEventSensitivitySettingsObjectResponseBody,
    HarshEventSensitivitySettingsObjectResponseBodyTypedDict,
)
from .harsheventsensitivityv2settingsobjectresponsebody import (
    HarshEventSensitivityV2SettingsObjectResponseBody,
    HarshEventSensitivityV2SettingsObjectResponseBodyTypedDict,
)
from .policyviolationsdetectionalertsettingsobjectresponsebody import (
    PolicyViolationsDetectionAlertSettingsObjectResponseBody,
    PolicyViolationsDetectionAlertSettingsObjectResponseBodyTypedDict,
)
from .rollingstopdetectionalertsettingsobjectresponsebody import (
    RollingStopDetectionAlertSettingsObjectResponseBody,
    RollingStopDetectionAlertSettingsObjectResponseBodyTypedDict,
)
from .safetyscoreconfigurationsettingsobjectresponsebody import (
    SafetyScoreConfigurationSettingsObjectResponseBody,
    SafetyScoreConfigurationSettingsObjectResponseBodyTypedDict,
)
from .speedingsettingsobjectresponsebody import (
    SpeedingSettingsObjectResponseBody,
    SpeedingSettingsObjectResponseBodyTypedDict,
)
from .voicecoachingsettingsobjectresponsebody import (
    VoiceCoachingSettingsObjectResponseBody,
    VoiceCoachingSettingsObjectResponseBodyTypedDict,
)
from enum import Enum
import pydantic
from samsara.types import BaseModel
from typing_extensions import Annotated, TypedDict


class DefaultVehicleType(str, Enum):
    r"""Default vehicle type (for newly added or activated vehicles).  Valid values: `off`, `automatic`, `passengerCar`, `lightTruck`, `heavyDuty`"""

    OFF = "off"
    AUTOMATIC = "automatic"
    PASSENGER_CAR = "passengerCar"
    LIGHT_TRUCK = "lightTruck"
    HEAVY_DUTY = "heavyDuty"


class SafetySettingsObjectResponseBodyTypedDict(TypedDict):
    r"""Safety settings for a single organization."""

    default_vehicle_type: DefaultVehicleType
    r"""Default vehicle type (for newly added or activated vehicles).  Valid values: `off`, `automatic`, `passengerCar`, `lightTruck`, `heavyDuty`"""
    distracted_driving_detection_alerts: (
        DistractedDrivingDetectionAlertSettingsObjectResponseBodyTypedDict
    )
    r"""Enables AI detection of distracted driving, surfaces events in Safety Inbox, and enables configurable alerts. By default, Distracted Driving will impact the drivers' safety score."""
    following_distance_detection_alerts: (
        FollowingDistanceDetectionAlertSettingsObjectResponseBodyTypedDict
    )
    r"""Enables AI detection of tailgating or unsafe following distances, surfaces events in Safety Inbox, and enables configurable alerts. By default, Following Distance will impact the drivers' safety score."""
    forward_collision_detection_alerts: (
        ForwardCollisionDetectionAlertSettingsObjectResponseBodyTypedDict
    )
    r"""Enables AI detection of near forward collisions, surfaces events in Safety Inbox, and enables configurable alerts. While the feature is in beta, it is only enabled during daytime driving hours. In-cab alerts are recommended for testing use only."""
    harsh_event_sensitivity: HarshEventSensitivitySettingsObjectResponseBodyTypedDict
    r"""The configurable sensitivity for Harsh Event Detection on CM11/CM12/CM22 devices. Sensitivity can be measured as a numeric g-force value or the following values: `Normal`, `Less Sensitive`, `More Sensitive`."""
    harsh_event_sensitivity_v2: (
        HarshEventSensitivityV2SettingsObjectResponseBodyTypedDict
    )
    r"""The configurable sensitivity for Harsh Event Detection. Does not apply to CM11/12/22 devices."""
    policy_violations_detection_alerts: (
        PolicyViolationsDetectionAlertSettingsObjectResponseBodyTypedDict
    )
    r"""Enables detection of policy violations, surfaces events in Safety Inbox, and enables configurable alerts. While the feature is in beta, in-cab alerts are recommended for testing use only."""
    rolling_stop_detection_alerts: (
        RollingStopDetectionAlertSettingsObjectResponseBodyTypedDict
    )
    r"""AI event detection settings for the rolling stop behavior. Detection is available in vehicles with compatible dash cams."""
    safety_score_configuration: (
        SafetyScoreConfigurationSettingsObjectResponseBodyTypedDict
    )
    r"""The configurable safety infraction weights."""
    safety_score_target: int
    r"""The fleet-wide target safety score that is shown on safety score graphs. A safety score goal of 0 means that score benchmarking is disabled."""
    speeding_settings: SpeedingSettingsObjectResponseBodyTypedDict
    r"""Enables custom speeding levels."""
    voice_coaching: VoiceCoachingSettingsObjectResponseBodyTypedDict
    r"""Enabling voice coaching will play messages for harsh events, speeding, and unbuckled seat belts."""


class SafetySettingsObjectResponseBody(BaseModel):
    r"""Safety settings for a single organization."""

    default_vehicle_type: Annotated[
        DefaultVehicleType, pydantic.Field(alias="defaultVehicleType")
    ]
    r"""Default vehicle type (for newly added or activated vehicles).  Valid values: `off`, `automatic`, `passengerCar`, `lightTruck`, `heavyDuty`"""

    distracted_driving_detection_alerts: Annotated[
        DistractedDrivingDetectionAlertSettingsObjectResponseBody,
        pydantic.Field(alias="distractedDrivingDetectionAlerts"),
    ]
    r"""Enables AI detection of distracted driving, surfaces events in Safety Inbox, and enables configurable alerts. By default, Distracted Driving will impact the drivers' safety score."""

    following_distance_detection_alerts: Annotated[
        FollowingDistanceDetectionAlertSettingsObjectResponseBody,
        pydantic.Field(alias="followingDistanceDetectionAlerts"),
    ]
    r"""Enables AI detection of tailgating or unsafe following distances, surfaces events in Safety Inbox, and enables configurable alerts. By default, Following Distance will impact the drivers' safety score."""

    forward_collision_detection_alerts: Annotated[
        ForwardCollisionDetectionAlertSettingsObjectResponseBody,
        pydantic.Field(alias="forwardCollisionDetectionAlerts"),
    ]
    r"""Enables AI detection of near forward collisions, surfaces events in Safety Inbox, and enables configurable alerts. While the feature is in beta, it is only enabled during daytime driving hours. In-cab alerts are recommended for testing use only."""

    harsh_event_sensitivity: Annotated[
        HarshEventSensitivitySettingsObjectResponseBody,
        pydantic.Field(alias="harshEventSensitivity"),
    ]
    r"""The configurable sensitivity for Harsh Event Detection on CM11/CM12/CM22 devices. Sensitivity can be measured as a numeric g-force value or the following values: `Normal`, `Less Sensitive`, `More Sensitive`."""

    harsh_event_sensitivity_v2: Annotated[
        HarshEventSensitivityV2SettingsObjectResponseBody,
        pydantic.Field(alias="harshEventSensitivityV2"),
    ]
    r"""The configurable sensitivity for Harsh Event Detection. Does not apply to CM11/12/22 devices."""

    policy_violations_detection_alerts: Annotated[
        PolicyViolationsDetectionAlertSettingsObjectResponseBody,
        pydantic.Field(alias="policyViolationsDetectionAlerts"),
    ]
    r"""Enables detection of policy violations, surfaces events in Safety Inbox, and enables configurable alerts. While the feature is in beta, in-cab alerts are recommended for testing use only."""

    rolling_stop_detection_alerts: Annotated[
        RollingStopDetectionAlertSettingsObjectResponseBody,
        pydantic.Field(alias="rollingStopDetectionAlerts"),
    ]
    r"""AI event detection settings for the rolling stop behavior. Detection is available in vehicles with compatible dash cams."""

    safety_score_configuration: Annotated[
        SafetyScoreConfigurationSettingsObjectResponseBody,
        pydantic.Field(alias="safetyScoreConfiguration"),
    ]
    r"""The configurable safety infraction weights."""

    safety_score_target: Annotated[int, pydantic.Field(alias="safetyScoreTarget")]
    r"""The fleet-wide target safety score that is shown on safety score graphs. A safety score goal of 0 means that score benchmarking is disabled."""

    speeding_settings: Annotated[
        SpeedingSettingsObjectResponseBody, pydantic.Field(alias="speedingSettings")
    ]
    r"""Enables custom speeding levels."""

    voice_coaching: Annotated[
        VoiceCoachingSettingsObjectResponseBody, pydantic.Field(alias="voiceCoaching")
    ]
    r"""Enabling voice coaching will play messages for harsh events, speeding, and unbuckled seat belts."""
