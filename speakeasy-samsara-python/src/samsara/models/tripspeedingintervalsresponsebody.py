"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .speedingintervalresponsebody import (
    SpeedingIntervalResponseBody,
    SpeedingIntervalResponseBodyTypedDict,
)
from .tripassetresponsebody import TripAssetResponseBody, TripAssetResponseBodyTypedDict
import pydantic
from samsara.types import BaseModel
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TripSpeedingIntervalsResponseBodyTypedDict(TypedDict):
    r"""TripSpeedingIntervals"""

    asset: TripAssetResponseBodyTypedDict
    r"""Asset that the location readings are tied to"""
    created_at_time: str
    r"""UTC time the trip was created in Samsara in RFC 3339 format."""
    intervals: List[SpeedingIntervalResponseBodyTypedDict]
    r"""List of speeding intervals that belong to the trip. The full list of intervals associated with the trip is always returned, empty if no intervals exist."""
    trip_start_time: str
    r"""UTC time the trip started in RFC 3339 format."""
    updated_at_time: str
    r"""UTC time the trip was last updated in Samsara in RFC 3339 format. Valid updates are when trip's endTime populates or interval.isDismissed changes value."""
    driver_id: NotRequired[str]
    r"""The driver ID assigned to the trip. Only returned if includeDriverId is set to true. 'null' if no driver id."""


class TripSpeedingIntervalsResponseBody(BaseModel):
    r"""TripSpeedingIntervals"""

    asset: TripAssetResponseBody
    r"""Asset that the location readings are tied to"""

    created_at_time: Annotated[str, pydantic.Field(alias="createdAtTime")]
    r"""UTC time the trip was created in Samsara in RFC 3339 format."""

    intervals: List[SpeedingIntervalResponseBody]
    r"""List of speeding intervals that belong to the trip. The full list of intervals associated with the trip is always returned, empty if no intervals exist."""

    trip_start_time: Annotated[str, pydantic.Field(alias="tripStartTime")]
    r"""UTC time the trip started in RFC 3339 format."""

    updated_at_time: Annotated[str, pydantic.Field(alias="updatedAtTime")]
    r"""UTC time the trip was last updated in Samsara in RFC 3339 format. Valid updates are when trip's endTime populates or interval.isDismissed changes value."""

    driver_id: Annotated[Optional[str], pydantic.Field(alias="driverId")] = None
    r"""The driver ID assigned to the trip. Only returned if includeDriverId is set to true. 'null' if no driver id."""
