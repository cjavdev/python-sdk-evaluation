"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .addresstinyresponse import AddressTinyResponse, AddressTinyResponseTypedDict
from .reversegeo import ReverseGeo, ReverseGeoTypedDict
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EquipmentStatsGpsTypedDict(TypedDict):
    r"""GPS location of equipment."""

    latitude: float
    r"""GPS latitude represented in degrees"""
    longitude: float
    r"""GPS longitude represented in degrees"""
    time: str
    r"""UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""
    address: NotRequired[AddressTinyResponseTypedDict]
    r"""Address book entry, if one exists"""
    heading_degrees: NotRequired[float]
    r"""Heading of the asset in degrees."""
    reverse_geo: NotRequired[ReverseGeoTypedDict]
    r"""Reverse geocoded information."""
    speed_miles_per_hour: NotRequired[float]
    r"""GPS speed of the asset in miles per hour."""


class EquipmentStatsGps(BaseModel):
    r"""GPS location of equipment."""

    latitude: float
    r"""GPS latitude represented in degrees"""

    longitude: float
    r"""GPS longitude represented in degrees"""

    time: str
    r"""UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    address: Optional[AddressTinyResponse] = None
    r"""Address book entry, if one exists"""

    heading_degrees: Annotated[
        Optional[float], pydantic.Field(alias="headingDegrees")
    ] = None
    r"""Heading of the asset in degrees."""

    reverse_geo: Annotated[Optional[ReverseGeo], pydantic.Field(alias="reverseGeo")] = (
        None
    )
    r"""Reverse geocoded information."""

    speed_miles_per_hour: Annotated[
        Optional[float], pydantic.Field(alias="speedMilesPerHour")
    ] = None
    r"""GPS speed of the asset in miles per hour."""
