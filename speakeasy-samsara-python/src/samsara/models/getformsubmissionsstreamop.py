"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .formsubmissionsgetformsubmissionsstreambadrequesterrorresponsebody import (
    FormSubmissionsGetFormSubmissionsStreamBadRequestErrorResponseBody,
    FormSubmissionsGetFormSubmissionsStreamBadRequestErrorResponseBodyTypedDict,
)
from .formsubmissionsgetformsubmissionsstreamresponsebody import (
    FormSubmissionsGetFormSubmissionsStreamResponseBody,
    FormSubmissionsGetFormSubmissionsStreamResponseBodyTypedDict,
)
import pydantic
from samsara.types import BaseModel
from samsara.utils import FieldMetadata, QueryParamMetadata
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetFormSubmissionsStreamRequestTypedDict(TypedDict):
    start_time: str
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    end_time: NotRequired[str]
    r"""An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""
    after: NotRequired[str]
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""
    form_template_ids: NotRequired[List[str]]
    r"""A comma-separated list containing up to 50 template IDs to filter data to."""
    user_ids: NotRequired[List[str]]
    r"""A comma-separated list containing up to 50 user IDs to filter data to."""
    driver_ids: NotRequired[List[str]]
    r"""A comma-separated list containing up to 50 user IDs to filter data to."""
    include: NotRequired[List[str]]
    r"""A comma-separated list of strings indicating whether to return additional information. Valid values: `externalIds`, `fieldLabels`"""
    assigned_to_route_stop_ids: NotRequired[List[str]]
    r"""A comma-separated list containing up to 50 route stop IDs to filter data to."""


class GetFormSubmissionsStreamRequest(BaseModel):
    start_time: Annotated[
        str,
        pydantic.Field(alias="startTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    end_time: Annotated[
        Optional[str],
        pydantic.Field(alias="endTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."""

    after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results."""

    form_template_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="formTemplateIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list containing up to 50 template IDs to filter data to."""

    user_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="userIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list containing up to 50 user IDs to filter data to."""

    driver_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="driverIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list containing up to 50 user IDs to filter data to."""

    include: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list of strings indicating whether to return additional information. Valid values: `externalIds`, `fieldLabels`"""

    assigned_to_route_stop_ids: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="assignedToRouteStopIds"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list containing up to 50 route stop IDs to filter data to."""


GetFormSubmissionsStreamResponseTypedDict = TypeAliasType(
    "GetFormSubmissionsStreamResponseTypedDict",
    Union[
        FormSubmissionsGetFormSubmissionsStreamResponseBodyTypedDict,
        FormSubmissionsGetFormSubmissionsStreamBadRequestErrorResponseBodyTypedDict,
    ],
)


GetFormSubmissionsStreamResponse = TypeAliasType(
    "GetFormSubmissionsStreamResponse",
    Union[
        FormSubmissionsGetFormSubmissionsStreamResponseBody,
        FormSubmissionsGetFormSubmissionsStreamBadRequestErrorResponseBody,
    ],
)
