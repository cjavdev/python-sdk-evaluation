"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from samsara.types import BaseModel
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DriverEfficiencyDataObjectResponseBodyTypedDict(TypedDict):
    r"""Driver Efficiency score data. This object is returned by default or when the “score” format is specified in “dataFormats”."""

    overall_score: str
    r"""Represents the overall score for the driver. The score will be in either number (0-100) as a string or letter format (A-G) depending on the organisation config."""
    anticipation_score: NotRequired[str]
    r"""Represents the anticipation score for the driver. The score will be in either number or letter format depending on the organisation config."""
    coasting_score: NotRequired[str]
    r"""Represents the coasting score for the driver. The score will be in either number or letter format depending on the organisation config."""
    cruise_control_score: NotRequired[str]
    r"""Represents the cruise control score for the driver. The score will be in either number or letter format depending on the organisation config."""
    green_band_score: NotRequired[str]
    r"""Represents the green band score for the driver. The score will be in either number or letter format depending on the organisation config."""
    high_torque_score: NotRequired[str]
    r"""Represents the high torque score for the driver. The score will be in either number or letter format depending on the organisation config."""
    idling_score: NotRequired[str]
    r"""Represents the idling score for the driver.The score will be in either number or letter format depending on the organisation config."""
    over_speed_score: NotRequired[str]
    r"""Represents the over speed score for the driver. The score will be in either number or letter format depending on the organisation config."""
    wear_free_brake_score: NotRequired[str]
    r"""Represents the ware-free breaking score for the driver. The score will be in either number or letter format depending on the organisation config."""


class DriverEfficiencyDataObjectResponseBody(BaseModel):
    r"""Driver Efficiency score data. This object is returned by default or when the “score” format is specified in “dataFormats”."""

    overall_score: Annotated[str, pydantic.Field(alias="overallScore")]
    r"""Represents the overall score for the driver. The score will be in either number (0-100) as a string or letter format (A-G) depending on the organisation config."""

    anticipation_score: Annotated[
        Optional[str], pydantic.Field(alias="anticipationScore")
    ] = None
    r"""Represents the anticipation score for the driver. The score will be in either number or letter format depending on the organisation config."""

    coasting_score: Annotated[Optional[str], pydantic.Field(alias="coastingScore")] = (
        None
    )
    r"""Represents the coasting score for the driver. The score will be in either number or letter format depending on the organisation config."""

    cruise_control_score: Annotated[
        Optional[str], pydantic.Field(alias="cruiseControlScore")
    ] = None
    r"""Represents the cruise control score for the driver. The score will be in either number or letter format depending on the organisation config."""

    green_band_score: Annotated[
        Optional[str], pydantic.Field(alias="greenBandScore")
    ] = None
    r"""Represents the green band score for the driver. The score will be in either number or letter format depending on the organisation config."""

    high_torque_score: Annotated[
        Optional[str], pydantic.Field(alias="highTorqueScore")
    ] = None
    r"""Represents the high torque score for the driver. The score will be in either number or letter format depending on the organisation config."""

    idling_score: Annotated[Optional[str], pydantic.Field(alias="idlingScore")] = None
    r"""Represents the idling score for the driver.The score will be in either number or letter format depending on the organisation config."""

    over_speed_score: Annotated[
        Optional[str], pydantic.Field(alias="overSpeedScore")
    ] = None
    r"""Represents the over speed score for the driver. The score will be in either number or letter format depending on the organisation config."""

    wear_free_brake_score: Annotated[
        Optional[str], pydantic.Field(alias="wearFreeBrakeScore")
    ] = None
    r"""Represents the ware-free breaking score for the driver. The score will be in either number or letter format depending on the organisation config."""
