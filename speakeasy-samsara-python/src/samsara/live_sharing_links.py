"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from samsara import models, utils
from samsara._hooks import HookContext
from samsara.types import OptionalNullable, UNSET
from samsara.utils import get_security_from_env
from typing import Any, List, Mapping, Optional, Union


class LiveSharingLinks(BaseSDK):
    def delete_live_sharing_link(
        self,
        *,
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[
        models.LiveSharingLinksDeleteLiveSharingLinkBadRequestErrorResponseBody
    ]:
        r"""Delete non-expired Live Sharing Link

        Delete Live Sharing Link.

        <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Live Sharing Links** under the Driver Workflow category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param id: Unique identifier for the Live Sharing Link.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteLiveSharingLinkRequest(
            id=id,
        )

        req = self._build_request(
            method="DELETE",
            path="/live-shares",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="deleteLiveSharingLink",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return None
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkUnauthorizedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkNotFoundErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkTooManyRequestsErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkInternalServerErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkNotImplementedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkBadGatewayErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkServiceUnavailableErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def delete_live_sharing_link_async(
        self,
        *,
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[
        models.LiveSharingLinksDeleteLiveSharingLinkBadRequestErrorResponseBody
    ]:
        r"""Delete non-expired Live Sharing Link

        Delete Live Sharing Link.

        <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Live Sharing Links** under the Driver Workflow category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param id: Unique identifier for the Live Sharing Link.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteLiveSharingLinkRequest(
            id=id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/live-shares",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="deleteLiveSharingLink",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return None
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkUnauthorizedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkNotFoundErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkTooManyRequestsErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkInternalServerErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkNotImplementedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkBadGatewayErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkServiceUnavailableErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LiveSharingLinksDeleteLiveSharingLinkGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksDeleteLiveSharingLinkBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_live_sharing_links(
        self,
        *,
        ids: Optional[List[str]] = None,
        type_: Optional[
            models.GetLiveSharingLinksQueryParamType
        ] = models.GetLiveSharingLinksQueryParamType.ALL,
        limit: Optional[int] = 100,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetLiveSharingLinksResponse:
        r"""Get Live Sharing Links

        Returns all non-expired Live Sharing Links.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Live Sharing Links** under the Driver Workflow category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param ids: A filter on the data based on this comma-separated list of Live Share Link IDs
        :param type: A filter on the data based on the Live Sharing Link type.  Valid values: `all`, `assetsLocation`, `assetsNearLocation`, `assetsOnRoute`
        :param limit: The limit for how many objects will be in the response. Default and max for this value is 100 objects.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetLiveSharingLinksRequest(
            ids=ids,
            type=type_,
            limit=limit,
            after=after,
        )

        req = self._build_request(
            method="GET",
            path="/live-shares",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getLiveSharingLinks",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.LiveSharingLinksGetLiveSharingLinksResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksUnauthorizedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksNotFoundErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksTooManyRequestsErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksInternalServerErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksNotImplementedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksBadGatewayErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksServiceUnavailableErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_live_sharing_links_async(
        self,
        *,
        ids: Optional[List[str]] = None,
        type_: Optional[
            models.GetLiveSharingLinksQueryParamType
        ] = models.GetLiveSharingLinksQueryParamType.ALL,
        limit: Optional[int] = 100,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetLiveSharingLinksResponse:
        r"""Get Live Sharing Links

        Returns all non-expired Live Sharing Links.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Live Sharing Links** under the Driver Workflow category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param ids: A filter on the data based on this comma-separated list of Live Share Link IDs
        :param type: A filter on the data based on the Live Sharing Link type.  Valid values: `all`, `assetsLocation`, `assetsNearLocation`, `assetsOnRoute`
        :param limit: The limit for how many objects will be in the response. Default and max for this value is 100 objects.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetLiveSharingLinksRequest(
            ids=ids,
            type=type_,
            limit=limit,
            after=after,
        )

        req = self._build_request_async(
            method="GET",
            path="/live-shares",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getLiveSharingLinks",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.LiveSharingLinksGetLiveSharingLinksResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksUnauthorizedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksNotFoundErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksTooManyRequestsErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksInternalServerErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksNotImplementedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksBadGatewayErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksServiceUnavailableErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LiveSharingLinksGetLiveSharingLinksGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksGetLiveSharingLinksBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def update_live_sharing_link(
        self,
        *,
        id: str,
        name: str,
        description: Optional[str] = None,
        expires_at_time: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateLiveSharingLinkResponse:
        r"""Update non-expired Live Sharing Link

        Update Live Sharing Link.

        <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Live Sharing Links** under the Driver Workflow category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param id: Unique identifier for the Live Sharing Link.
        :param name: Name of the Live Sharing Link.
        :param description: Description for the Live Sharing Link (not applicable for 'assetsOnRoute' type).
        :param expires_at_time: Date that this link expires in RFC 3339 format. Can't be set in the past. If not provided then link will never expire.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdateLiveSharingLinkRequest(
            id=id,
            live_sharing_links_update_live_sharing_link_request_body=models.LiveSharingLinksUpdateLiveSharingLinkRequestBody(
                description=description,
                expires_at_time=expires_at_time,
                name=name,
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/live-shares",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.live_sharing_links_update_live_sharing_link_request_body,
                False,
                False,
                "json",
                models.LiveSharingLinksUpdateLiveSharingLinkRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="updateLiveSharingLink",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.LiveSharingLinksUpdateLiveSharingLinkResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkUnauthorizedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkNotFoundErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkTooManyRequestsErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkInternalServerErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkNotImplementedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkBadGatewayErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkServiceUnavailableErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def update_live_sharing_link_async(
        self,
        *,
        id: str,
        name: str,
        description: Optional[str] = None,
        expires_at_time: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateLiveSharingLinkResponse:
        r"""Update non-expired Live Sharing Link

        Update Live Sharing Link.

        <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Live Sharing Links** under the Driver Workflow category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param id: Unique identifier for the Live Sharing Link.
        :param name: Name of the Live Sharing Link.
        :param description: Description for the Live Sharing Link (not applicable for 'assetsOnRoute' type).
        :param expires_at_time: Date that this link expires in RFC 3339 format. Can't be set in the past. If not provided then link will never expire.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdateLiveSharingLinkRequest(
            id=id,
            live_sharing_links_update_live_sharing_link_request_body=models.LiveSharingLinksUpdateLiveSharingLinkRequestBody(
                description=description,
                expires_at_time=expires_at_time,
                name=name,
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/live-shares",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.live_sharing_links_update_live_sharing_link_request_body,
                False,
                False,
                "json",
                models.LiveSharingLinksUpdateLiveSharingLinkRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="updateLiveSharingLink",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.LiveSharingLinksUpdateLiveSharingLinkResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkUnauthorizedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkNotFoundErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkTooManyRequestsErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkInternalServerErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkNotImplementedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkBadGatewayErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkServiceUnavailableErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LiveSharingLinksUpdateLiveSharingLinkGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksUpdateLiveSharingLinkBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def create_live_sharing_link(
        self,
        *,
        name: str,
        type_: models.LiveSharingLinksCreateLiveSharingLinkRequestBodyType,
        assets_location_link_config: Optional[
            Union[
                models.AssetsLocationLinkConfigObject,
                models.AssetsLocationLinkConfigObjectTypedDict,
            ]
        ] = None,
        assets_near_location_link_config: Optional[
            Union[
                models.AssetsNearLocationLinkConfigObject,
                models.AssetsNearLocationLinkConfigObjectTypedDict,
            ]
        ] = None,
        assets_on_route_link_config: Optional[
            Union[
                models.AssetsOnRouteLinkConfigObject,
                models.AssetsOnRouteLinkConfigObjectTypedDict,
            ]
        ] = None,
        description: Optional[str] = None,
        expires_at_time: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateLiveSharingLinkResponse:
        r"""Create Live Sharing Link

        Create Live Sharing Link.

        <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Live Sharing Links** under the Driver Workflow category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param name: Name of the Live Sharing Link.
        :param type: Type of the Live Sharing Link. This field specifies which one of '<type>LinkConfig' objects will be used to configure the sharing link.  Valid values: `assetsLocation`, `assetsNearLocation`, `assetsOnRoute`
        :param assets_location_link_config: Configuration details specific to the 'By Asset' Live Sharing Link.
        :param assets_near_location_link_config: Configuration details specific to the 'By Location' Live Sharing Link.
        :param assets_on_route_link_config: Configuration details specific to the 'By Recurring Route' Live Sharing Link.
        :param description: Description for the Live Sharing Link (not applicable for 'assetsOnRoute' type).
        :param expires_at_time: Date that this link expires in RFC 3339 format. Can't be set in the past. If not provided then link will never expire.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.LiveSharingLinksCreateLiveSharingLinkRequestBody(
            assets_location_link_config=utils.get_pydantic_model(
                assets_location_link_config,
                Optional[models.AssetsLocationLinkConfigObject],
            ),
            assets_near_location_link_config=utils.get_pydantic_model(
                assets_near_location_link_config,
                Optional[models.AssetsNearLocationLinkConfigObject],
            ),
            assets_on_route_link_config=utils.get_pydantic_model(
                assets_on_route_link_config,
                Optional[models.AssetsOnRouteLinkConfigObject],
            ),
            description=description,
            expires_at_time=expires_at_time,
            name=name,
            type=type_,
        )

        req = self._build_request(
            method="POST",
            path="/live-shares",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.LiveSharingLinksCreateLiveSharingLinkRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="createLiveSharingLink",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.LiveSharingLinksCreateLiveSharingLinkResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkUnauthorizedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkNotFoundErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkTooManyRequestsErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkInternalServerErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkNotImplementedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkBadGatewayErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkServiceUnavailableErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_live_sharing_link_async(
        self,
        *,
        name: str,
        type_: models.LiveSharingLinksCreateLiveSharingLinkRequestBodyType,
        assets_location_link_config: Optional[
            Union[
                models.AssetsLocationLinkConfigObject,
                models.AssetsLocationLinkConfigObjectTypedDict,
            ]
        ] = None,
        assets_near_location_link_config: Optional[
            Union[
                models.AssetsNearLocationLinkConfigObject,
                models.AssetsNearLocationLinkConfigObjectTypedDict,
            ]
        ] = None,
        assets_on_route_link_config: Optional[
            Union[
                models.AssetsOnRouteLinkConfigObject,
                models.AssetsOnRouteLinkConfigObjectTypedDict,
            ]
        ] = None,
        description: Optional[str] = None,
        expires_at_time: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateLiveSharingLinkResponse:
        r"""Create Live Sharing Link

        Create Live Sharing Link.

        <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Live Sharing Links** under the Driver Workflow category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param name: Name of the Live Sharing Link.
        :param type: Type of the Live Sharing Link. This field specifies which one of '<type>LinkConfig' objects will be used to configure the sharing link.  Valid values: `assetsLocation`, `assetsNearLocation`, `assetsOnRoute`
        :param assets_location_link_config: Configuration details specific to the 'By Asset' Live Sharing Link.
        :param assets_near_location_link_config: Configuration details specific to the 'By Location' Live Sharing Link.
        :param assets_on_route_link_config: Configuration details specific to the 'By Recurring Route' Live Sharing Link.
        :param description: Description for the Live Sharing Link (not applicable for 'assetsOnRoute' type).
        :param expires_at_time: Date that this link expires in RFC 3339 format. Can't be set in the past. If not provided then link will never expire.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.LiveSharingLinksCreateLiveSharingLinkRequestBody(
            assets_location_link_config=utils.get_pydantic_model(
                assets_location_link_config,
                Optional[models.AssetsLocationLinkConfigObject],
            ),
            assets_near_location_link_config=utils.get_pydantic_model(
                assets_near_location_link_config,
                Optional[models.AssetsNearLocationLinkConfigObject],
            ),
            assets_on_route_link_config=utils.get_pydantic_model(
                assets_on_route_link_config,
                Optional[models.AssetsOnRouteLinkConfigObject],
            ),
            description=description,
            expires_at_time=expires_at_time,
            name=name,
            type=type_,
        )

        req = self._build_request_async(
            method="POST",
            path="/live-shares",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.LiveSharingLinksCreateLiveSharingLinkRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="createLiveSharingLink",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.LiveSharingLinksCreateLiveSharingLinkResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkUnauthorizedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkNotFoundErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkMethodNotAllowedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkTooManyRequestsErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkInternalServerErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkNotImplementedErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkBadGatewayErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkServiceUnavailableErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkGatewayTimeoutErrorResponseBodyData,
            )
            raise models.LiveSharingLinksCreateLiveSharingLinkGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.LiveSharingLinksCreateLiveSharingLinkBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
