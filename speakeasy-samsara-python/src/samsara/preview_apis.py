"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from samsara import models, utils
from samsara._hooks import HookContext
from samsara.types import OptionalNullable, UNSET
from samsara.utils import get_security_from_env
from typing import Any, List, Mapping, Optional


class PreviewAPIs(BaseSDK):
    def list_uploaded_media(
        self,
        *,
        start_time: str,
        end_time: str,
        vehicle_ids: Optional[str] = None,
        inputs: Optional[List[models.QueryParamInputs]] = None,
        media_types: Optional[List[models.MediaTypes]] = None,
        trigger_reasons: Optional[List[models.TriggerReasons]] = None,
        tag_ids: Optional[str] = None,
        parent_tag_ids: Optional[str] = None,
        available_after_time: Optional[str] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListUploadedMediaResponse:
        r"""[preview] List uploaded media by time range.

        This endpoint returns a list of all uploaded media (video and still images) matching query parameters. Additional media can be retrieved with the [Create a media retrieval request](https://developers.samsara.com/reference/postmediaretrieval) endpoint, and they will be included in the list after they are uploaded. Urls provided by this endpoint expire in 8 hours.

        <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Preview** under the  category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param start_time: A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param end_time: An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param vehicle_ids: A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`
        :param inputs: A list of desired camera inputs for which to return captured media. If empty, media for all available inputs will be returned.
        :param media_types: A list of desired media types for which to return captured media. If empty, media for all available media types will be returned.
        :param trigger_reasons: A list of desired trigger reasons for which to return captured media. If empty, media for all available trigger reasons will be returned.
        :param tag_ids: A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`
        :param parent_tag_ids: A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`
        :param available_after_time: A timestamp in RFC 3339 format that can act as a cursor to track which media has previously been retrieved; only media whose availableAtTime comes after this parameter will be returned. Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListUploadedMediaRequest(
            vehicle_ids=vehicle_ids,
            inputs=inputs,
            media_types=media_types,
            trigger_reasons=trigger_reasons,
            tag_ids=tag_ids,
            parent_tag_ids=parent_tag_ids,
            start_time=start_time,
            end_time=end_time,
            available_after_time=available_after_time,
            after=after,
        )

        req = self._build_request(
            method="GET",
            path="/preview/cameras/media",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="listUploadedMedia",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.MediaRetrievalListUploadedMediaResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaUnauthorizedErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaNotFoundErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaMethodNotAllowedErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaTooManyRequestsErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaInternalServerErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaNotImplementedErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaBadGatewayErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaServiceUnavailableErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaGatewayTimeoutErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_uploaded_media_async(
        self,
        *,
        start_time: str,
        end_time: str,
        vehicle_ids: Optional[str] = None,
        inputs: Optional[List[models.QueryParamInputs]] = None,
        media_types: Optional[List[models.MediaTypes]] = None,
        trigger_reasons: Optional[List[models.TriggerReasons]] = None,
        tag_ids: Optional[str] = None,
        parent_tag_ids: Optional[str] = None,
        available_after_time: Optional[str] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListUploadedMediaResponse:
        r"""[preview] List uploaded media by time range.

        This endpoint returns a list of all uploaded media (video and still images) matching query parameters. Additional media can be retrieved with the [Create a media retrieval request](https://developers.samsara.com/reference/postmediaretrieval) endpoint, and they will be included in the list after they are uploaded. Urls provided by this endpoint expire in 8 hours.

        <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Preview** under the  category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param start_time: A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param end_time: An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
        :param vehicle_ids: A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`
        :param inputs: A list of desired camera inputs for which to return captured media. If empty, media for all available inputs will be returned.
        :param media_types: A list of desired media types for which to return captured media. If empty, media for all available media types will be returned.
        :param trigger_reasons: A list of desired trigger reasons for which to return captured media. If empty, media for all available trigger reasons will be returned.
        :param tag_ids: A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`
        :param parent_tag_ids: A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`
        :param available_after_time: A timestamp in RFC 3339 format that can act as a cursor to track which media has previously been retrieved; only media whose availableAtTime comes after this parameter will be returned. Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListUploadedMediaRequest(
            vehicle_ids=vehicle_ids,
            inputs=inputs,
            media_types=media_types,
            trigger_reasons=trigger_reasons,
            tag_ids=tag_ids,
            parent_tag_ids=parent_tag_ids,
            start_time=start_time,
            end_time=end_time,
            available_after_time=available_after_time,
            after=after,
        )

        req = self._build_request_async(
            method="GET",
            path="/preview/cameras/media",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="listUploadedMedia",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.MediaRetrievalListUploadedMediaResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaUnauthorizedErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaNotFoundErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaMethodNotAllowedErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaTooManyRequestsErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaInternalServerErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaNotImplementedErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaBadGatewayErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaServiceUnavailableErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaGatewayTimeoutErrorResponseBodyData,
            )
            raise models.MediaRetrievalListUploadedMediaGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.MediaRetrievalListUploadedMediaBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_custom_report_configs(
        self,
        *,
        after: Optional[str] = None,
        limit: Optional[int] = 100,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetCustomReportConfigsResponse:
        r"""[preview] Get custom report configs

        Get paginated custom report configs created in the organization.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Custom Reports** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param limit: The limit for how many reports will be in the response. Default and max for this value is 100 objects.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetCustomReportConfigsRequest(
            after=after,
            limit=limit,
        )

        req = self._build_request(
            method="GET",
            path="/preview/custom-reports/configs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getCustomReportConfigs",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CustomReportsGetCustomReportConfigsResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsUnauthorizedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsNotFoundErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsMethodNotAllowedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsTooManyRequestsErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsInternalServerErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsNotImplementedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsBadGatewayErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsServiceUnavailableErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsGatewayTimeoutErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_custom_report_configs_async(
        self,
        *,
        after: Optional[str] = None,
        limit: Optional[int] = 100,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetCustomReportConfigsResponse:
        r"""[preview] Get custom report configs

        Get paginated custom report configs created in the organization.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Custom Reports** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param limit: The limit for how many reports will be in the response. Default and max for this value is 100 objects.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetCustomReportConfigsRequest(
            after=after,
            limit=limit,
        )

        req = self._build_request_async(
            method="GET",
            path="/preview/custom-reports/configs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getCustomReportConfigs",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CustomReportsGetCustomReportConfigsResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsUnauthorizedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsNotFoundErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsMethodNotAllowedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsTooManyRequestsErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsInternalServerErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsNotImplementedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsBadGatewayErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsServiceUnavailableErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsGatewayTimeoutErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportConfigsGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportConfigsBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_custom_report_runs(
        self,
        *,
        custom_report_ids: Optional[List[str]] = None,
        ids: Optional[List[str]] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetCustomReportRunsResponse:
        r"""[preview] Get custom report runs

        Get all custom report runs with the provided IDs or customReportIds.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Custom Reports** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param custom_report_ids: Required array of custom report IDs for the custom report runs wanted. Only one of customReportIds or ids is allowed.
        :param ids: Required array of custom report run IDs to fetch. Only one of ids or customReportIds is allowed.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetCustomReportRunsRequest(
            custom_report_ids=custom_report_ids,
            ids=ids,
            after=after,
        )

        req = self._build_request(
            method="GET",
            path="/preview/custom-reports/runs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getCustomReportRuns",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CustomReportsGetCustomReportRunsResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsUnauthorizedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsNotFoundErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsMethodNotAllowedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsTooManyRequestsErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsInternalServerErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsNotImplementedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsBadGatewayErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsServiceUnavailableErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsGatewayTimeoutErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_custom_report_runs_async(
        self,
        *,
        custom_report_ids: Optional[List[str]] = None,
        ids: Optional[List[str]] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetCustomReportRunsResponse:
        r"""[preview] Get custom report runs

        Get all custom report runs with the provided IDs or customReportIds.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Custom Reports** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param custom_report_ids: Required array of custom report IDs for the custom report runs wanted. Only one of customReportIds or ids is allowed.
        :param ids: Required array of custom report run IDs to fetch. Only one of ids or customReportIds is allowed.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetCustomReportRunsRequest(
            custom_report_ids=custom_report_ids,
            ids=ids,
            after=after,
        )

        req = self._build_request_async(
            method="GET",
            path="/preview/custom-reports/runs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getCustomReportRuns",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CustomReportsGetCustomReportRunsResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsUnauthorizedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsNotFoundErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsMethodNotAllowedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsTooManyRequestsErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsInternalServerErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsNotImplementedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsBadGatewayErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsServiceUnavailableErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsGatewayTimeoutErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunsGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunsBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def post_custom_report_run(
        self,
        *,
        custom_report_id: str,
        end_time: datetime,
        start_time: datetime,
        attribute_value_ids: Optional[List[str]] = None,
        tag_ids: Optional[List[int]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PostCustomReportRunResponse:
        r"""[preview] Create a custom report run

        Create a custom report run which then gets queued up to generate custom report data for the report run.

        <b>Rate limit:</b> 240 requests/day (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Custom Reports** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param custom_report_id: Required unique ID for the custom report linked to this run.
        :param end_time: The end time of the custom report run in RFC 3339 format.
        :param start_time: The start time of the custom report run in RFC 3339 format.
        :param attribute_value_ids: The optional array of attribute value ids to filter the custom report run by.
        :param tag_ids: The optional array of tag ids to filter the custom report run by.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CustomReportsPostCustomReportRunRequestBody(
            attribute_value_ids=attribute_value_ids,
            custom_report_id=custom_report_id,
            end_time=end_time,
            start_time=start_time,
            tag_ids=tag_ids,
        )

        req = self._build_request(
            method="POST",
            path="/preview/custom-reports/runs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.CustomReportsPostCustomReportRunRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="postCustomReportRun",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CustomReportsPostCustomReportRunResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunUnauthorizedErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunNotFoundErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunMethodNotAllowedErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunTooManyRequestsErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunInternalServerErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunNotImplementedErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunBadGatewayErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunServiceUnavailableErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunGatewayTimeoutErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def post_custom_report_run_async(
        self,
        *,
        custom_report_id: str,
        end_time: datetime,
        start_time: datetime,
        attribute_value_ids: Optional[List[str]] = None,
        tag_ids: Optional[List[int]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PostCustomReportRunResponse:
        r"""[preview] Create a custom report run

        Create a custom report run which then gets queued up to generate custom report data for the report run.

        <b>Rate limit:</b> 240 requests/day (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Custom Reports** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param custom_report_id: Required unique ID for the custom report linked to this run.
        :param end_time: The end time of the custom report run in RFC 3339 format.
        :param start_time: The start time of the custom report run in RFC 3339 format.
        :param attribute_value_ids: The optional array of attribute value ids to filter the custom report run by.
        :param tag_ids: The optional array of tag ids to filter the custom report run by.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CustomReportsPostCustomReportRunRequestBody(
            attribute_value_ids=attribute_value_ids,
            custom_report_id=custom_report_id,
            end_time=end_time,
            start_time=start_time,
            tag_ids=tag_ids,
        )

        req = self._build_request_async(
            method="POST",
            path="/preview/custom-reports/runs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request,
                False,
                False,
                "json",
                models.CustomReportsPostCustomReportRunRequestBody,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="postCustomReportRun",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CustomReportsPostCustomReportRunResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunUnauthorizedErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunNotFoundErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunMethodNotAllowedErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunTooManyRequestsErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunInternalServerErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunNotImplementedErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunBadGatewayErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunServiceUnavailableErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunGatewayTimeoutErrorResponseBodyData,
            )
            raise models.CustomReportsPostCustomReportRunGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.CustomReportsPostCustomReportRunBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_custom_report_run_data(
        self,
        *,
        id: Optional[str] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetCustomReportRunDataResponse:
        r"""[preview] Get custom report run data

        This endpoint will return the custom report data for a given custom report run ID. For more information regarding custom report columns, please see our [KB article section on Custom Report Fields](https://kb.samsara.com/hc/en-us/articles/360052711232-Manage-Custom-Reports).

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Custom Reports** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param id: The ID of the specified run for the requested custom report.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetCustomReportRunDataRequest(
            id=id,
            after=after,
        )

        req = self._build_request(
            method="GET",
            path="/preview/custom-reports/runs/data",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getCustomReportRunData",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CustomReportsGetCustomReportRunDataResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataUnauthorizedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataNotFoundErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataMethodNotAllowedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataTooManyRequestsErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataInternalServerErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataNotImplementedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataBadGatewayErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataServiceUnavailableErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataGatewayTimeoutErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_custom_report_run_data_async(
        self,
        *,
        id: Optional[str] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetCustomReportRunDataResponse:
        r"""[preview] Get custom report run data

        This endpoint will return the custom report data for a given custom report run ID. For more information regarding custom report columns, please see our [KB article section on Custom Report Fields](https://kb.samsara.com/hc/en-us/articles/360052711232-Manage-Custom-Reports).

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Custom Reports** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param id: The ID of the specified run for the requested custom report.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetCustomReportRunDataRequest(
            id=id,
            after=after,
        )

        req = self._build_request_async(
            method="GET",
            path="/preview/custom-reports/runs/data",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getCustomReportRunData",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CustomReportsGetCustomReportRunDataResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataUnauthorizedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataNotFoundErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataMethodNotAllowedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataTooManyRequestsErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataInternalServerErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataNotImplementedErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataBadGatewayErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataServiceUnavailableErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataGatewayTimeoutErrorResponseBodyData,
            )
            raise models.CustomReportsGetCustomReportRunDataGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.CustomReportsGetCustomReportRunDataBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_driver_efficiency_by_drivers(
        self,
        *,
        start_time: str,
        end_time: str,
        driver_ids: Optional[List[str]] = None,
        data_formats: Optional[List[str]] = None,
        tag_ids: Optional[str] = None,
        parent_tag_ids: Optional[str] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDriverEfficiencyByDriversResponse:
        r"""[preview] Get Driver efficiency data grouped by drivers.

        This endpoint will return driver efficiency data that has been collected for your organization and grouped by drivers based on the time parameters passed in. Results are paginated.

        <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Driver Efficiency** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param start_time: A start time in RFC 3339 format. Must be in multiple of hours and at least 1 day before endTime. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-11T19:00:00Z, 2015-09-12T14:00:00-04:00).
        :param end_time: An end time in RFC 3339 format. Must be in multiple of hours and no later than 3 hours before the current time. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-13T19:00:00Z, 2015-09-15T14:00:00-04:00).
        :param driver_ids: A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: `driverIds=1234,5678,payroll:4841`
        :param data_formats: A comma-separated list of data formats you want to fetch. Valid values: `score`, `raw` and `percentage`. The default data format is `score`. Example: `dataFormats=raw,score`
        :param tag_ids: A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`
        :param parent_tag_ids: A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDriverEfficiencyByDriversRequest(
            start_time=start_time,
            end_time=end_time,
            driver_ids=driver_ids,
            data_formats=data_formats,
            tag_ids=tag_ids,
            parent_tag_ids=parent_tag_ids,
            after=after,
        )

        req = self._build_request(
            method="GET",
            path="/preview/driver-efficiency/drivers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getDriverEfficiencyByDrivers",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversResponseBody,
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversUnauthorizedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversNotFoundErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversMethodNotAllowedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversTooManyRequestsErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversInternalServerErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversNotImplementedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversBadGatewayErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversServiceUnavailableErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversGatewayTimeoutErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_driver_efficiency_by_drivers_async(
        self,
        *,
        start_time: str,
        end_time: str,
        driver_ids: Optional[List[str]] = None,
        data_formats: Optional[List[str]] = None,
        tag_ids: Optional[str] = None,
        parent_tag_ids: Optional[str] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDriverEfficiencyByDriversResponse:
        r"""[preview] Get Driver efficiency data grouped by drivers.

        This endpoint will return driver efficiency data that has been collected for your organization and grouped by drivers based on the time parameters passed in. Results are paginated.

        <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Driver Efficiency** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param start_time: A start time in RFC 3339 format. Must be in multiple of hours and at least 1 day before endTime. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-11T19:00:00Z, 2015-09-12T14:00:00-04:00).
        :param end_time: An end time in RFC 3339 format. Must be in multiple of hours and no later than 3 hours before the current time. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-13T19:00:00Z, 2015-09-15T14:00:00-04:00).
        :param driver_ids: A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: `driverIds=1234,5678,payroll:4841`
        :param data_formats: A comma-separated list of data formats you want to fetch. Valid values: `score`, `raw` and `percentage`. The default data format is `score`. Example: `dataFormats=raw,score`
        :param tag_ids: A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`
        :param parent_tag_ids: A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDriverEfficiencyByDriversRequest(
            start_time=start_time,
            end_time=end_time,
            driver_ids=driver_ids,
            data_formats=data_formats,
            tag_ids=tag_ids,
            parent_tag_ids=parent_tag_ids,
            after=after,
        )

        req = self._build_request_async(
            method="GET",
            path="/preview/driver-efficiency/drivers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getDriverEfficiencyByDrivers",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversResponseBody,
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversUnauthorizedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversNotFoundErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversMethodNotAllowedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversTooManyRequestsErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversInternalServerErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversNotImplementedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversBadGatewayErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversServiceUnavailableErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversGatewayTimeoutErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByDriversGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByDriversBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_driver_efficiency_by_vehicles(
        self,
        *,
        start_time: str,
        end_time: str,
        vehicle_ids: Optional[str] = None,
        data_formats: Optional[List[str]] = None,
        tag_ids: Optional[str] = None,
        parent_tag_ids: Optional[str] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDriverEfficiencyByVehiclesResponse:
        r"""[preview] Get Driver efficiency data grouped by vehicles.

        This endpoint will return driver efficiency data that has been collected for your organization and grouped by vehicle drivers used based on the time parameters passed in. Results are paginated.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Driver Efficiency** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param start_time: A start time in RFC 3339 format. Must be in multiple of hours and at least 1 day before endTime. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-11T19:00:00Z, 2015-09-12T14:00:00-04:00).
        :param end_time: An end time in RFC 3339 format. Must be in multiple of hours and no later than 3 hours before the current time. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-13T19:00:00Z, 2015-09-15T14:00:00-04:00).
        :param vehicle_ids: A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`
        :param data_formats: A comma-separated list of data formats you want to fetch. Valid values: `score`, `raw` and `percentage`. The default data format is `score`. Example: `dataFormats=raw,score`
        :param tag_ids: A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`
        :param parent_tag_ids: A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDriverEfficiencyByVehiclesRequest(
            start_time=start_time,
            end_time=end_time,
            vehicle_ids=vehicle_ids,
            data_formats=data_formats,
            tag_ids=tag_ids,
            parent_tag_ids=parent_tag_ids,
            after=after,
        )

        req = self._build_request(
            method="GET",
            path="/preview/driver-efficiency/vehicles",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getDriverEfficiencyByVehicles",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesResponseBody,
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesUnauthorizedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesNotFoundErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesMethodNotAllowedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesTooManyRequestsErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesInternalServerErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesNotImplementedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesBadGatewayErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesServiceUnavailableErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesGatewayTimeoutErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_driver_efficiency_by_vehicles_async(
        self,
        *,
        start_time: str,
        end_time: str,
        vehicle_ids: Optional[str] = None,
        data_formats: Optional[List[str]] = None,
        tag_ids: Optional[str] = None,
        parent_tag_ids: Optional[str] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDriverEfficiencyByVehiclesResponse:
        r"""[preview] Get Driver efficiency data grouped by vehicles.

        This endpoint will return driver efficiency data that has been collected for your organization and grouped by vehicle drivers used based on the time parameters passed in. Results are paginated.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Driver Efficiency** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param start_time: A start time in RFC 3339 format. Must be in multiple of hours and at least 1 day before endTime. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-11T19:00:00Z, 2015-09-12T14:00:00-04:00).
        :param end_time: An end time in RFC 3339 format. Must be in multiple of hours and no later than 3 hours before the current time. Timezones are supported. Note that the most recent 72 hours of data may still be processing and is subject to change and latency, so it is not recommended to request data for the most recent 72 hours. (Examples: 2019-06-13T19:00:00Z, 2015-09-15T14:00:00-04:00).
        :param vehicle_ids: A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: `vehicleIds=1234,5678,samsara.vin:1HGBH41JXMN109186`
        :param data_formats: A comma-separated list of data formats you want to fetch. Valid values: `score`, `raw` and `percentage`. The default data format is `score`. Example: `dataFormats=raw,score`
        :param tag_ids: A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`
        :param parent_tag_ids: A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDriverEfficiencyByVehiclesRequest(
            start_time=start_time,
            end_time=end_time,
            vehicle_ids=vehicle_ids,
            data_formats=data_formats,
            tag_ids=tag_ids,
            parent_tag_ids=parent_tag_ids,
            after=after,
        )

        req = self._build_request_async(
            method="GET",
            path="/preview/driver-efficiency/vehicles",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getDriverEfficiencyByVehicles",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesResponseBody,
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesUnauthorizedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesNotFoundErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesMethodNotAllowedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesTooManyRequestsErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesInternalServerErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesNotImplementedErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesBadGatewayErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesServiceUnavailableErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesGatewayTimeoutErrorResponseBodyData,
            )
            raise models.DriverEfficiencyGetDriverEfficiencyByVehiclesGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.DriverEfficiencyGetDriverEfficiencyByVehiclesBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_form_templates(
        self,
        *,
        ids: Optional[List[str]] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetFormTemplatesResponse:
        r"""[preview] Get a list of form templates.

        Returns a list of the organization's form templates.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Preview** under the  category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param ids: A comma-separated list containing up to 100 template IDs to filter on.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetFormTemplatesRequest(
            ids=ids,
            after=after,
        )

        req = self._build_request(
            method="GET",
            path="/preview/form-templates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getFormTemplates",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.FormTemplatesGetFormTemplatesResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesUnauthorizedErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesNotFoundErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesMethodNotAllowedErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesTooManyRequestsErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesInternalServerErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesNotImplementedErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesBadGatewayErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesServiceUnavailableErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesGatewayTimeoutErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_form_templates_async(
        self,
        *,
        ids: Optional[List[str]] = None,
        after: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetFormTemplatesResponse:
        r"""[preview] Get a list of form templates.

        Returns a list of the organization's form templates.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Preview** under the  category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param ids: A comma-separated list containing up to 100 template IDs to filter on.
        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetFormTemplatesRequest(
            ids=ids,
            after=after,
        )

        req = self._build_request_async(
            method="GET",
            path="/preview/form-templates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getFormTemplates",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.FormTemplatesGetFormTemplatesResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesUnauthorizedErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesNotFoundErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesMethodNotAllowedErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesTooManyRequestsErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesInternalServerErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesNotImplementedErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesBadGatewayErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesServiceUnavailableErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesGatewayTimeoutErrorResponseBodyData,
            )
            raise models.FormTemplatesGetFormTemplatesGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.FormTemplatesGetFormTemplatesBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def delete_training_assignments(
        self,
        *,
        ids: List[str],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[
        models.TrainingAssignmentsDeleteTrainingAssignmentsBadRequestErrorResponseBody
    ]:
        r"""[preview] Delete training assignments.

        This endpoint supports batch deletion operations. The response does not indicate which specific deletions, if any, have failed. On a successful deletion or partial failure, a ‘204 No Content’ status is returned.

        <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Training Assignments** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param ids: String of comma separated assignments IDs. Max value for this value is 100 objects .Example: `ids=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteTrainingAssignmentsRequest(
            ids=ids,
        )

        req = self._build_request(
            method="DELETE",
            path="/preview/training-assignments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="deleteTrainingAssignments",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return None
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsUnauthorizedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsNotFoundErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsMethodNotAllowedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsTooManyRequestsErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsInternalServerErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsNotImplementedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsBadGatewayErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsServiceUnavailableErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsGatewayTimeoutErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def delete_training_assignments_async(
        self,
        *,
        ids: List[str],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[
        models.TrainingAssignmentsDeleteTrainingAssignmentsBadRequestErrorResponseBody
    ]:
        r"""[preview] Delete training assignments.

        This endpoint supports batch deletion operations. The response does not indicate which specific deletions, if any, have failed. On a successful deletion or partial failure, a ‘204 No Content’ status is returned.

        <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Training Assignments** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param ids: String of comma separated assignments IDs. Max value for this value is 100 objects .Example: `ids=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteTrainingAssignmentsRequest(
            ids=ids,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/preview/training-assignments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="deleteTrainingAssignments",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return None
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsUnauthorizedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsNotFoundErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsMethodNotAllowedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsTooManyRequestsErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsInternalServerErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsNotImplementedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsBadGatewayErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsServiceUnavailableErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsGatewayTimeoutErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsDeleteTrainingAssignmentsGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsDeleteTrainingAssignmentsBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def patch_training_assignments(
        self,
        *,
        ids: List[str],
        due_at_time: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PatchTrainingAssignmentsResponse:
        r"""[preview] Update training assignments.

        **Preview:** This endpoint is in preview and is likely to change before being broadly available. Reach out to your Samsara Representative to have Training APIs enabled for your organization.

        <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Training Assignments** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param ids: String of comma separated assignments IDs. Max value for this value is 100 objects .Example: `ids=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`
        :param due_at_time: Due date of the training assignment in RFC 3339 format. Millisecond precision and timezones are supported.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.PatchTrainingAssignmentsRequest(
            ids=ids,
            due_at_time=due_at_time,
        )

        req = self._build_request(
            method="PATCH",
            path="/preview/training-assignments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="patchTrainingAssignments",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsResponseBody,
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsUnauthorizedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsNotFoundErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsMethodNotAllowedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsTooManyRequestsErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsInternalServerErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsNotImplementedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsBadGatewayErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsServiceUnavailableErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsGatewayTimeoutErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def patch_training_assignments_async(
        self,
        *,
        ids: List[str],
        due_at_time: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PatchTrainingAssignmentsResponse:
        r"""[preview] Update training assignments.

        **Preview:** This endpoint is in preview and is likely to change before being broadly available. Reach out to your Samsara Representative to have Training APIs enabled for your organization.

        <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Write Training Assignments** under the Closed Beta category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param ids: String of comma separated assignments IDs. Max value for this value is 100 objects .Example: `ids=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`
        :param due_at_time: Due date of the training assignment in RFC 3339 format. Millisecond precision and timezones are supported.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.PatchTrainingAssignmentsRequest(
            ids=ids,
            due_at_time=due_at_time,
        )

        req = self._build_request_async(
            method="PATCH",
            path="/preview/training-assignments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="patchTrainingAssignments",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsResponseBody,
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsUnauthorizedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsNotFoundErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsMethodNotAllowedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsTooManyRequestsErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsInternalServerErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsNotImplementedErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsBadGatewayErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsServiceUnavailableErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsGatewayTimeoutErrorResponseBodyData,
            )
            raise models.TrainingAssignmentsPatchTrainingAssignmentsGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.TrainingAssignmentsPatchTrainingAssignmentsBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_training_courses(
        self,
        *,
        after: Optional[str] = None,
        course_ids: Optional[List[str]] = None,
        category_ids: Optional[List[str]] = None,
        status: Optional[List[str]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetTrainingCoursesResponse:
        r"""[preview] Get a list of filtered training courses.

        Returns all training courses data. Results are paginated.
        Courses in the ‘draft’ status are excluded from the data returned by this endpoint.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Preview** under the  category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param course_ids: Optional string of comma separated course IDs. If course ID is present, training assignments for the specified course ID(s) will be returned. Max value for this value is 100 objects. Defaults to returning all courses. Example: `courseIds=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`
        :param category_ids: Optional string of comma separated course category IDs. If courseCategoryId is present, training courses for the specified course category(s) will be returned. Max value for this value is 100 objects. Defaults to returning all courses.  Example: `categoryIds=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`
        :param status: Optional string of comma separated values. If status is present, training courses with the specified status(s) will be returned. Valid values: “published”, “deleted”, “archived”. Defaults to returning all courses.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetTrainingCoursesRequest(
            after=after,
            course_ids=course_ids,
            category_ids=category_ids,
            status=status,
        )

        req = self._build_request(
            method="GET",
            path="/preview/training-courses",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getTrainingCourses",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.TrainingCoursesGetTrainingCoursesResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesUnauthorizedErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesNotFoundErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesMethodNotAllowedErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesTooManyRequestsErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesInternalServerErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesNotImplementedErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesBadGatewayErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesServiceUnavailableErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesGatewayTimeoutErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_training_courses_async(
        self,
        *,
        after: Optional[str] = None,
        course_ids: Optional[List[str]] = None,
        category_ids: Optional[List[str]] = None,
        status: Optional[List[str]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetTrainingCoursesResponse:
        r"""[preview] Get a list of filtered training courses.

        Returns all training courses data. Results are paginated.
        Courses in the ‘draft’ status are excluded from the data returned by this endpoint.

        <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href=\"https://developers.samsara.com/docs/rate-limits\" target=\"_blank\">here</a>).

        To use this endpoint, select **Read Preview** under the  category when creating or editing an API token. <a href=\"https://developers.samsara.com/docs/authentication#scopes-for-api-tokens\" target=\"_blank\">Learn More.</a>

        Endpoints in this section are in Preview. These APIs are not functional and are instead for soliciting feedback from our API users on the intended design of this API. Additionally, it is not guaranteed that we will be releasing an endpoint included in this section to production. This means that developers should **NOT** rely on these APIs to build business critical applications

        - Samsara may change the structure of a preview API's interface without versioning or any notice to API users.

        - When an endpoint becomes generally available, it will be announced in the API [changelog](https://developers.samsara.com/changelog).


        **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href=\"https://forms.gle/zkD4NCH7HjKb7mm69\" target=\"_blank\">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href=\"https://www.samsara.com/help\" target=\"_blank\">submit a case</a> to our support team.

        :param after: If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
        :param course_ids: Optional string of comma separated course IDs. If course ID is present, training assignments for the specified course ID(s) will be returned. Max value for this value is 100 objects. Defaults to returning all courses. Example: `courseIds=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`
        :param category_ids: Optional string of comma separated course category IDs. If courseCategoryId is present, training courses for the specified course category(s) will be returned. Max value for this value is 100 objects. Defaults to returning all courses.  Example: `categoryIds=a4db8702-79d5-4396-a717-e301d52ecc11,c6490f6a-d84e-49b5-b0ad-b6baae304075`
        :param status: Optional string of comma separated values. If status is present, training courses with the specified status(s) will be returned. Valid values: “published”, “deleted”, “archived”. Defaults to returning all courses.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetTrainingCoursesRequest(
            after=after,
            course_ids=course_ids,
            category_ids=category_ids,
            status=status,
        )

        req = self._build_request_async(
            method="GET",
            path="/preview/training-courses",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getTrainingCourses",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=[
                "401",
                "404",
                "405",
                "429",
                "4XX",
                "500",
                "501",
                "502",
                "503",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.TrainingCoursesGetTrainingCoursesResponseBody
            )
        if utils.match_response(http_res, "401", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesUnauthorizedErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesUnauthorizedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesNotFoundErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesNotFoundErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "405", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesMethodNotAllowedErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesMethodNotAllowedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "429", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesTooManyRequestsErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesTooManyRequestsErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesInternalServerErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesInternalServerErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "501", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesNotImplementedErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesNotImplementedErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "502", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesBadGatewayErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesBadGatewayErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "503", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesServiceUnavailableErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesServiceUnavailableErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "504", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesGatewayTimeoutErrorResponseBodyData,
            )
            raise models.TrainingCoursesGetTrainingCoursesGatewayTimeoutErrorResponseBody(
                data=response_data
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return utils.unmarshal_json(
                http_res.text,
                models.TrainingCoursesGetTrainingCoursesBadRequestErrorResponseBody,
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
