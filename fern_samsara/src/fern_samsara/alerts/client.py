# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .configurations.client import ConfigurationsClient
from .incidents.client import IncidentsClient
from ..types.action_object_request_body import ActionObjectRequestBody
from ..types.scope_object_request_body import ScopeObjectRequestBody
from ..types.workflow_trigger_object_request_body import WorkflowTriggerObjectRequestBody
from ..types.operational_settings_object_request_body import OperationalSettingsObjectRequestBody
from ..core.request_options import RequestOptions
from ..types.alerts_post_configurations_response_body import AlertsPostConfigurationsResponseBody
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.not_found_error import NotFoundError
from ..errors.method_not_allowed_error import MethodNotAllowedError
from ..errors.too_many_requests_error import TooManyRequestsError
from ..errors.internal_server_error import InternalServerError
from ..errors.not_implemented_error import NotImplementedError
from ..errors.bad_gateway_error import BadGatewayError
from ..errors.service_unavailable_error import ServiceUnavailableError
from ..errors.gateway_timeout_error import GatewayTimeoutError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.alerts_patch_configurations_response_body import AlertsPatchConfigurationsResponseBody
from ..core.client_wrapper import AsyncClientWrapper
from .configurations.client import AsyncConfigurationsClient
from .incidents.client import AsyncIncidentsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AlertsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.configurations = ConfigurationsClient(client_wrapper=self._client_wrapper)
        self.incidents = IncidentsClient(client_wrapper=self._client_wrapper)

    def create(
        self,
        *,
        actions: typing.Sequence[ActionObjectRequestBody],
        is_enabled: bool,
        name: str,
        scope: ScopeObjectRequestBody,
        triggers: typing.Sequence[WorkflowTriggerObjectRequestBody],
        external_ids: typing.Optional[typing.Dict[str, str]] = OMIT,
        operational_settings: typing.Optional[OperationalSettingsObjectRequestBody] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsPostConfigurationsResponseBody:
        """
        Creates an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        actions : typing.Sequence[ActionObjectRequestBody]
            An array of actions.

        is_enabled : bool
            Whether the alert is enabled or not.

        name : str
            The custom name of the configuration.

        scope : ScopeObjectRequestBody

        triggers : typing.Sequence[WorkflowTriggerObjectRequestBody]
            An array of triggers.

        external_ids : typing.Optional[typing.Dict[str, str]]
            A map of external ids

        operational_settings : typing.Optional[OperationalSettingsObjectRequestBody]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsPostConfigurationsResponseBody
            OK response.

        Examples
        --------
        from samsara import (
            ActionObjectRequestBody,
            Samsara,
            ScopeObjectRequestBody,
            WorkflowTriggerObjectRequestBody,
        )

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.alerts.create(
            actions=[
                ActionObjectRequestBody(
                    action_type_id=1,
                )
            ],
            is_enabled=True,
            name="My Harsh Event Alert",
            scope=ScopeObjectRequestBody(
                all_=True,
            ),
            triggers=[
                WorkflowTriggerObjectRequestBody(
                    trigger_type_id=1000,
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "alerts/configurations",
            method="POST",
            json={
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[ActionObjectRequestBody], direction="write"
                ),
                "externalIds": external_ids,
                "isEnabled": is_enabled,
                "name": name,
                "operationalSettings": convert_and_respect_annotation_metadata(
                    object_=operational_settings, annotation=OperationalSettingsObjectRequestBody, direction="write"
                ),
                "scope": convert_and_respect_annotation_metadata(
                    object_=scope, annotation=ScopeObjectRequestBody, direction="write"
                ),
                "triggers": convert_and_respect_annotation_metadata(
                    object_=triggers, annotation=typing.Sequence[WorkflowTriggerObjectRequestBody], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AlertsPostConfigurationsResponseBody,
                    parse_obj_as(
                        type_=AlertsPostConfigurationsResponseBody,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, *, id: str, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unqiue Samsara id of the alert configuration.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.alerts.delete(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "alerts/configurations",
            method="DELETE",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        *,
        id: str,
        actions: typing.Optional[typing.Sequence[ActionObjectRequestBody]] = OMIT,
        external_ids: typing.Optional[typing.Dict[str, str]] = OMIT,
        is_enabled: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        operational_settings: typing.Optional[OperationalSettingsObjectRequestBody] = OMIT,
        scope: typing.Optional[ScopeObjectRequestBody] = OMIT,
        triggers: typing.Optional[typing.Sequence[WorkflowTriggerObjectRequestBody]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsPatchConfigurationsResponseBody:
        """
        Updates an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unqiue Samsara id of the alert configuration.

        actions : typing.Optional[typing.Sequence[ActionObjectRequestBody]]
            An array of actions.

        external_ids : typing.Optional[typing.Dict[str, str]]
            A map of external ids

        is_enabled : typing.Optional[bool]
            Whether the alert is enabled or not.

        name : typing.Optional[str]
            The custom name of the configuration.

        operational_settings : typing.Optional[OperationalSettingsObjectRequestBody]

        scope : typing.Optional[ScopeObjectRequestBody]

        triggers : typing.Optional[typing.Sequence[WorkflowTriggerObjectRequestBody]]
            An array of triggers.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsPatchConfigurationsResponseBody
            OK response.

        Examples
        --------
        from samsara import Samsara

        client = Samsara(
            token="YOUR_TOKEN",
        )
        client.alerts.update(
            id="e1c5dffc-c7b7-47b0-a778-6a65de638abf",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "alerts/configurations",
            method="PATCH",
            json={
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[ActionObjectRequestBody], direction="write"
                ),
                "externalIds": external_ids,
                "id": id,
                "isEnabled": is_enabled,
                "name": name,
                "operationalSettings": convert_and_respect_annotation_metadata(
                    object_=operational_settings, annotation=OperationalSettingsObjectRequestBody, direction="write"
                ),
                "scope": convert_and_respect_annotation_metadata(
                    object_=scope, annotation=ScopeObjectRequestBody, direction="write"
                ),
                "triggers": convert_and_respect_annotation_metadata(
                    object_=triggers, annotation=typing.Sequence[WorkflowTriggerObjectRequestBody], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AlertsPatchConfigurationsResponseBody,
                    parse_obj_as(
                        type_=AlertsPatchConfigurationsResponseBody,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAlertsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.configurations = AsyncConfigurationsClient(client_wrapper=self._client_wrapper)
        self.incidents = AsyncIncidentsClient(client_wrapper=self._client_wrapper)

    async def create(
        self,
        *,
        actions: typing.Sequence[ActionObjectRequestBody],
        is_enabled: bool,
        name: str,
        scope: ScopeObjectRequestBody,
        triggers: typing.Sequence[WorkflowTriggerObjectRequestBody],
        external_ids: typing.Optional[typing.Dict[str, str]] = OMIT,
        operational_settings: typing.Optional[OperationalSettingsObjectRequestBody] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsPostConfigurationsResponseBody:
        """
        Creates an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        actions : typing.Sequence[ActionObjectRequestBody]
            An array of actions.

        is_enabled : bool
            Whether the alert is enabled or not.

        name : str
            The custom name of the configuration.

        scope : ScopeObjectRequestBody

        triggers : typing.Sequence[WorkflowTriggerObjectRequestBody]
            An array of triggers.

        external_ids : typing.Optional[typing.Dict[str, str]]
            A map of external ids

        operational_settings : typing.Optional[OperationalSettingsObjectRequestBody]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsPostConfigurationsResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import (
            ActionObjectRequestBody,
            AsyncSamsara,
            ScopeObjectRequestBody,
            WorkflowTriggerObjectRequestBody,
        )

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.alerts.create(
                actions=[
                    ActionObjectRequestBody(
                        action_type_id=1,
                    )
                ],
                is_enabled=True,
                name="My Harsh Event Alert",
                scope=ScopeObjectRequestBody(
                    all_=True,
                ),
                triggers=[
                    WorkflowTriggerObjectRequestBody(
                        trigger_type_id=1000,
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "alerts/configurations",
            method="POST",
            json={
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[ActionObjectRequestBody], direction="write"
                ),
                "externalIds": external_ids,
                "isEnabled": is_enabled,
                "name": name,
                "operationalSettings": convert_and_respect_annotation_metadata(
                    object_=operational_settings, annotation=OperationalSettingsObjectRequestBody, direction="write"
                ),
                "scope": convert_and_respect_annotation_metadata(
                    object_=scope, annotation=ScopeObjectRequestBody, direction="write"
                ),
                "triggers": convert_and_respect_annotation_metadata(
                    object_=triggers, annotation=typing.Sequence[WorkflowTriggerObjectRequestBody], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AlertsPostConfigurationsResponseBody,
                    parse_obj_as(
                        type_=AlertsPostConfigurationsResponseBody,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, *, id: str, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unqiue Samsara id of the alert configuration.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.alerts.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "alerts/configurations",
            method="DELETE",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        *,
        id: str,
        actions: typing.Optional[typing.Sequence[ActionObjectRequestBody]] = OMIT,
        external_ids: typing.Optional[typing.Dict[str, str]] = OMIT,
        is_enabled: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        operational_settings: typing.Optional[OperationalSettingsObjectRequestBody] = OMIT,
        scope: typing.Optional[ScopeObjectRequestBody] = OMIT,
        triggers: typing.Optional[typing.Sequence[WorkflowTriggerObjectRequestBody]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AlertsPatchConfigurationsResponseBody:
        """
        Updates an alert configuration.

         <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).

        To use this endpoint, select **Write Alerts** under the Alerts category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>


         **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.

        Parameters
        ----------
        id : str
            The unqiue Samsara id of the alert configuration.

        actions : typing.Optional[typing.Sequence[ActionObjectRequestBody]]
            An array of actions.

        external_ids : typing.Optional[typing.Dict[str, str]]
            A map of external ids

        is_enabled : typing.Optional[bool]
            Whether the alert is enabled or not.

        name : typing.Optional[str]
            The custom name of the configuration.

        operational_settings : typing.Optional[OperationalSettingsObjectRequestBody]

        scope : typing.Optional[ScopeObjectRequestBody]

        triggers : typing.Optional[typing.Sequence[WorkflowTriggerObjectRequestBody]]
            An array of triggers.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AlertsPatchConfigurationsResponseBody
            OK response.

        Examples
        --------
        import asyncio

        from samsara import AsyncSamsara

        client = AsyncSamsara(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.alerts.update(
                id="e1c5dffc-c7b7-47b0-a778-6a65de638abf",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "alerts/configurations",
            method="PATCH",
            json={
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[ActionObjectRequestBody], direction="write"
                ),
                "externalIds": external_ids,
                "id": id,
                "isEnabled": is_enabled,
                "name": name,
                "operationalSettings": convert_and_respect_annotation_metadata(
                    object_=operational_settings, annotation=OperationalSettingsObjectRequestBody, direction="write"
                ),
                "scope": convert_and_respect_annotation_metadata(
                    object_=scope, annotation=ScopeObjectRequestBody, direction="write"
                ),
                "triggers": convert_and_respect_annotation_metadata(
                    object_=triggers, annotation=typing.Sequence[WorkflowTriggerObjectRequestBody], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AlertsPatchConfigurationsResponseBody,
                    parse_obj_as(
                        type_=AlertsPatchConfigurationsResponseBody,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 501:
                raise NotImplementedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 502:
                raise BadGatewayError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
