# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
import typing
from .v_1_document_field_type_multiple_choice_value_type_metadata import (
    V1DocumentFieldTypeMultipleChoiceValueTypeMetadata,
)
from ..core.serialization import FieldMetadata
from .v_1_document_field_type_number_value_type_metadata import V1DocumentFieldTypeNumberValueTypeMetadata
from .v_1_document_field_type_signature_value_type_metadata import V1DocumentFieldTypeSignatureValueTypeMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DocumentFieldType(UniversalBaseModel):
    label: str = pydantic.Field()
    """
    Name of this field type.
    """

    multiple_choice_value_type_metadata: typing_extensions.Annotated[
        typing.Optional[V1DocumentFieldTypeMultipleChoiceValueTypeMetadata],
        FieldMetadata(alias="multipleChoiceValueTypeMetadata"),
    ] = None
    number_value_type_metadata: typing_extensions.Annotated[
        typing.Optional[V1DocumentFieldTypeNumberValueTypeMetadata], FieldMetadata(alias="numberValueTypeMetadata")
    ] = None
    signature_value_type_metadata: typing_extensions.Annotated[
        typing.Optional[V1DocumentFieldTypeSignatureValueTypeMetadata],
        FieldMetadata(alias="signatureValueTypeMetadata"),
    ] = None
    value_type: typing_extensions.Annotated[str, FieldMetadata(alias="valueType")] = pydantic.Field()
    """
    The type of value this field can have.
    Valid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
