# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class PatchAssetDataOutputsSingleResponseResponseBody(UniversalBaseModel):
    """
    A response that corresponds to an element in the original request body.
    """

    error_message: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="errorMessage")] = (
        pydantic.Field(default=None)
    )
    """
    If the request failed, this displays the error message.
    """

    id: str = pydantic.Field()
    """
    The data output ID.
    """

    status_code: typing_extensions.Annotated[int, FieldMetadata(alias="statusCode")] = pydantic.Field()
    """
    The status code of the request. 200 indicates the request succeeded for this data output. 500 indicates an internal server error.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
