# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DvirDefectBase(UniversalBaseModel):
    comment: typing.Optional[str] = pydantic.Field(default=None)
    """
    The comment describing the type of DVIR defect.
    """

    defect_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="defectType")] = pydantic.Field(
        default=None
    )
    """
    The type of DVIR defect. Possible values: [`AIR_COMPRESSOR`, `AIR_CONDITIONER`, `AIR_LINES`, `BATTERY`, `BELTS_HOSES`, `BRAKE_ACCESSORIES`, `BRAKE_CHECK`, `BRAKE_CONNECTIONS`, `BRAKES`, `CLUTCH`, `COUPLING_DEVICES`, `DEFROSTER_HEATER`, `DOORS`, `DRIVE_LINE`, `EMERGENCY_DOOR_AND_BUZZER`, `ENGINE`, `ENTRANCE_STEPS`, `EXHAUST`, `FIFTH_WHEEL`, `FIRST_AID_KIT`, `FLUID_LEVELS`, `FRAME_ASSEMBLY`, `FRONT_AXLE`, `FUEL_TANKS`, `HORN`, `INTERIOR_AND_FLOOR`, `LANDING_GEAR`, `LIGHTS`, `MIRRORS`, `MUFFLER`, `OIL_PRESSURE`, `OTHER`, `RADIATOR`, `REAR_END`, `REFLECTORS`, `ROOF`, `SAFETY_EQUIPMENT`, `STARTER`, `STEERING`, `STOP_ARM_CONTROL`, `STOP_ARM`, `SUSPENSION`, `TIRE_CHAINS`, `TIRES`, `TRANSMISSION`, `TRIP_RECORDER`, `WHEELS_RIMS`, `WINDOWS`, `WINDSHIELD_WIPERS`, `UNSET`]
    """

    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The id of this defect.
    """

    resolved: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Signifies if this defect is resolved.
    """

    resolved_at: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="resolvedAt")] = pydantic.Field(
        default=None
    )
    """
    Timestamp when this defect was resolved, in UNIX milliseconds.  Will not be returned if the defect is unresolved.
    """

    resolved_by_driver_id: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="resolvedByDriverId")
    ] = pydantic.Field(default=None)
    """
    ID of the driver who resolved this defect. Will not be returned if the defect is unresolved or resolvedByMechanicId is returned.
    """

    resolved_by_mechanic_id: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="resolvedByMechanicId")
    ] = pydantic.Field(default=None)
    """
    ID of the mechanic who resolved this defect. Will not be returned if the defect is unresolved or resolvedByDriverId is returned.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
