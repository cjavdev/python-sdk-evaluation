# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from .v_1_dispatch_route_external_ids import V1DispatchRouteExternalIds
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DispatchRouteBase(UniversalBaseModel):
    actual_end_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time in Unix epoch milliseconds that the route actually ended.
    """

    actual_start_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time in Unix epoch milliseconds that the route actually started.
    """

    complete_last_stop_on_arrival: typing.Optional[bool] = pydantic.Field(default=None)
    """
    When set to true (default), this causes the Route to complete on arrival at the final stop. When set to false, the last stop will capture arrival and departure separately as with other stops.
    """

    driver_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
    """

    external_ids: typing_extensions.Annotated[
        typing.Optional[V1DispatchRouteExternalIds], FieldMetadata(alias="externalIds")
    ] = None
    group_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    Deprecated.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Descriptive name of this route.
    """

    notes: typing.Optional[str] = pydantic.Field(default=None)
    """
    Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\n')can be used for formatting.
    """

    odometer_end_meters: typing.Optional[int] = pydantic.Field(default=None)
    """
    Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.
    """

    odometer_start_meters: typing.Optional[int] = pydantic.Field(default=None)
    """
    Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.
    """

    scheduled_end_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
    """

    scheduled_meters: typing.Optional[int] = pydantic.Field(default=None)
    """
    The distance expected to be traveled for this route in meters.
    """

    scheduled_start_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time in Unix epoch milliseconds that the route is scheduled to start.
    """

    start_location_address: typing.Optional[str] = pydantic.Field(default=None)
    """
    The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
    """

    start_location_address_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
    """

    start_location_lat: typing.Optional[float] = pydantic.Field(default=None)
    """
    Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
    """

    start_location_lng: typing.Optional[float] = pydantic.Field(default=None)
    """
    Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
    """

    start_location_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
    """

    trailer_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
    """

    vehicle_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
