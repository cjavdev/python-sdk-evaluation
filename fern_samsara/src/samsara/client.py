# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import SamsaraEnvironment
import httpx
from .core.client_wrapper import SyncClientWrapper
from .addresses.client import AddressesClient
from .alerts.client import AlertsClient
from .location_and_speed.client import LocationAndSpeedClient
from .attributes.client import AttributesClient
from .beta.client import BetaClient
from .coaching.client import CoachingClient
from .contacts.client import ContactsClient
from .maintenance.client import MaintenanceClient
from .driver_qr_codes.client import DriverQrCodesClient
from .carrier_proposed_assignments.client import CarrierProposedAssignmentsClient
from .documents.client import DocumentsClient
from .driver_vehicle_assignments.client import DriverVehicleAssignmentsClient
from .drivers.client import DriversClient
from .tachograph_eu_only.client import TachographEuOnlyClient
from .legacy.client import LegacyClient
from .equipment.client import EquipmentClient
from .hours_of_service.client import HoursOfServiceClient
from .fuel_and_energy.client import FuelAndEnergyClient
from .ifta.client import IftaClient
from .idling.client import IdlingClient
from .routes.client import RoutesClient
from .safety.client import SafetyClient
from .settings.client import SettingsClient
from .trailers.client import TrailersClient
from .vehicles.client import VehiclesClient
from .vehicle_locations.client import VehicleLocationsClient
from .vehicle_stats.client import VehicleStatsClient
from .gateways.client import GatewaysClient
from .industrial.client import IndustrialClient
from .live_sharing_links.client import LiveSharingLinksClient
from .organization_info.client import OrganizationInfoClient
from .preview.client import PreviewClient
from .tags.client import TagsClient
from .users.client import UsersClient
from .assets.client import AssetsClient
from .dispatch.client import DispatchClient
from .messages.client import MessagesClient
from .trailer_assignments.client import TrailerAssignmentsClient
from .trips.client import TripsClient
from .machines.client import MachinesClient
from .sensors.client import SensorsClient
from .webhooks.client import WebhooksClient
from .auth.client import AuthClient
from .core.client_wrapper import AsyncClientWrapper
from .addresses.client import AsyncAddressesClient
from .alerts.client import AsyncAlertsClient
from .location_and_speed.client import AsyncLocationAndSpeedClient
from .attributes.client import AsyncAttributesClient
from .beta.client import AsyncBetaClient
from .coaching.client import AsyncCoachingClient
from .contacts.client import AsyncContactsClient
from .maintenance.client import AsyncMaintenanceClient
from .driver_qr_codes.client import AsyncDriverQrCodesClient
from .carrier_proposed_assignments.client import AsyncCarrierProposedAssignmentsClient
from .documents.client import AsyncDocumentsClient
from .driver_vehicle_assignments.client import AsyncDriverVehicleAssignmentsClient
from .drivers.client import AsyncDriversClient
from .tachograph_eu_only.client import AsyncTachographEuOnlyClient
from .legacy.client import AsyncLegacyClient
from .equipment.client import AsyncEquipmentClient
from .hours_of_service.client import AsyncHoursOfServiceClient
from .fuel_and_energy.client import AsyncFuelAndEnergyClient
from .ifta.client import AsyncIftaClient
from .idling.client import AsyncIdlingClient
from .routes.client import AsyncRoutesClient
from .safety.client import AsyncSafetyClient
from .settings.client import AsyncSettingsClient
from .trailers.client import AsyncTrailersClient
from .vehicles.client import AsyncVehiclesClient
from .vehicle_locations.client import AsyncVehicleLocationsClient
from .vehicle_stats.client import AsyncVehicleStatsClient
from .gateways.client import AsyncGatewaysClient
from .industrial.client import AsyncIndustrialClient
from .live_sharing_links.client import AsyncLiveSharingLinksClient
from .organization_info.client import AsyncOrganizationInfoClient
from .preview.client import AsyncPreviewClient
from .tags.client import AsyncTagsClient
from .users.client import AsyncUsersClient
from .assets.client import AsyncAssetsClient
from .dispatch.client import AsyncDispatchClient
from .messages.client import AsyncMessagesClient
from .trailer_assignments.client import AsyncTrailerAssignmentsClient
from .trips.client import AsyncTripsClient
from .machines.client import AsyncMachinesClient
from .sensors.client import AsyncSensorsClient
from .webhooks.client import AsyncWebhooksClient
from .auth.client import AsyncAuthClient


class Samsara:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SamsaraEnvironment
        The environment to use for requests from the client. from .environment import SamsaraEnvironment



        Defaults to SamsaraEnvironment.PRODUCTION_API



    token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from samsara import Samsara

    client = Samsara(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SamsaraEnvironment = SamsaraEnvironment.PRODUCTION_API,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.addresses = AddressesClient(client_wrapper=self._client_wrapper)
        self.alerts = AlertsClient(client_wrapper=self._client_wrapper)
        self.location_and_speed = LocationAndSpeedClient(client_wrapper=self._client_wrapper)
        self.attributes = AttributesClient(client_wrapper=self._client_wrapper)
        self.beta = BetaClient(client_wrapper=self._client_wrapper)
        self.coaching = CoachingClient(client_wrapper=self._client_wrapper)
        self.contacts = ContactsClient(client_wrapper=self._client_wrapper)
        self.maintenance = MaintenanceClient(client_wrapper=self._client_wrapper)
        self.driver_qr_codes = DriverQrCodesClient(client_wrapper=self._client_wrapper)
        self.carrier_proposed_assignments = CarrierProposedAssignmentsClient(client_wrapper=self._client_wrapper)
        self.documents = DocumentsClient(client_wrapper=self._client_wrapper)
        self.driver_vehicle_assignments = DriverVehicleAssignmentsClient(client_wrapper=self._client_wrapper)
        self.drivers = DriversClient(client_wrapper=self._client_wrapper)
        self.tachograph_eu_only = TachographEuOnlyClient(client_wrapper=self._client_wrapper)
        self.legacy = LegacyClient(client_wrapper=self._client_wrapper)
        self.equipment = EquipmentClient(client_wrapper=self._client_wrapper)
        self.hours_of_service = HoursOfServiceClient(client_wrapper=self._client_wrapper)
        self.fuel_and_energy = FuelAndEnergyClient(client_wrapper=self._client_wrapper)
        self.ifta = IftaClient(client_wrapper=self._client_wrapper)
        self.idling = IdlingClient(client_wrapper=self._client_wrapper)
        self.routes = RoutesClient(client_wrapper=self._client_wrapper)
        self.safety = SafetyClient(client_wrapper=self._client_wrapper)
        self.settings = SettingsClient(client_wrapper=self._client_wrapper)
        self.trailers = TrailersClient(client_wrapper=self._client_wrapper)
        self.vehicles = VehiclesClient(client_wrapper=self._client_wrapper)
        self.vehicle_locations = VehicleLocationsClient(client_wrapper=self._client_wrapper)
        self.vehicle_stats = VehicleStatsClient(client_wrapper=self._client_wrapper)
        self.gateways = GatewaysClient(client_wrapper=self._client_wrapper)
        self.industrial = IndustrialClient(client_wrapper=self._client_wrapper)
        self.live_sharing_links = LiveSharingLinksClient(client_wrapper=self._client_wrapper)
        self.organization_info = OrganizationInfoClient(client_wrapper=self._client_wrapper)
        self.preview = PreviewClient(client_wrapper=self._client_wrapper)
        self.tags = TagsClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.assets = AssetsClient(client_wrapper=self._client_wrapper)
        self.dispatch = DispatchClient(client_wrapper=self._client_wrapper)
        self.messages = MessagesClient(client_wrapper=self._client_wrapper)
        self.trailer_assignments = TrailerAssignmentsClient(client_wrapper=self._client_wrapper)
        self.trips = TripsClient(client_wrapper=self._client_wrapper)
        self.machines = MachinesClient(client_wrapper=self._client_wrapper)
        self.sensors = SensorsClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)
        self.auth = AuthClient(client_wrapper=self._client_wrapper)


class AsyncSamsara:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SamsaraEnvironment
        The environment to use for requests from the client. from .environment import SamsaraEnvironment



        Defaults to SamsaraEnvironment.PRODUCTION_API



    token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from samsara import AsyncSamsara

    client = AsyncSamsara(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SamsaraEnvironment = SamsaraEnvironment.PRODUCTION_API,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.addresses = AsyncAddressesClient(client_wrapper=self._client_wrapper)
        self.alerts = AsyncAlertsClient(client_wrapper=self._client_wrapper)
        self.location_and_speed = AsyncLocationAndSpeedClient(client_wrapper=self._client_wrapper)
        self.attributes = AsyncAttributesClient(client_wrapper=self._client_wrapper)
        self.beta = AsyncBetaClient(client_wrapper=self._client_wrapper)
        self.coaching = AsyncCoachingClient(client_wrapper=self._client_wrapper)
        self.contacts = AsyncContactsClient(client_wrapper=self._client_wrapper)
        self.maintenance = AsyncMaintenanceClient(client_wrapper=self._client_wrapper)
        self.driver_qr_codes = AsyncDriverQrCodesClient(client_wrapper=self._client_wrapper)
        self.carrier_proposed_assignments = AsyncCarrierProposedAssignmentsClient(client_wrapper=self._client_wrapper)
        self.documents = AsyncDocumentsClient(client_wrapper=self._client_wrapper)
        self.driver_vehicle_assignments = AsyncDriverVehicleAssignmentsClient(client_wrapper=self._client_wrapper)
        self.drivers = AsyncDriversClient(client_wrapper=self._client_wrapper)
        self.tachograph_eu_only = AsyncTachographEuOnlyClient(client_wrapper=self._client_wrapper)
        self.legacy = AsyncLegacyClient(client_wrapper=self._client_wrapper)
        self.equipment = AsyncEquipmentClient(client_wrapper=self._client_wrapper)
        self.hours_of_service = AsyncHoursOfServiceClient(client_wrapper=self._client_wrapper)
        self.fuel_and_energy = AsyncFuelAndEnergyClient(client_wrapper=self._client_wrapper)
        self.ifta = AsyncIftaClient(client_wrapper=self._client_wrapper)
        self.idling = AsyncIdlingClient(client_wrapper=self._client_wrapper)
        self.routes = AsyncRoutesClient(client_wrapper=self._client_wrapper)
        self.safety = AsyncSafetyClient(client_wrapper=self._client_wrapper)
        self.settings = AsyncSettingsClient(client_wrapper=self._client_wrapper)
        self.trailers = AsyncTrailersClient(client_wrapper=self._client_wrapper)
        self.vehicles = AsyncVehiclesClient(client_wrapper=self._client_wrapper)
        self.vehicle_locations = AsyncVehicleLocationsClient(client_wrapper=self._client_wrapper)
        self.vehicle_stats = AsyncVehicleStatsClient(client_wrapper=self._client_wrapper)
        self.gateways = AsyncGatewaysClient(client_wrapper=self._client_wrapper)
        self.industrial = AsyncIndustrialClient(client_wrapper=self._client_wrapper)
        self.live_sharing_links = AsyncLiveSharingLinksClient(client_wrapper=self._client_wrapper)
        self.organization_info = AsyncOrganizationInfoClient(client_wrapper=self._client_wrapper)
        self.preview = AsyncPreviewClient(client_wrapper=self._client_wrapper)
        self.tags = AsyncTagsClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.assets = AsyncAssetsClient(client_wrapper=self._client_wrapper)
        self.dispatch = AsyncDispatchClient(client_wrapper=self._client_wrapper)
        self.messages = AsyncMessagesClient(client_wrapper=self._client_wrapper)
        self.trailer_assignments = AsyncTrailerAssignmentsClient(client_wrapper=self._client_wrapper)
        self.trips = AsyncTripsClient(client_wrapper=self._client_wrapper)
        self.machines = AsyncMachinesClient(client_wrapper=self._client_wrapper)
        self.sensors = AsyncSensorsClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)
        self.auth = AsyncAuthClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SamsaraEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
