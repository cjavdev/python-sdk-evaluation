# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DvirBaseMechanicOrAgentSignature(UniversalBaseModel):
    """
    The mechanic's or agent's signature for the DVIR.
    """

    driver_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="driverId")] = pydantic.Field(
        default=None
    )
    """
    ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
    """

    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    Email of the  agent|mechanic who signed the DVIR.
    """

    mechanic_user_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="mechanicUserId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the agent or mechanic who signed the DVIR.
    """

    signed_at: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="signedAt")] = pydantic.Field(
        default=None
    )
    """
    The time in millis when the DVIR was signed
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    Type corresponds to whether the signature corresponds to driver|mechanic.
    """

    username: typing.Optional[str] = pydantic.Field(default=None)
    """
    Username of the  agent|mechanic who signed the DVIR.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
