# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .workflow_geofence_response_body import WorkflowGeofenceResponseBody
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class WorkflowAddressEventWithGeofenceObjectResponseBody(UniversalBaseModel):
    """
    A minimal Address object representation used in AddressEventObject objects
    """

    external_ids: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, str]], FieldMetadata(alias="externalIds")
    ] = pydantic.Field(default=None)
    """
    A map of external ids
    """

    formatted_address: typing_extensions.Annotated[str, FieldMetadata(alias="formattedAddress")] = pydantic.Field()
    """
    The full street address for this address/geofence, as it might be recognized by Google Maps.
    """

    geofence: typing.Optional[WorkflowGeofenceResponseBody] = None
    id: str = pydantic.Field()
    """
    Id of the address
    """

    name: str = pydantic.Field()
    """
    Name of the address
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
