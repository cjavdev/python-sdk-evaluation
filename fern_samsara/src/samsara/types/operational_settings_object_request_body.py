# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from .operational_settings_object_request_body_time_range_type import OperationalSettingsObjectRequestBodyTimeRangeType
from ..core.serialization import FieldMetadata
import pydantic
import typing
from .time_range_object_request_body import TimeRangeObjectRequestBody
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class OperationalSettingsObjectRequestBody(UniversalBaseModel):
    """
    Settings on when the alert should be operational.
    """

    time_range_type: typing_extensions.Annotated[
        OperationalSettingsObjectRequestBodyTimeRangeType, FieldMetadata(alias="timeRangeType")
    ] = pydantic.Field()
    """
    The type of time ranges.  Valid values: `activeBetween`, `inactiveBetween`
    """

    time_ranges: typing_extensions.Annotated[
        typing.List[TimeRangeObjectRequestBody], FieldMetadata(alias="timeRanges")
    ] = pydantic.Field()
    """
    The time ranges this alert applies to.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
