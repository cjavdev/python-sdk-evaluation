# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .forms_field_definition_object_response_body_allowed_asset_types_item import (
    FormsFieldDefinitionObjectResponseBodyAllowedAssetTypesItem,
)
from .forms_field_definition_object_response_body_allowed_date_time_value_type import (
    FormsFieldDefinitionObjectResponseBodyAllowedDateTimeValueType,
)
from .forms_select_option_object_response_body import FormsSelectOptionObjectResponseBody
from .forms_field_definition_object_response_body_type import FormsFieldDefinitionObjectResponseBodyType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class FormsFieldDefinitionObjectResponseBody(UniversalBaseModel):
    """
    Forms field definition object.
    """

    allow_manual_entry: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="allowManualEntry")] = (
        pydantic.Field(default=None)
    )
    """
    Indicates whether the field allows manual entry of a person. Only present for person fields.
    """

    allowed_asset_types: typing_extensions.Annotated[
        typing.Optional[typing.List[FormsFieldDefinitionObjectResponseBodyAllowedAssetTypesItem]],
        FieldMetadata(alias="allowedAssetTypes"),
    ] = pydantic.Field(default=None)
    """
    List of allowed asset types that can be selected for this field. Only present for asset fields.
    """

    allowed_date_time_value_type: typing_extensions.Annotated[
        typing.Optional[FormsFieldDefinitionObjectResponseBodyAllowedDateTimeValueType],
        FieldMetadata(alias="allowedDateTimeValueType"),
    ] = pydantic.Field(default=None)
    """
    Type of date/time entry allowed for this question. Only present for datetime fields.  Valid values: `datetime`, `date`, `time`
    """

    filter_by_current_driver_tags: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="filterByCurrentDriverTags")
    ] = pydantic.Field(default=None)
    """
    Indicates whether the person search filters by the current logged in worker's tags. Only present for person fields.
    """

    filter_by_role_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="filterByRoleIds")
    ] = pydantic.Field(default=None)
    """
    List of role IDs to filter org users by, representing which roles are selectable people for this field. Only present for person fields.
    """

    id: str = pydantic.Field()
    """
    Identifier of the field.
    """

    include_drivers: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="includeDrivers")] = (
        pydantic.Field(default=None)
    )
    """
    Indicates whether the field includes drivers as selectable people. Only present for person fields.
    """

    include_users: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="includeUsers")] = (
        pydantic.Field(default=None)
    )
    """
    Indicates whether the field includes users as selectable people. Only present for person fields.
    """

    is_required: typing_extensions.Annotated[bool, FieldMetadata(alias="isRequired")] = pydantic.Field()
    """
    Indicates whether the form field is required to be filled out by the user.
    """

    label: str = pydantic.Field()
    """
    Label of the field.
    """

    legal_text: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="legalText")] = pydantic.Field(
        default=None
    )
    """
    Legal text for the field. Only present for signature fields.
    """

    num_decimal_places: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="numDecimalPlaces")] = (
        pydantic.Field(default=None)
    )
    """
    Number of decimal places allowed. Only present for number fields.
    """

    options: typing.Optional[typing.List[FormsSelectOptionObjectResponseBody]] = pydantic.Field(default=None)
    """
    List of select options for checkboxes or multiple choice fields.
    """

    question_weight: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="questionWeight")] = (
        pydantic.Field(default=None)
    )
    """
    The maximum possible score weight for this field. For multiple choice fields, this number is the highest option score weight of the given options. For checkboxes fields, this number is the sum of the score weights for all scored options. Only present for multiple choice or checkboxes fields that have scoring.
    """

    type: FormsFieldDefinitionObjectResponseBodyType = pydantic.Field()
    """
    Type of the field.  Valid values: `number`, `text`, `multiple_choice`, `check_boxes`, `media`, `datetime`, `signature`, `asset`, `person`, `geofence`, `instruction`, `media_instruction`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
