# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .v_1_dvir_base_author_signature import V1DvirBaseAuthorSignature
from ..core.serialization import FieldMetadata
import pydantic
from .v_1_dvir_base_mechanic_or_agent_signature import V1DvirBaseMechanicOrAgentSignature
from .v_1_dvir_base_next_driver_signature import V1DvirBaseNextDriverSignature
from .v_1_dvir_defect_base import V1DvirDefectBase
from .v_1_dvir_base_vehicle import V1DvirBaseVehicle
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DvirBase(UniversalBaseModel):
    author_signature: typing_extensions.Annotated[
        typing.Optional[V1DvirBaseAuthorSignature], FieldMetadata(alias="authorSignature")
    ] = None
    defects_corrected: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="defectsCorrected")] = (
        pydantic.Field(default=None)
    )
    """
    Signifies if the defects on the vehicle corrected after the DVIR is done.
    """

    defects_need_not_be_corrected: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="defectsNeedNotBeCorrected")
    ] = pydantic.Field(default=None)
    """
    Signifies if the defects on this vehicle can be ignored.
    """

    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The id of this DVIR record.
    """

    inspection_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inspectionType")] = (
        pydantic.Field(default=None)
    )
    """
    Inspection type of the DVIR. Valid values: `preTrip`, `postTrip`, `mechanic`, `unspecified`.
    """

    mechanic_notes: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="mechanicNotes")] = (
        pydantic.Field(default=None)
    )
    """
    The mechanics notes on the DVIR.
    """

    mechanic_or_agent_signature: typing_extensions.Annotated[
        typing.Optional[V1DvirBaseMechanicOrAgentSignature], FieldMetadata(alias="mechanicOrAgentSignature")
    ] = None
    next_driver_signature: typing_extensions.Annotated[
        typing.Optional[V1DvirBaseNextDriverSignature], FieldMetadata(alias="nextDriverSignature")
    ] = None
    odometer_miles: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="odometerMiles")] = (
        pydantic.Field(default=None)
    )
    """
    The odometer reading in miles for the vehicle when the DVIR was done.
    """

    started_at_ms: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="startedAtMs")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp when driver began filling out this DVIR, in UNIX milliseconds.
    """

    time_ms: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="timeMs")] = pydantic.Field(
        default=None
    )
    """
    Timestamp of when this DVIR was signed & completed, in UNIX milliseconds.
    """

    trailer_defects: typing_extensions.Annotated[
        typing.Optional[typing.List[V1DvirDefectBase]], FieldMetadata(alias="trailerDefects")
    ] = pydantic.Field(default=None)
    """
    Defects registered for the trailer which was part of the DVIR.
    """

    trailer_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="trailerId")] = pydantic.Field(
        default=None
    )
    """
    The id of the trailer which was part of the DVIR.
    """

    trailer_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="trailerName")] = (
        pydantic.Field(default=None)
    )
    """
    The name of the trailer which was part of the DVIR.
    """

    vehicle: typing.Optional[V1DvirBaseVehicle] = None
    vehicle_condition: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="vehicleCondition")] = (
        pydantic.Field(default=None)
    )
    """
    The condition of vechile on which DVIR was done.
    """

    vehicle_defects: typing_extensions.Annotated[
        typing.Optional[typing.List[V1DvirDefectBase]], FieldMetadata(alias="vehicleDefects")
    ] = pydantic.Field(default=None)
    """
    Defects registered for the vehicle which was part of the DVIR.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
