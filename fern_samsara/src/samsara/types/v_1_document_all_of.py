# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .v_1_document_conditional_fields import V1DocumentConditionalFields
from ..core.serialization import FieldMetadata
import pydantic
from .v_1_document_fields import V1DocumentFields
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DocumentAllOf(UniversalBaseModel):
    conditional_field_sections: typing_extensions.Annotated[
        typing.Optional[V1DocumentConditionalFields], FieldMetadata(alias="conditionalFieldSections")
    ] = None
    document_type: typing_extensions.Annotated[str, FieldMetadata(alias="documentType")] = pydantic.Field()
    """
    Name of the document type.
    """

    driver_created_at_ms: typing_extensions.Annotated[int, FieldMetadata(alias="driverCreatedAtMs")] = pydantic.Field()
    """
    The time in Unix epoch milliseconds that the document was created in the driver app.
    """

    driver_id: typing_extensions.Annotated[int, FieldMetadata(alias="driverId")] = pydantic.Field()
    """
    ID of the driver for whom the document is submitted.
    """

    fields: V1DocumentFields
    id: str = pydantic.Field()
    """
    ID of the document.
    """

    org_id: typing_extensions.Annotated[int, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    Organization ID that the document belongs to.
    """

    server_created_at_ms: typing_extensions.Annotated[int, FieldMetadata(alias="serverCreatedAtMs")] = pydantic.Field()
    """
    The time in Unix epoch milliseconds that the document was received by the server.
    """

    server_updated_at_ms: typing_extensions.Annotated[int, FieldMetadata(alias="serverUpdatedAtMs")] = pydantic.Field()
    """
    The time in Unix epoch milliseconds that the document was updated on the server.
    """

    vehicle_id: typing_extensions.Annotated[int, FieldMetadata(alias="vehicleId")] = pydantic.Field()
    """
    ID of the vehicle the driver was signed into when the document was submitted. Will be `null` if the document `state` is `Required`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
