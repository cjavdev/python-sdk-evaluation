# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .v_1_dispatch_job_document_info import V1DispatchJobDocumentInfo
from .v_1_job_status import V1JobStatus
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1DispatchJobWithoutEtaAllOf(UniversalBaseModel):
    arrived_at_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time at which the driver arrived at the job destination.
    """

    completed_at_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time at which the job was marked complete (e.g. started driving to the next destination).
    """

    dispatch_route_id: int = pydantic.Field()
    """
    ID of the route that this job belongs to.
    """

    documents: typing.Optional[typing.List[V1DispatchJobDocumentInfo]] = pydantic.Field(default=None)
    """
    Document submissions associated with this job.
    """

    driver_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    ID of the driver assigned to the dispatch job.
    """

    en_route_at_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
    """

    fleet_viewer_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    Fleet viewer url of the dispatch job.
    """

    group_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    Deprecated.
    """

    id: int = pydantic.Field()
    """
    ID of the Samsara dispatch job.
    """

    job_state: V1JobStatus
    skipped_at_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The time at which the job was marked skipped.
    """

    vehicle_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    ID of the vehicle used for the dispatch job.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
