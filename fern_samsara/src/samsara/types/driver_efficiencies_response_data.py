# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .driver_efficiency import DriverEfficiency
from ..core.serialization import FieldMetadata
import pydantic
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class DriverEfficienciesResponseData(UniversalBaseModel):
    driver_summaries: typing_extensions.Annotated[
        typing.Optional[typing.List[DriverEfficiency]], FieldMetadata(alias="driverSummaries")
    ] = pydantic.Field(default=None)
    """
    A list of driver and associated vehicle efficiency data.
    """

    summary_end_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="summaryEndTime")
    ] = pydantic.Field(default=None)
    """
    End time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-16T16:00:00Z`
    """

    summary_start_time: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="summaryStartTime")
    ] = pydantic.Field(default=None)
    """
    Start time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-15T16:00:00Z`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
