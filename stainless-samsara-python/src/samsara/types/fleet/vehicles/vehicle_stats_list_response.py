# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import List, Optional
from typing_extensions import Literal

from pydantic import Field as FieldInfo

from ...._models import BaseModel

__all__ = [
    "VehicleStatsListResponse",
    "Data",
    "DataAmbientAirTemperatureMilliC",
    "DataAmbientAirTemperatureMilliCDecorations",
    "DataAmbientAirTemperatureMilliCDecorationsAmbientAirTemperatureMilliC",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput1",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput10",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput11",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput12",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput13",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput2",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput3",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput4",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput5",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput6",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput7",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput8",
    "DataAmbientAirTemperatureMilliCDecorationsAuxInput9",
    "DataAmbientAirTemperatureMilliCDecorationsBarometricPressurePa",
    "DataAmbientAirTemperatureMilliCDecorationsBatteryMilliVolts",
    "DataAmbientAirTemperatureMilliCDecorationsDefLevelMilliPercent",
    "DataAmbientAirTemperatureMilliCDecorationsEcuSpeedMph",
    "DataAmbientAirTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC",
    "DataAmbientAirTemperatureMilliCDecorationsEngineImmobilizer",
    "DataAmbientAirTemperatureMilliCDecorationsEngineLoadPercent",
    "DataAmbientAirTemperatureMilliCDecorationsEngineOilPressureKPa",
    "DataAmbientAirTemperatureMilliCDecorationsEngineRpm",
    "DataAmbientAirTemperatureMilliCDecorationsEngineStates",
    "DataAmbientAirTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAmbientAirTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp",
    "DataAmbientAirTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAmbientAirTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt",
    "DataAmbientAirTemperatureMilliCDecorationsEvChargingCurrentMilliAmp",
    "DataAmbientAirTemperatureMilliCDecorationsEvChargingEnergyMicroWh",
    "DataAmbientAirTemperatureMilliCDecorationsEvChargingStatus",
    "DataAmbientAirTemperatureMilliCDecorationsEvChargingVoltageMilliVolt",
    "DataAmbientAirTemperatureMilliCDecorationsEvConsumedEnergyMicroWh",
    "DataAmbientAirTemperatureMilliCDecorationsEvDistanceDrivenMeters",
    "DataAmbientAirTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh",
    "DataAmbientAirTemperatureMilliCDecorationsEvStateOfChargeMilliPercent",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodes",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdii",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesOem",
    "DataAmbientAirTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAmbientAirTemperatureMilliCDecorationsFuelPercents",
    "DataAmbientAirTemperatureMilliCDecorationsGps",
    "DataAmbientAirTemperatureMilliCDecorationsGpsAddress",
    "DataAmbientAirTemperatureMilliCDecorationsGpsReverseGeo",
    "DataAmbientAirTemperatureMilliCDecorationsGpsDistanceMeters",
    "DataAmbientAirTemperatureMilliCDecorationsGpsOdometerMeters",
    "DataAmbientAirTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC",
    "DataAmbientAirTemperatureMilliCDecorationsObdEngineSeconds",
    "DataAmbientAirTemperatureMilliCDecorationsObdOdometerMeters",
    "DataAmbientAirTemperatureMilliCDecorationsSeatbeltDriver",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderActive",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderAirTemp",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderBlastState",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderGranularName",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderGranularRate",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderLiquidName",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderLiquidRate",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderOnState",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderPlowStatus",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderPrewetName",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderPrewetRate",
    "DataAmbientAirTemperatureMilliCDecorationsSpreaderRoadTemp",
    "DataAmbientAirTemperatureMilliCDecorationsTirePressure",
    "DataAuxInput1",
    "DataAuxInput1Decorations",
    "DataAuxInput1DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput1DecorationsAuxInput1",
    "DataAuxInput1DecorationsAuxInput10",
    "DataAuxInput1DecorationsAuxInput11",
    "DataAuxInput1DecorationsAuxInput12",
    "DataAuxInput1DecorationsAuxInput13",
    "DataAuxInput1DecorationsAuxInput2",
    "DataAuxInput1DecorationsAuxInput3",
    "DataAuxInput1DecorationsAuxInput4",
    "DataAuxInput1DecorationsAuxInput5",
    "DataAuxInput1DecorationsAuxInput6",
    "DataAuxInput1DecorationsAuxInput7",
    "DataAuxInput1DecorationsAuxInput8",
    "DataAuxInput1DecorationsAuxInput9",
    "DataAuxInput1DecorationsBarometricPressurePa",
    "DataAuxInput1DecorationsBatteryMilliVolts",
    "DataAuxInput1DecorationsDefLevelMilliPercent",
    "DataAuxInput1DecorationsEcuSpeedMph",
    "DataAuxInput1DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput1DecorationsEngineImmobilizer",
    "DataAuxInput1DecorationsEngineLoadPercent",
    "DataAuxInput1DecorationsEngineOilPressureKPa",
    "DataAuxInput1DecorationsEngineRpm",
    "DataAuxInput1DecorationsEngineStates",
    "DataAuxInput1DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput1DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput1DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput1DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput1DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput1DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput1DecorationsEvChargingStatus",
    "DataAuxInput1DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput1DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput1DecorationsEvDistanceDrivenMeters",
    "DataAuxInput1DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput1DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput1DecorationsFaultCodes",
    "DataAuxInput1DecorationsFaultCodesJ1939",
    "DataAuxInput1DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput1DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput1DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput1DecorationsFaultCodesObdii",
    "DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput1DecorationsFaultCodesOem",
    "DataAuxInput1DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput1DecorationsFuelPercents",
    "DataAuxInput1DecorationsGps",
    "DataAuxInput1DecorationsGpsAddress",
    "DataAuxInput1DecorationsGpsReverseGeo",
    "DataAuxInput1DecorationsGpsDistanceMeters",
    "DataAuxInput1DecorationsGpsOdometerMeters",
    "DataAuxInput1DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput1DecorationsObdEngineSeconds",
    "DataAuxInput1DecorationsObdOdometerMeters",
    "DataAuxInput1DecorationsSeatbeltDriver",
    "DataAuxInput1DecorationsSpreaderActive",
    "DataAuxInput1DecorationsSpreaderAirTemp",
    "DataAuxInput1DecorationsSpreaderBlastState",
    "DataAuxInput1DecorationsSpreaderGranularName",
    "DataAuxInput1DecorationsSpreaderGranularRate",
    "DataAuxInput1DecorationsSpreaderLiquidName",
    "DataAuxInput1DecorationsSpreaderLiquidRate",
    "DataAuxInput1DecorationsSpreaderOnState",
    "DataAuxInput1DecorationsSpreaderPlowStatus",
    "DataAuxInput1DecorationsSpreaderPrewetName",
    "DataAuxInput1DecorationsSpreaderPrewetRate",
    "DataAuxInput1DecorationsSpreaderRoadTemp",
    "DataAuxInput1DecorationsTirePressure",
    "DataAuxInput10",
    "DataAuxInput10Decorations",
    "DataAuxInput10DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput10DecorationsAuxInput1",
    "DataAuxInput10DecorationsAuxInput10",
    "DataAuxInput10DecorationsAuxInput11",
    "DataAuxInput10DecorationsAuxInput12",
    "DataAuxInput10DecorationsAuxInput13",
    "DataAuxInput10DecorationsAuxInput2",
    "DataAuxInput10DecorationsAuxInput3",
    "DataAuxInput10DecorationsAuxInput4",
    "DataAuxInput10DecorationsAuxInput5",
    "DataAuxInput10DecorationsAuxInput6",
    "DataAuxInput10DecorationsAuxInput7",
    "DataAuxInput10DecorationsAuxInput8",
    "DataAuxInput10DecorationsAuxInput9",
    "DataAuxInput10DecorationsBarometricPressurePa",
    "DataAuxInput10DecorationsBatteryMilliVolts",
    "DataAuxInput10DecorationsDefLevelMilliPercent",
    "DataAuxInput10DecorationsEcuSpeedMph",
    "DataAuxInput10DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput10DecorationsEngineImmobilizer",
    "DataAuxInput10DecorationsEngineLoadPercent",
    "DataAuxInput10DecorationsEngineOilPressureKPa",
    "DataAuxInput10DecorationsEngineRpm",
    "DataAuxInput10DecorationsEngineStates",
    "DataAuxInput10DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput10DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput10DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput10DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput10DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput10DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput10DecorationsEvChargingStatus",
    "DataAuxInput10DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput10DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput10DecorationsEvDistanceDrivenMeters",
    "DataAuxInput10DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput10DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput10DecorationsFaultCodes",
    "DataAuxInput10DecorationsFaultCodesJ1939",
    "DataAuxInput10DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput10DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput10DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput10DecorationsFaultCodesObdii",
    "DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput10DecorationsFaultCodesOem",
    "DataAuxInput10DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput10DecorationsFuelPercents",
    "DataAuxInput10DecorationsGps",
    "DataAuxInput10DecorationsGpsAddress",
    "DataAuxInput10DecorationsGpsReverseGeo",
    "DataAuxInput10DecorationsGpsDistanceMeters",
    "DataAuxInput10DecorationsGpsOdometerMeters",
    "DataAuxInput10DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput10DecorationsObdEngineSeconds",
    "DataAuxInput10DecorationsObdOdometerMeters",
    "DataAuxInput10DecorationsSeatbeltDriver",
    "DataAuxInput10DecorationsSpreaderActive",
    "DataAuxInput10DecorationsSpreaderAirTemp",
    "DataAuxInput10DecorationsSpreaderBlastState",
    "DataAuxInput10DecorationsSpreaderGranularName",
    "DataAuxInput10DecorationsSpreaderGranularRate",
    "DataAuxInput10DecorationsSpreaderLiquidName",
    "DataAuxInput10DecorationsSpreaderLiquidRate",
    "DataAuxInput10DecorationsSpreaderOnState",
    "DataAuxInput10DecorationsSpreaderPlowStatus",
    "DataAuxInput10DecorationsSpreaderPrewetName",
    "DataAuxInput10DecorationsSpreaderPrewetRate",
    "DataAuxInput10DecorationsSpreaderRoadTemp",
    "DataAuxInput10DecorationsTirePressure",
    "DataAuxInput11",
    "DataAuxInput11Decorations",
    "DataAuxInput11DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput11DecorationsAuxInput1",
    "DataAuxInput11DecorationsAuxInput10",
    "DataAuxInput11DecorationsAuxInput11",
    "DataAuxInput11DecorationsAuxInput12",
    "DataAuxInput11DecorationsAuxInput13",
    "DataAuxInput11DecorationsAuxInput2",
    "DataAuxInput11DecorationsAuxInput3",
    "DataAuxInput11DecorationsAuxInput4",
    "DataAuxInput11DecorationsAuxInput5",
    "DataAuxInput11DecorationsAuxInput6",
    "DataAuxInput11DecorationsAuxInput7",
    "DataAuxInput11DecorationsAuxInput8",
    "DataAuxInput11DecorationsAuxInput9",
    "DataAuxInput11DecorationsBarometricPressurePa",
    "DataAuxInput11DecorationsBatteryMilliVolts",
    "DataAuxInput11DecorationsDefLevelMilliPercent",
    "DataAuxInput11DecorationsEcuSpeedMph",
    "DataAuxInput11DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput11DecorationsEngineImmobilizer",
    "DataAuxInput11DecorationsEngineLoadPercent",
    "DataAuxInput11DecorationsEngineOilPressureKPa",
    "DataAuxInput11DecorationsEngineRpm",
    "DataAuxInput11DecorationsEngineStates",
    "DataAuxInput11DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput11DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput11DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput11DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput11DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput11DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput11DecorationsEvChargingStatus",
    "DataAuxInput11DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput11DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput11DecorationsEvDistanceDrivenMeters",
    "DataAuxInput11DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput11DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput11DecorationsFaultCodes",
    "DataAuxInput11DecorationsFaultCodesJ1939",
    "DataAuxInput11DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput11DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput11DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput11DecorationsFaultCodesObdii",
    "DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput11DecorationsFaultCodesOem",
    "DataAuxInput11DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput11DecorationsFuelPercents",
    "DataAuxInput11DecorationsGps",
    "DataAuxInput11DecorationsGpsAddress",
    "DataAuxInput11DecorationsGpsReverseGeo",
    "DataAuxInput11DecorationsGpsDistanceMeters",
    "DataAuxInput11DecorationsGpsOdometerMeters",
    "DataAuxInput11DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput11DecorationsObdEngineSeconds",
    "DataAuxInput11DecorationsObdOdometerMeters",
    "DataAuxInput11DecorationsSeatbeltDriver",
    "DataAuxInput11DecorationsSpreaderActive",
    "DataAuxInput11DecorationsSpreaderAirTemp",
    "DataAuxInput11DecorationsSpreaderBlastState",
    "DataAuxInput11DecorationsSpreaderGranularName",
    "DataAuxInput11DecorationsSpreaderGranularRate",
    "DataAuxInput11DecorationsSpreaderLiquidName",
    "DataAuxInput11DecorationsSpreaderLiquidRate",
    "DataAuxInput11DecorationsSpreaderOnState",
    "DataAuxInput11DecorationsSpreaderPlowStatus",
    "DataAuxInput11DecorationsSpreaderPrewetName",
    "DataAuxInput11DecorationsSpreaderPrewetRate",
    "DataAuxInput11DecorationsSpreaderRoadTemp",
    "DataAuxInput11DecorationsTirePressure",
    "DataAuxInput12",
    "DataAuxInput12Decorations",
    "DataAuxInput12DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput12DecorationsAuxInput1",
    "DataAuxInput12DecorationsAuxInput10",
    "DataAuxInput12DecorationsAuxInput11",
    "DataAuxInput12DecorationsAuxInput12",
    "DataAuxInput12DecorationsAuxInput13",
    "DataAuxInput12DecorationsAuxInput2",
    "DataAuxInput12DecorationsAuxInput3",
    "DataAuxInput12DecorationsAuxInput4",
    "DataAuxInput12DecorationsAuxInput5",
    "DataAuxInput12DecorationsAuxInput6",
    "DataAuxInput12DecorationsAuxInput7",
    "DataAuxInput12DecorationsAuxInput8",
    "DataAuxInput12DecorationsAuxInput9",
    "DataAuxInput12DecorationsBarometricPressurePa",
    "DataAuxInput12DecorationsBatteryMilliVolts",
    "DataAuxInput12DecorationsDefLevelMilliPercent",
    "DataAuxInput12DecorationsEcuSpeedMph",
    "DataAuxInput12DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput12DecorationsEngineImmobilizer",
    "DataAuxInput12DecorationsEngineLoadPercent",
    "DataAuxInput12DecorationsEngineOilPressureKPa",
    "DataAuxInput12DecorationsEngineRpm",
    "DataAuxInput12DecorationsEngineStates",
    "DataAuxInput12DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput12DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput12DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput12DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput12DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput12DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput12DecorationsEvChargingStatus",
    "DataAuxInput12DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput12DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput12DecorationsEvDistanceDrivenMeters",
    "DataAuxInput12DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput12DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput12DecorationsFaultCodes",
    "DataAuxInput12DecorationsFaultCodesJ1939",
    "DataAuxInput12DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput12DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput12DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput12DecorationsFaultCodesObdii",
    "DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput12DecorationsFaultCodesOem",
    "DataAuxInput12DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput12DecorationsFuelPercents",
    "DataAuxInput12DecorationsGps",
    "DataAuxInput12DecorationsGpsAddress",
    "DataAuxInput12DecorationsGpsReverseGeo",
    "DataAuxInput12DecorationsGpsDistanceMeters",
    "DataAuxInput12DecorationsGpsOdometerMeters",
    "DataAuxInput12DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput12DecorationsObdEngineSeconds",
    "DataAuxInput12DecorationsObdOdometerMeters",
    "DataAuxInput12DecorationsSeatbeltDriver",
    "DataAuxInput12DecorationsSpreaderActive",
    "DataAuxInput12DecorationsSpreaderAirTemp",
    "DataAuxInput12DecorationsSpreaderBlastState",
    "DataAuxInput12DecorationsSpreaderGranularName",
    "DataAuxInput12DecorationsSpreaderGranularRate",
    "DataAuxInput12DecorationsSpreaderLiquidName",
    "DataAuxInput12DecorationsSpreaderLiquidRate",
    "DataAuxInput12DecorationsSpreaderOnState",
    "DataAuxInput12DecorationsSpreaderPlowStatus",
    "DataAuxInput12DecorationsSpreaderPrewetName",
    "DataAuxInput12DecorationsSpreaderPrewetRate",
    "DataAuxInput12DecorationsSpreaderRoadTemp",
    "DataAuxInput12DecorationsTirePressure",
    "DataAuxInput13",
    "DataAuxInput13Decorations",
    "DataAuxInput13DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput13DecorationsAuxInput1",
    "DataAuxInput13DecorationsAuxInput10",
    "DataAuxInput13DecorationsAuxInput11",
    "DataAuxInput13DecorationsAuxInput12",
    "DataAuxInput13DecorationsAuxInput13",
    "DataAuxInput13DecorationsAuxInput2",
    "DataAuxInput13DecorationsAuxInput3",
    "DataAuxInput13DecorationsAuxInput4",
    "DataAuxInput13DecorationsAuxInput5",
    "DataAuxInput13DecorationsAuxInput6",
    "DataAuxInput13DecorationsAuxInput7",
    "DataAuxInput13DecorationsAuxInput8",
    "DataAuxInput13DecorationsAuxInput9",
    "DataAuxInput13DecorationsBarometricPressurePa",
    "DataAuxInput13DecorationsBatteryMilliVolts",
    "DataAuxInput13DecorationsDefLevelMilliPercent",
    "DataAuxInput13DecorationsEcuSpeedMph",
    "DataAuxInput13DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput13DecorationsEngineImmobilizer",
    "DataAuxInput13DecorationsEngineLoadPercent",
    "DataAuxInput13DecorationsEngineOilPressureKPa",
    "DataAuxInput13DecorationsEngineRpm",
    "DataAuxInput13DecorationsEngineStates",
    "DataAuxInput13DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput13DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput13DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput13DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput13DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput13DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput13DecorationsEvChargingStatus",
    "DataAuxInput13DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput13DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput13DecorationsEvDistanceDrivenMeters",
    "DataAuxInput13DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput13DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput13DecorationsFaultCodes",
    "DataAuxInput13DecorationsFaultCodesJ1939",
    "DataAuxInput13DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput13DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput13DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput13DecorationsFaultCodesObdii",
    "DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput13DecorationsFaultCodesOem",
    "DataAuxInput13DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput13DecorationsFuelPercents",
    "DataAuxInput13DecorationsGps",
    "DataAuxInput13DecorationsGpsAddress",
    "DataAuxInput13DecorationsGpsReverseGeo",
    "DataAuxInput13DecorationsGpsDistanceMeters",
    "DataAuxInput13DecorationsGpsOdometerMeters",
    "DataAuxInput13DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput13DecorationsObdEngineSeconds",
    "DataAuxInput13DecorationsObdOdometerMeters",
    "DataAuxInput13DecorationsSeatbeltDriver",
    "DataAuxInput13DecorationsSpreaderActive",
    "DataAuxInput13DecorationsSpreaderAirTemp",
    "DataAuxInput13DecorationsSpreaderBlastState",
    "DataAuxInput13DecorationsSpreaderGranularName",
    "DataAuxInput13DecorationsSpreaderGranularRate",
    "DataAuxInput13DecorationsSpreaderLiquidName",
    "DataAuxInput13DecorationsSpreaderLiquidRate",
    "DataAuxInput13DecorationsSpreaderOnState",
    "DataAuxInput13DecorationsSpreaderPlowStatus",
    "DataAuxInput13DecorationsSpreaderPrewetName",
    "DataAuxInput13DecorationsSpreaderPrewetRate",
    "DataAuxInput13DecorationsSpreaderRoadTemp",
    "DataAuxInput13DecorationsTirePressure",
    "DataAuxInput2",
    "DataAuxInput2Decorations",
    "DataAuxInput2DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput2DecorationsAuxInput1",
    "DataAuxInput2DecorationsAuxInput10",
    "DataAuxInput2DecorationsAuxInput11",
    "DataAuxInput2DecorationsAuxInput12",
    "DataAuxInput2DecorationsAuxInput13",
    "DataAuxInput2DecorationsAuxInput2",
    "DataAuxInput2DecorationsAuxInput3",
    "DataAuxInput2DecorationsAuxInput4",
    "DataAuxInput2DecorationsAuxInput5",
    "DataAuxInput2DecorationsAuxInput6",
    "DataAuxInput2DecorationsAuxInput7",
    "DataAuxInput2DecorationsAuxInput8",
    "DataAuxInput2DecorationsAuxInput9",
    "DataAuxInput2DecorationsBarometricPressurePa",
    "DataAuxInput2DecorationsBatteryMilliVolts",
    "DataAuxInput2DecorationsDefLevelMilliPercent",
    "DataAuxInput2DecorationsEcuSpeedMph",
    "DataAuxInput2DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput2DecorationsEngineImmobilizer",
    "DataAuxInput2DecorationsEngineLoadPercent",
    "DataAuxInput2DecorationsEngineOilPressureKPa",
    "DataAuxInput2DecorationsEngineRpm",
    "DataAuxInput2DecorationsEngineStates",
    "DataAuxInput2DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput2DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput2DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput2DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput2DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput2DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput2DecorationsEvChargingStatus",
    "DataAuxInput2DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput2DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput2DecorationsEvDistanceDrivenMeters",
    "DataAuxInput2DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput2DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput2DecorationsFaultCodes",
    "DataAuxInput2DecorationsFaultCodesJ1939",
    "DataAuxInput2DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput2DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput2DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput2DecorationsFaultCodesObdii",
    "DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput2DecorationsFaultCodesOem",
    "DataAuxInput2DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput2DecorationsFuelPercents",
    "DataAuxInput2DecorationsGps",
    "DataAuxInput2DecorationsGpsAddress",
    "DataAuxInput2DecorationsGpsReverseGeo",
    "DataAuxInput2DecorationsGpsDistanceMeters",
    "DataAuxInput2DecorationsGpsOdometerMeters",
    "DataAuxInput2DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput2DecorationsObdEngineSeconds",
    "DataAuxInput2DecorationsObdOdometerMeters",
    "DataAuxInput2DecorationsSeatbeltDriver",
    "DataAuxInput2DecorationsSpreaderActive",
    "DataAuxInput2DecorationsSpreaderAirTemp",
    "DataAuxInput2DecorationsSpreaderBlastState",
    "DataAuxInput2DecorationsSpreaderGranularName",
    "DataAuxInput2DecorationsSpreaderGranularRate",
    "DataAuxInput2DecorationsSpreaderLiquidName",
    "DataAuxInput2DecorationsSpreaderLiquidRate",
    "DataAuxInput2DecorationsSpreaderOnState",
    "DataAuxInput2DecorationsSpreaderPlowStatus",
    "DataAuxInput2DecorationsSpreaderPrewetName",
    "DataAuxInput2DecorationsSpreaderPrewetRate",
    "DataAuxInput2DecorationsSpreaderRoadTemp",
    "DataAuxInput2DecorationsTirePressure",
    "DataAuxInput3",
    "DataAuxInput3Decorations",
    "DataAuxInput3DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput3DecorationsAuxInput1",
    "DataAuxInput3DecorationsAuxInput10",
    "DataAuxInput3DecorationsAuxInput11",
    "DataAuxInput3DecorationsAuxInput12",
    "DataAuxInput3DecorationsAuxInput13",
    "DataAuxInput3DecorationsAuxInput2",
    "DataAuxInput3DecorationsAuxInput3",
    "DataAuxInput3DecorationsAuxInput4",
    "DataAuxInput3DecorationsAuxInput5",
    "DataAuxInput3DecorationsAuxInput6",
    "DataAuxInput3DecorationsAuxInput7",
    "DataAuxInput3DecorationsAuxInput8",
    "DataAuxInput3DecorationsAuxInput9",
    "DataAuxInput3DecorationsBarometricPressurePa",
    "DataAuxInput3DecorationsBatteryMilliVolts",
    "DataAuxInput3DecorationsDefLevelMilliPercent",
    "DataAuxInput3DecorationsEcuSpeedMph",
    "DataAuxInput3DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput3DecorationsEngineImmobilizer",
    "DataAuxInput3DecorationsEngineLoadPercent",
    "DataAuxInput3DecorationsEngineOilPressureKPa",
    "DataAuxInput3DecorationsEngineRpm",
    "DataAuxInput3DecorationsEngineStates",
    "DataAuxInput3DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput3DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput3DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput3DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput3DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput3DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput3DecorationsEvChargingStatus",
    "DataAuxInput3DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput3DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput3DecorationsEvDistanceDrivenMeters",
    "DataAuxInput3DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput3DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput3DecorationsFaultCodes",
    "DataAuxInput3DecorationsFaultCodesJ1939",
    "DataAuxInput3DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput3DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput3DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput3DecorationsFaultCodesObdii",
    "DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput3DecorationsFaultCodesOem",
    "DataAuxInput3DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput3DecorationsFuelPercents",
    "DataAuxInput3DecorationsGps",
    "DataAuxInput3DecorationsGpsAddress",
    "DataAuxInput3DecorationsGpsReverseGeo",
    "DataAuxInput3DecorationsGpsDistanceMeters",
    "DataAuxInput3DecorationsGpsOdometerMeters",
    "DataAuxInput3DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput3DecorationsObdEngineSeconds",
    "DataAuxInput3DecorationsObdOdometerMeters",
    "DataAuxInput3DecorationsSeatbeltDriver",
    "DataAuxInput3DecorationsSpreaderActive",
    "DataAuxInput3DecorationsSpreaderAirTemp",
    "DataAuxInput3DecorationsSpreaderBlastState",
    "DataAuxInput3DecorationsSpreaderGranularName",
    "DataAuxInput3DecorationsSpreaderGranularRate",
    "DataAuxInput3DecorationsSpreaderLiquidName",
    "DataAuxInput3DecorationsSpreaderLiquidRate",
    "DataAuxInput3DecorationsSpreaderOnState",
    "DataAuxInput3DecorationsSpreaderPlowStatus",
    "DataAuxInput3DecorationsSpreaderPrewetName",
    "DataAuxInput3DecorationsSpreaderPrewetRate",
    "DataAuxInput3DecorationsSpreaderRoadTemp",
    "DataAuxInput3DecorationsTirePressure",
    "DataAuxInput4",
    "DataAuxInput4Decorations",
    "DataAuxInput4DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput4DecorationsAuxInput1",
    "DataAuxInput4DecorationsAuxInput10",
    "DataAuxInput4DecorationsAuxInput11",
    "DataAuxInput4DecorationsAuxInput12",
    "DataAuxInput4DecorationsAuxInput13",
    "DataAuxInput4DecorationsAuxInput2",
    "DataAuxInput4DecorationsAuxInput3",
    "DataAuxInput4DecorationsAuxInput4",
    "DataAuxInput4DecorationsAuxInput5",
    "DataAuxInput4DecorationsAuxInput6",
    "DataAuxInput4DecorationsAuxInput7",
    "DataAuxInput4DecorationsAuxInput8",
    "DataAuxInput4DecorationsAuxInput9",
    "DataAuxInput4DecorationsBarometricPressurePa",
    "DataAuxInput4DecorationsBatteryMilliVolts",
    "DataAuxInput4DecorationsDefLevelMilliPercent",
    "DataAuxInput4DecorationsEcuSpeedMph",
    "DataAuxInput4DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput4DecorationsEngineImmobilizer",
    "DataAuxInput4DecorationsEngineLoadPercent",
    "DataAuxInput4DecorationsEngineOilPressureKPa",
    "DataAuxInput4DecorationsEngineRpm",
    "DataAuxInput4DecorationsEngineStates",
    "DataAuxInput4DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput4DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput4DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput4DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput4DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput4DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput4DecorationsEvChargingStatus",
    "DataAuxInput4DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput4DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput4DecorationsEvDistanceDrivenMeters",
    "DataAuxInput4DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput4DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput4DecorationsFaultCodes",
    "DataAuxInput4DecorationsFaultCodesJ1939",
    "DataAuxInput4DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput4DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput4DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput4DecorationsFaultCodesObdii",
    "DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput4DecorationsFaultCodesOem",
    "DataAuxInput4DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput4DecorationsFuelPercents",
    "DataAuxInput4DecorationsGps",
    "DataAuxInput4DecorationsGpsAddress",
    "DataAuxInput4DecorationsGpsReverseGeo",
    "DataAuxInput4DecorationsGpsDistanceMeters",
    "DataAuxInput4DecorationsGpsOdometerMeters",
    "DataAuxInput4DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput4DecorationsObdEngineSeconds",
    "DataAuxInput4DecorationsObdOdometerMeters",
    "DataAuxInput4DecorationsSeatbeltDriver",
    "DataAuxInput4DecorationsSpreaderActive",
    "DataAuxInput4DecorationsSpreaderAirTemp",
    "DataAuxInput4DecorationsSpreaderBlastState",
    "DataAuxInput4DecorationsSpreaderGranularName",
    "DataAuxInput4DecorationsSpreaderGranularRate",
    "DataAuxInput4DecorationsSpreaderLiquidName",
    "DataAuxInput4DecorationsSpreaderLiquidRate",
    "DataAuxInput4DecorationsSpreaderOnState",
    "DataAuxInput4DecorationsSpreaderPlowStatus",
    "DataAuxInput4DecorationsSpreaderPrewetName",
    "DataAuxInput4DecorationsSpreaderPrewetRate",
    "DataAuxInput4DecorationsSpreaderRoadTemp",
    "DataAuxInput4DecorationsTirePressure",
    "DataAuxInput5",
    "DataAuxInput5Decorations",
    "DataAuxInput5DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput5DecorationsAuxInput1",
    "DataAuxInput5DecorationsAuxInput10",
    "DataAuxInput5DecorationsAuxInput11",
    "DataAuxInput5DecorationsAuxInput12",
    "DataAuxInput5DecorationsAuxInput13",
    "DataAuxInput5DecorationsAuxInput2",
    "DataAuxInput5DecorationsAuxInput3",
    "DataAuxInput5DecorationsAuxInput4",
    "DataAuxInput5DecorationsAuxInput5",
    "DataAuxInput5DecorationsAuxInput6",
    "DataAuxInput5DecorationsAuxInput7",
    "DataAuxInput5DecorationsAuxInput8",
    "DataAuxInput5DecorationsAuxInput9",
    "DataAuxInput5DecorationsBarometricPressurePa",
    "DataAuxInput5DecorationsBatteryMilliVolts",
    "DataAuxInput5DecorationsDefLevelMilliPercent",
    "DataAuxInput5DecorationsEcuSpeedMph",
    "DataAuxInput5DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput5DecorationsEngineImmobilizer",
    "DataAuxInput5DecorationsEngineLoadPercent",
    "DataAuxInput5DecorationsEngineOilPressureKPa",
    "DataAuxInput5DecorationsEngineRpm",
    "DataAuxInput5DecorationsEngineStates",
    "DataAuxInput5DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput5DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput5DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput5DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput5DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput5DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput5DecorationsEvChargingStatus",
    "DataAuxInput5DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput5DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput5DecorationsEvDistanceDrivenMeters",
    "DataAuxInput5DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput5DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput5DecorationsFaultCodes",
    "DataAuxInput5DecorationsFaultCodesJ1939",
    "DataAuxInput5DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput5DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput5DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput5DecorationsFaultCodesObdii",
    "DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput5DecorationsFaultCodesOem",
    "DataAuxInput5DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput5DecorationsFuelPercents",
    "DataAuxInput5DecorationsGps",
    "DataAuxInput5DecorationsGpsAddress",
    "DataAuxInput5DecorationsGpsReverseGeo",
    "DataAuxInput5DecorationsGpsDistanceMeters",
    "DataAuxInput5DecorationsGpsOdometerMeters",
    "DataAuxInput5DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput5DecorationsObdEngineSeconds",
    "DataAuxInput5DecorationsObdOdometerMeters",
    "DataAuxInput5DecorationsSeatbeltDriver",
    "DataAuxInput5DecorationsSpreaderActive",
    "DataAuxInput5DecorationsSpreaderAirTemp",
    "DataAuxInput5DecorationsSpreaderBlastState",
    "DataAuxInput5DecorationsSpreaderGranularName",
    "DataAuxInput5DecorationsSpreaderGranularRate",
    "DataAuxInput5DecorationsSpreaderLiquidName",
    "DataAuxInput5DecorationsSpreaderLiquidRate",
    "DataAuxInput5DecorationsSpreaderOnState",
    "DataAuxInput5DecorationsSpreaderPlowStatus",
    "DataAuxInput5DecorationsSpreaderPrewetName",
    "DataAuxInput5DecorationsSpreaderPrewetRate",
    "DataAuxInput5DecorationsSpreaderRoadTemp",
    "DataAuxInput5DecorationsTirePressure",
    "DataAuxInput6",
    "DataAuxInput6Decorations",
    "DataAuxInput6DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput6DecorationsAuxInput1",
    "DataAuxInput6DecorationsAuxInput10",
    "DataAuxInput6DecorationsAuxInput11",
    "DataAuxInput6DecorationsAuxInput12",
    "DataAuxInput6DecorationsAuxInput13",
    "DataAuxInput6DecorationsAuxInput2",
    "DataAuxInput6DecorationsAuxInput3",
    "DataAuxInput6DecorationsAuxInput4",
    "DataAuxInput6DecorationsAuxInput5",
    "DataAuxInput6DecorationsAuxInput6",
    "DataAuxInput6DecorationsAuxInput7",
    "DataAuxInput6DecorationsAuxInput8",
    "DataAuxInput6DecorationsAuxInput9",
    "DataAuxInput6DecorationsBarometricPressurePa",
    "DataAuxInput6DecorationsBatteryMilliVolts",
    "DataAuxInput6DecorationsDefLevelMilliPercent",
    "DataAuxInput6DecorationsEcuSpeedMph",
    "DataAuxInput6DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput6DecorationsEngineImmobilizer",
    "DataAuxInput6DecorationsEngineLoadPercent",
    "DataAuxInput6DecorationsEngineOilPressureKPa",
    "DataAuxInput6DecorationsEngineRpm",
    "DataAuxInput6DecorationsEngineStates",
    "DataAuxInput6DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput6DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput6DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput6DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput6DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput6DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput6DecorationsEvChargingStatus",
    "DataAuxInput6DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput6DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput6DecorationsEvDistanceDrivenMeters",
    "DataAuxInput6DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput6DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput6DecorationsFaultCodes",
    "DataAuxInput6DecorationsFaultCodesJ1939",
    "DataAuxInput6DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput6DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput6DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput6DecorationsFaultCodesObdii",
    "DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput6DecorationsFaultCodesOem",
    "DataAuxInput6DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput6DecorationsFuelPercents",
    "DataAuxInput6DecorationsGps",
    "DataAuxInput6DecorationsGpsAddress",
    "DataAuxInput6DecorationsGpsReverseGeo",
    "DataAuxInput6DecorationsGpsDistanceMeters",
    "DataAuxInput6DecorationsGpsOdometerMeters",
    "DataAuxInput6DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput6DecorationsObdEngineSeconds",
    "DataAuxInput6DecorationsObdOdometerMeters",
    "DataAuxInput6DecorationsSeatbeltDriver",
    "DataAuxInput6DecorationsSpreaderActive",
    "DataAuxInput6DecorationsSpreaderAirTemp",
    "DataAuxInput6DecorationsSpreaderBlastState",
    "DataAuxInput6DecorationsSpreaderGranularName",
    "DataAuxInput6DecorationsSpreaderGranularRate",
    "DataAuxInput6DecorationsSpreaderLiquidName",
    "DataAuxInput6DecorationsSpreaderLiquidRate",
    "DataAuxInput6DecorationsSpreaderOnState",
    "DataAuxInput6DecorationsSpreaderPlowStatus",
    "DataAuxInput6DecorationsSpreaderPrewetName",
    "DataAuxInput6DecorationsSpreaderPrewetRate",
    "DataAuxInput6DecorationsSpreaderRoadTemp",
    "DataAuxInput6DecorationsTirePressure",
    "DataAuxInput7",
    "DataAuxInput7Decorations",
    "DataAuxInput7DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput7DecorationsAuxInput1",
    "DataAuxInput7DecorationsAuxInput10",
    "DataAuxInput7DecorationsAuxInput11",
    "DataAuxInput7DecorationsAuxInput12",
    "DataAuxInput7DecorationsAuxInput13",
    "DataAuxInput7DecorationsAuxInput2",
    "DataAuxInput7DecorationsAuxInput3",
    "DataAuxInput7DecorationsAuxInput4",
    "DataAuxInput7DecorationsAuxInput5",
    "DataAuxInput7DecorationsAuxInput6",
    "DataAuxInput7DecorationsAuxInput7",
    "DataAuxInput7DecorationsAuxInput8",
    "DataAuxInput7DecorationsAuxInput9",
    "DataAuxInput7DecorationsBarometricPressurePa",
    "DataAuxInput7DecorationsBatteryMilliVolts",
    "DataAuxInput7DecorationsDefLevelMilliPercent",
    "DataAuxInput7DecorationsEcuSpeedMph",
    "DataAuxInput7DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput7DecorationsEngineImmobilizer",
    "DataAuxInput7DecorationsEngineLoadPercent",
    "DataAuxInput7DecorationsEngineOilPressureKPa",
    "DataAuxInput7DecorationsEngineRpm",
    "DataAuxInput7DecorationsEngineStates",
    "DataAuxInput7DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput7DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput7DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput7DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput7DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput7DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput7DecorationsEvChargingStatus",
    "DataAuxInput7DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput7DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput7DecorationsEvDistanceDrivenMeters",
    "DataAuxInput7DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput7DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput7DecorationsFaultCodes",
    "DataAuxInput7DecorationsFaultCodesJ1939",
    "DataAuxInput7DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput7DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput7DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput7DecorationsFaultCodesObdii",
    "DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput7DecorationsFaultCodesOem",
    "DataAuxInput7DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput7DecorationsFuelPercents",
    "DataAuxInput7DecorationsGps",
    "DataAuxInput7DecorationsGpsAddress",
    "DataAuxInput7DecorationsGpsReverseGeo",
    "DataAuxInput7DecorationsGpsDistanceMeters",
    "DataAuxInput7DecorationsGpsOdometerMeters",
    "DataAuxInput7DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput7DecorationsObdEngineSeconds",
    "DataAuxInput7DecorationsObdOdometerMeters",
    "DataAuxInput7DecorationsSeatbeltDriver",
    "DataAuxInput7DecorationsSpreaderActive",
    "DataAuxInput7DecorationsSpreaderAirTemp",
    "DataAuxInput7DecorationsSpreaderBlastState",
    "DataAuxInput7DecorationsSpreaderGranularName",
    "DataAuxInput7DecorationsSpreaderGranularRate",
    "DataAuxInput7DecorationsSpreaderLiquidName",
    "DataAuxInput7DecorationsSpreaderLiquidRate",
    "DataAuxInput7DecorationsSpreaderOnState",
    "DataAuxInput7DecorationsSpreaderPlowStatus",
    "DataAuxInput7DecorationsSpreaderPrewetName",
    "DataAuxInput7DecorationsSpreaderPrewetRate",
    "DataAuxInput7DecorationsSpreaderRoadTemp",
    "DataAuxInput7DecorationsTirePressure",
    "DataAuxInput8",
    "DataAuxInput8Decorations",
    "DataAuxInput8DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput8DecorationsAuxInput1",
    "DataAuxInput8DecorationsAuxInput10",
    "DataAuxInput8DecorationsAuxInput11",
    "DataAuxInput8DecorationsAuxInput12",
    "DataAuxInput8DecorationsAuxInput13",
    "DataAuxInput8DecorationsAuxInput2",
    "DataAuxInput8DecorationsAuxInput3",
    "DataAuxInput8DecorationsAuxInput4",
    "DataAuxInput8DecorationsAuxInput5",
    "DataAuxInput8DecorationsAuxInput6",
    "DataAuxInput8DecorationsAuxInput7",
    "DataAuxInput8DecorationsAuxInput8",
    "DataAuxInput8DecorationsAuxInput9",
    "DataAuxInput8DecorationsBarometricPressurePa",
    "DataAuxInput8DecorationsBatteryMilliVolts",
    "DataAuxInput8DecorationsDefLevelMilliPercent",
    "DataAuxInput8DecorationsEcuSpeedMph",
    "DataAuxInput8DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput8DecorationsEngineImmobilizer",
    "DataAuxInput8DecorationsEngineLoadPercent",
    "DataAuxInput8DecorationsEngineOilPressureKPa",
    "DataAuxInput8DecorationsEngineRpm",
    "DataAuxInput8DecorationsEngineStates",
    "DataAuxInput8DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput8DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput8DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput8DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput8DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput8DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput8DecorationsEvChargingStatus",
    "DataAuxInput8DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput8DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput8DecorationsEvDistanceDrivenMeters",
    "DataAuxInput8DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput8DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput8DecorationsFaultCodes",
    "DataAuxInput8DecorationsFaultCodesJ1939",
    "DataAuxInput8DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput8DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput8DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput8DecorationsFaultCodesObdii",
    "DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput8DecorationsFaultCodesOem",
    "DataAuxInput8DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput8DecorationsFuelPercents",
    "DataAuxInput8DecorationsGps",
    "DataAuxInput8DecorationsGpsAddress",
    "DataAuxInput8DecorationsGpsReverseGeo",
    "DataAuxInput8DecorationsGpsDistanceMeters",
    "DataAuxInput8DecorationsGpsOdometerMeters",
    "DataAuxInput8DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput8DecorationsObdEngineSeconds",
    "DataAuxInput8DecorationsObdOdometerMeters",
    "DataAuxInput8DecorationsSeatbeltDriver",
    "DataAuxInput8DecorationsSpreaderActive",
    "DataAuxInput8DecorationsSpreaderAirTemp",
    "DataAuxInput8DecorationsSpreaderBlastState",
    "DataAuxInput8DecorationsSpreaderGranularName",
    "DataAuxInput8DecorationsSpreaderGranularRate",
    "DataAuxInput8DecorationsSpreaderLiquidName",
    "DataAuxInput8DecorationsSpreaderLiquidRate",
    "DataAuxInput8DecorationsSpreaderOnState",
    "DataAuxInput8DecorationsSpreaderPlowStatus",
    "DataAuxInput8DecorationsSpreaderPrewetName",
    "DataAuxInput8DecorationsSpreaderPrewetRate",
    "DataAuxInput8DecorationsSpreaderRoadTemp",
    "DataAuxInput8DecorationsTirePressure",
    "DataAuxInput9",
    "DataAuxInput9Decorations",
    "DataAuxInput9DecorationsAmbientAirTemperatureMilliC",
    "DataAuxInput9DecorationsAuxInput1",
    "DataAuxInput9DecorationsAuxInput10",
    "DataAuxInput9DecorationsAuxInput11",
    "DataAuxInput9DecorationsAuxInput12",
    "DataAuxInput9DecorationsAuxInput13",
    "DataAuxInput9DecorationsAuxInput2",
    "DataAuxInput9DecorationsAuxInput3",
    "DataAuxInput9DecorationsAuxInput4",
    "DataAuxInput9DecorationsAuxInput5",
    "DataAuxInput9DecorationsAuxInput6",
    "DataAuxInput9DecorationsAuxInput7",
    "DataAuxInput9DecorationsAuxInput8",
    "DataAuxInput9DecorationsAuxInput9",
    "DataAuxInput9DecorationsBarometricPressurePa",
    "DataAuxInput9DecorationsBatteryMilliVolts",
    "DataAuxInput9DecorationsDefLevelMilliPercent",
    "DataAuxInput9DecorationsEcuSpeedMph",
    "DataAuxInput9DecorationsEngineCoolantTemperatureMilliC",
    "DataAuxInput9DecorationsEngineImmobilizer",
    "DataAuxInput9DecorationsEngineLoadPercent",
    "DataAuxInput9DecorationsEngineOilPressureKPa",
    "DataAuxInput9DecorationsEngineRpm",
    "DataAuxInput9DecorationsEngineStates",
    "DataAuxInput9DecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataAuxInput9DecorationsEvBatteryCurrentMilliAmp",
    "DataAuxInput9DecorationsEvBatteryStateOfHealthMilliPercent",
    "DataAuxInput9DecorationsEvBatteryVoltageMilliVolt",
    "DataAuxInput9DecorationsEvChargingCurrentMilliAmp",
    "DataAuxInput9DecorationsEvChargingEnergyMicroWh",
    "DataAuxInput9DecorationsEvChargingStatus",
    "DataAuxInput9DecorationsEvChargingVoltageMilliVolt",
    "DataAuxInput9DecorationsEvConsumedEnergyMicroWh",
    "DataAuxInput9DecorationsEvDistanceDrivenMeters",
    "DataAuxInput9DecorationsEvRegeneratedEnergyMicroWh",
    "DataAuxInput9DecorationsEvStateOfChargeMilliPercent",
    "DataAuxInput9DecorationsFaultCodes",
    "DataAuxInput9DecorationsFaultCodesJ1939",
    "DataAuxInput9DecorationsFaultCodesJ1939CheckEngineLights",
    "DataAuxInput9DecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataAuxInput9DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataAuxInput9DecorationsFaultCodesObdii",
    "DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataAuxInput9DecorationsFaultCodesOem",
    "DataAuxInput9DecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataAuxInput9DecorationsFuelPercents",
    "DataAuxInput9DecorationsGps",
    "DataAuxInput9DecorationsGpsAddress",
    "DataAuxInput9DecorationsGpsReverseGeo",
    "DataAuxInput9DecorationsGpsDistanceMeters",
    "DataAuxInput9DecorationsGpsOdometerMeters",
    "DataAuxInput9DecorationsIntakeManifoldTemperatureMilliC",
    "DataAuxInput9DecorationsObdEngineSeconds",
    "DataAuxInput9DecorationsObdOdometerMeters",
    "DataAuxInput9DecorationsSeatbeltDriver",
    "DataAuxInput9DecorationsSpreaderActive",
    "DataAuxInput9DecorationsSpreaderAirTemp",
    "DataAuxInput9DecorationsSpreaderBlastState",
    "DataAuxInput9DecorationsSpreaderGranularName",
    "DataAuxInput9DecorationsSpreaderGranularRate",
    "DataAuxInput9DecorationsSpreaderLiquidName",
    "DataAuxInput9DecorationsSpreaderLiquidRate",
    "DataAuxInput9DecorationsSpreaderOnState",
    "DataAuxInput9DecorationsSpreaderPlowStatus",
    "DataAuxInput9DecorationsSpreaderPrewetName",
    "DataAuxInput9DecorationsSpreaderPrewetRate",
    "DataAuxInput9DecorationsSpreaderRoadTemp",
    "DataAuxInput9DecorationsTirePressure",
    "DataBarometricPressurePa",
    "DataBarometricPressurePaDecorations",
    "DataBarometricPressurePaDecorationsAmbientAirTemperatureMilliC",
    "DataBarometricPressurePaDecorationsAuxInput1",
    "DataBarometricPressurePaDecorationsAuxInput10",
    "DataBarometricPressurePaDecorationsAuxInput11",
    "DataBarometricPressurePaDecorationsAuxInput12",
    "DataBarometricPressurePaDecorationsAuxInput13",
    "DataBarometricPressurePaDecorationsAuxInput2",
    "DataBarometricPressurePaDecorationsAuxInput3",
    "DataBarometricPressurePaDecorationsAuxInput4",
    "DataBarometricPressurePaDecorationsAuxInput5",
    "DataBarometricPressurePaDecorationsAuxInput6",
    "DataBarometricPressurePaDecorationsAuxInput7",
    "DataBarometricPressurePaDecorationsAuxInput8",
    "DataBarometricPressurePaDecorationsAuxInput9",
    "DataBarometricPressurePaDecorationsBarometricPressurePa",
    "DataBarometricPressurePaDecorationsBatteryMilliVolts",
    "DataBarometricPressurePaDecorationsDefLevelMilliPercent",
    "DataBarometricPressurePaDecorationsEcuSpeedMph",
    "DataBarometricPressurePaDecorationsEngineCoolantTemperatureMilliC",
    "DataBarometricPressurePaDecorationsEngineImmobilizer",
    "DataBarometricPressurePaDecorationsEngineLoadPercent",
    "DataBarometricPressurePaDecorationsEngineOilPressureKPa",
    "DataBarometricPressurePaDecorationsEngineRpm",
    "DataBarometricPressurePaDecorationsEngineStates",
    "DataBarometricPressurePaDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataBarometricPressurePaDecorationsEvBatteryCurrentMilliAmp",
    "DataBarometricPressurePaDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataBarometricPressurePaDecorationsEvBatteryVoltageMilliVolt",
    "DataBarometricPressurePaDecorationsEvChargingCurrentMilliAmp",
    "DataBarometricPressurePaDecorationsEvChargingEnergyMicroWh",
    "DataBarometricPressurePaDecorationsEvChargingStatus",
    "DataBarometricPressurePaDecorationsEvChargingVoltageMilliVolt",
    "DataBarometricPressurePaDecorationsEvConsumedEnergyMicroWh",
    "DataBarometricPressurePaDecorationsEvDistanceDrivenMeters",
    "DataBarometricPressurePaDecorationsEvRegeneratedEnergyMicroWh",
    "DataBarometricPressurePaDecorationsEvStateOfChargeMilliPercent",
    "DataBarometricPressurePaDecorationsFaultCodes",
    "DataBarometricPressurePaDecorationsFaultCodesJ1939",
    "DataBarometricPressurePaDecorationsFaultCodesJ1939CheckEngineLights",
    "DataBarometricPressurePaDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataBarometricPressurePaDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataBarometricPressurePaDecorationsFaultCodesObdii",
    "DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataBarometricPressurePaDecorationsFaultCodesOem",
    "DataBarometricPressurePaDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataBarometricPressurePaDecorationsFuelPercents",
    "DataBarometricPressurePaDecorationsGps",
    "DataBarometricPressurePaDecorationsGpsAddress",
    "DataBarometricPressurePaDecorationsGpsReverseGeo",
    "DataBarometricPressurePaDecorationsGpsDistanceMeters",
    "DataBarometricPressurePaDecorationsGpsOdometerMeters",
    "DataBarometricPressurePaDecorationsIntakeManifoldTemperatureMilliC",
    "DataBarometricPressurePaDecorationsObdEngineSeconds",
    "DataBarometricPressurePaDecorationsObdOdometerMeters",
    "DataBarometricPressurePaDecorationsSeatbeltDriver",
    "DataBarometricPressurePaDecorationsSpreaderActive",
    "DataBarometricPressurePaDecorationsSpreaderAirTemp",
    "DataBarometricPressurePaDecorationsSpreaderBlastState",
    "DataBarometricPressurePaDecorationsSpreaderGranularName",
    "DataBarometricPressurePaDecorationsSpreaderGranularRate",
    "DataBarometricPressurePaDecorationsSpreaderLiquidName",
    "DataBarometricPressurePaDecorationsSpreaderLiquidRate",
    "DataBarometricPressurePaDecorationsSpreaderOnState",
    "DataBarometricPressurePaDecorationsSpreaderPlowStatus",
    "DataBarometricPressurePaDecorationsSpreaderPrewetName",
    "DataBarometricPressurePaDecorationsSpreaderPrewetRate",
    "DataBarometricPressurePaDecorationsSpreaderRoadTemp",
    "DataBarometricPressurePaDecorationsTirePressure",
    "DataBatteryMilliVolt",
    "DataBatteryMilliVoltDecorations",
    "DataBatteryMilliVoltDecorationsAmbientAirTemperatureMilliC",
    "DataBatteryMilliVoltDecorationsAuxInput1",
    "DataBatteryMilliVoltDecorationsAuxInput10",
    "DataBatteryMilliVoltDecorationsAuxInput11",
    "DataBatteryMilliVoltDecorationsAuxInput12",
    "DataBatteryMilliVoltDecorationsAuxInput13",
    "DataBatteryMilliVoltDecorationsAuxInput2",
    "DataBatteryMilliVoltDecorationsAuxInput3",
    "DataBatteryMilliVoltDecorationsAuxInput4",
    "DataBatteryMilliVoltDecorationsAuxInput5",
    "DataBatteryMilliVoltDecorationsAuxInput6",
    "DataBatteryMilliVoltDecorationsAuxInput7",
    "DataBatteryMilliVoltDecorationsAuxInput8",
    "DataBatteryMilliVoltDecorationsAuxInput9",
    "DataBatteryMilliVoltDecorationsBarometricPressurePa",
    "DataBatteryMilliVoltDecorationsBatteryMilliVolts",
    "DataBatteryMilliVoltDecorationsDefLevelMilliPercent",
    "DataBatteryMilliVoltDecorationsEcuSpeedMph",
    "DataBatteryMilliVoltDecorationsEngineCoolantTemperatureMilliC",
    "DataBatteryMilliVoltDecorationsEngineImmobilizer",
    "DataBatteryMilliVoltDecorationsEngineLoadPercent",
    "DataBatteryMilliVoltDecorationsEngineOilPressureKPa",
    "DataBatteryMilliVoltDecorationsEngineRpm",
    "DataBatteryMilliVoltDecorationsEngineStates",
    "DataBatteryMilliVoltDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataBatteryMilliVoltDecorationsEvBatteryCurrentMilliAmp",
    "DataBatteryMilliVoltDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataBatteryMilliVoltDecorationsEvBatteryVoltageMilliVolt",
    "DataBatteryMilliVoltDecorationsEvChargingCurrentMilliAmp",
    "DataBatteryMilliVoltDecorationsEvChargingEnergyMicroWh",
    "DataBatteryMilliVoltDecorationsEvChargingStatus",
    "DataBatteryMilliVoltDecorationsEvChargingVoltageMilliVolt",
    "DataBatteryMilliVoltDecorationsEvConsumedEnergyMicroWh",
    "DataBatteryMilliVoltDecorationsEvDistanceDrivenMeters",
    "DataBatteryMilliVoltDecorationsEvRegeneratedEnergyMicroWh",
    "DataBatteryMilliVoltDecorationsEvStateOfChargeMilliPercent",
    "DataBatteryMilliVoltDecorationsFaultCodes",
    "DataBatteryMilliVoltDecorationsFaultCodesJ1939",
    "DataBatteryMilliVoltDecorationsFaultCodesJ1939CheckEngineLights",
    "DataBatteryMilliVoltDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataBatteryMilliVoltDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataBatteryMilliVoltDecorationsFaultCodesObdii",
    "DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataBatteryMilliVoltDecorationsFaultCodesOem",
    "DataBatteryMilliVoltDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataBatteryMilliVoltDecorationsFuelPercents",
    "DataBatteryMilliVoltDecorationsGps",
    "DataBatteryMilliVoltDecorationsGpsAddress",
    "DataBatteryMilliVoltDecorationsGpsReverseGeo",
    "DataBatteryMilliVoltDecorationsGpsDistanceMeters",
    "DataBatteryMilliVoltDecorationsGpsOdometerMeters",
    "DataBatteryMilliVoltDecorationsIntakeManifoldTemperatureMilliC",
    "DataBatteryMilliVoltDecorationsObdEngineSeconds",
    "DataBatteryMilliVoltDecorationsObdOdometerMeters",
    "DataBatteryMilliVoltDecorationsSeatbeltDriver",
    "DataBatteryMilliVoltDecorationsSpreaderActive",
    "DataBatteryMilliVoltDecorationsSpreaderAirTemp",
    "DataBatteryMilliVoltDecorationsSpreaderBlastState",
    "DataBatteryMilliVoltDecorationsSpreaderGranularName",
    "DataBatteryMilliVoltDecorationsSpreaderGranularRate",
    "DataBatteryMilliVoltDecorationsSpreaderLiquidName",
    "DataBatteryMilliVoltDecorationsSpreaderLiquidRate",
    "DataBatteryMilliVoltDecorationsSpreaderOnState",
    "DataBatteryMilliVoltDecorationsSpreaderPlowStatus",
    "DataBatteryMilliVoltDecorationsSpreaderPrewetName",
    "DataBatteryMilliVoltDecorationsSpreaderPrewetRate",
    "DataBatteryMilliVoltDecorationsSpreaderRoadTemp",
    "DataBatteryMilliVoltDecorationsTirePressure",
    "DataDefLevelMilliPercent",
    "DataDefLevelMilliPercentDecorations",
    "DataDefLevelMilliPercentDecorationsAmbientAirTemperatureMilliC",
    "DataDefLevelMilliPercentDecorationsAuxInput1",
    "DataDefLevelMilliPercentDecorationsAuxInput10",
    "DataDefLevelMilliPercentDecorationsAuxInput11",
    "DataDefLevelMilliPercentDecorationsAuxInput12",
    "DataDefLevelMilliPercentDecorationsAuxInput13",
    "DataDefLevelMilliPercentDecorationsAuxInput2",
    "DataDefLevelMilliPercentDecorationsAuxInput3",
    "DataDefLevelMilliPercentDecorationsAuxInput4",
    "DataDefLevelMilliPercentDecorationsAuxInput5",
    "DataDefLevelMilliPercentDecorationsAuxInput6",
    "DataDefLevelMilliPercentDecorationsAuxInput7",
    "DataDefLevelMilliPercentDecorationsAuxInput8",
    "DataDefLevelMilliPercentDecorationsAuxInput9",
    "DataDefLevelMilliPercentDecorationsBarometricPressurePa",
    "DataDefLevelMilliPercentDecorationsBatteryMilliVolts",
    "DataDefLevelMilliPercentDecorationsDefLevelMilliPercent",
    "DataDefLevelMilliPercentDecorationsEcuSpeedMph",
    "DataDefLevelMilliPercentDecorationsEngineCoolantTemperatureMilliC",
    "DataDefLevelMilliPercentDecorationsEngineImmobilizer",
    "DataDefLevelMilliPercentDecorationsEngineLoadPercent",
    "DataDefLevelMilliPercentDecorationsEngineOilPressureKPa",
    "DataDefLevelMilliPercentDecorationsEngineRpm",
    "DataDefLevelMilliPercentDecorationsEngineStates",
    "DataDefLevelMilliPercentDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataDefLevelMilliPercentDecorationsEvBatteryCurrentMilliAmp",
    "DataDefLevelMilliPercentDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataDefLevelMilliPercentDecorationsEvBatteryVoltageMilliVolt",
    "DataDefLevelMilliPercentDecorationsEvChargingCurrentMilliAmp",
    "DataDefLevelMilliPercentDecorationsEvChargingEnergyMicroWh",
    "DataDefLevelMilliPercentDecorationsEvChargingStatus",
    "DataDefLevelMilliPercentDecorationsEvChargingVoltageMilliVolt",
    "DataDefLevelMilliPercentDecorationsEvConsumedEnergyMicroWh",
    "DataDefLevelMilliPercentDecorationsEvDistanceDrivenMeters",
    "DataDefLevelMilliPercentDecorationsEvRegeneratedEnergyMicroWh",
    "DataDefLevelMilliPercentDecorationsEvStateOfChargeMilliPercent",
    "DataDefLevelMilliPercentDecorationsFaultCodes",
    "DataDefLevelMilliPercentDecorationsFaultCodesJ1939",
    "DataDefLevelMilliPercentDecorationsFaultCodesJ1939CheckEngineLights",
    "DataDefLevelMilliPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataDefLevelMilliPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataDefLevelMilliPercentDecorationsFaultCodesObdii",
    "DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataDefLevelMilliPercentDecorationsFaultCodesOem",
    "DataDefLevelMilliPercentDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataDefLevelMilliPercentDecorationsFuelPercents",
    "DataDefLevelMilliPercentDecorationsGps",
    "DataDefLevelMilliPercentDecorationsGpsAddress",
    "DataDefLevelMilliPercentDecorationsGpsReverseGeo",
    "DataDefLevelMilliPercentDecorationsGpsDistanceMeters",
    "DataDefLevelMilliPercentDecorationsGpsOdometerMeters",
    "DataDefLevelMilliPercentDecorationsIntakeManifoldTemperatureMilliC",
    "DataDefLevelMilliPercentDecorationsObdEngineSeconds",
    "DataDefLevelMilliPercentDecorationsObdOdometerMeters",
    "DataDefLevelMilliPercentDecorationsSeatbeltDriver",
    "DataDefLevelMilliPercentDecorationsSpreaderActive",
    "DataDefLevelMilliPercentDecorationsSpreaderAirTemp",
    "DataDefLevelMilliPercentDecorationsSpreaderBlastState",
    "DataDefLevelMilliPercentDecorationsSpreaderGranularName",
    "DataDefLevelMilliPercentDecorationsSpreaderGranularRate",
    "DataDefLevelMilliPercentDecorationsSpreaderLiquidName",
    "DataDefLevelMilliPercentDecorationsSpreaderLiquidRate",
    "DataDefLevelMilliPercentDecorationsSpreaderOnState",
    "DataDefLevelMilliPercentDecorationsSpreaderPlowStatus",
    "DataDefLevelMilliPercentDecorationsSpreaderPrewetName",
    "DataDefLevelMilliPercentDecorationsSpreaderPrewetRate",
    "DataDefLevelMilliPercentDecorationsSpreaderRoadTemp",
    "DataDefLevelMilliPercentDecorationsTirePressure",
    "DataEcuSpeedMph",
    "DataEcuSpeedMphDecorations",
    "DataEcuSpeedMphDecorationsAmbientAirTemperatureMilliC",
    "DataEcuSpeedMphDecorationsAuxInput1",
    "DataEcuSpeedMphDecorationsAuxInput10",
    "DataEcuSpeedMphDecorationsAuxInput11",
    "DataEcuSpeedMphDecorationsAuxInput12",
    "DataEcuSpeedMphDecorationsAuxInput13",
    "DataEcuSpeedMphDecorationsAuxInput2",
    "DataEcuSpeedMphDecorationsAuxInput3",
    "DataEcuSpeedMphDecorationsAuxInput4",
    "DataEcuSpeedMphDecorationsAuxInput5",
    "DataEcuSpeedMphDecorationsAuxInput6",
    "DataEcuSpeedMphDecorationsAuxInput7",
    "DataEcuSpeedMphDecorationsAuxInput8",
    "DataEcuSpeedMphDecorationsAuxInput9",
    "DataEcuSpeedMphDecorationsBarometricPressurePa",
    "DataEcuSpeedMphDecorationsBatteryMilliVolts",
    "DataEcuSpeedMphDecorationsDefLevelMilliPercent",
    "DataEcuSpeedMphDecorationsEcuSpeedMph",
    "DataEcuSpeedMphDecorationsEngineCoolantTemperatureMilliC",
    "DataEcuSpeedMphDecorationsEngineImmobilizer",
    "DataEcuSpeedMphDecorationsEngineLoadPercent",
    "DataEcuSpeedMphDecorationsEngineOilPressureKPa",
    "DataEcuSpeedMphDecorationsEngineRpm",
    "DataEcuSpeedMphDecorationsEngineStates",
    "DataEcuSpeedMphDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataEcuSpeedMphDecorationsEvBatteryCurrentMilliAmp",
    "DataEcuSpeedMphDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataEcuSpeedMphDecorationsEvBatteryVoltageMilliVolt",
    "DataEcuSpeedMphDecorationsEvChargingCurrentMilliAmp",
    "DataEcuSpeedMphDecorationsEvChargingEnergyMicroWh",
    "DataEcuSpeedMphDecorationsEvChargingStatus",
    "DataEcuSpeedMphDecorationsEvChargingVoltageMilliVolt",
    "DataEcuSpeedMphDecorationsEvConsumedEnergyMicroWh",
    "DataEcuSpeedMphDecorationsEvDistanceDrivenMeters",
    "DataEcuSpeedMphDecorationsEvRegeneratedEnergyMicroWh",
    "DataEcuSpeedMphDecorationsEvStateOfChargeMilliPercent",
    "DataEcuSpeedMphDecorationsFaultCodes",
    "DataEcuSpeedMphDecorationsFaultCodesJ1939",
    "DataEcuSpeedMphDecorationsFaultCodesJ1939CheckEngineLights",
    "DataEcuSpeedMphDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataEcuSpeedMphDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataEcuSpeedMphDecorationsFaultCodesObdii",
    "DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataEcuSpeedMphDecorationsFaultCodesOem",
    "DataEcuSpeedMphDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataEcuSpeedMphDecorationsFuelPercents",
    "DataEcuSpeedMphDecorationsGps",
    "DataEcuSpeedMphDecorationsGpsAddress",
    "DataEcuSpeedMphDecorationsGpsReverseGeo",
    "DataEcuSpeedMphDecorationsGpsDistanceMeters",
    "DataEcuSpeedMphDecorationsGpsOdometerMeters",
    "DataEcuSpeedMphDecorationsIntakeManifoldTemperatureMilliC",
    "DataEcuSpeedMphDecorationsObdEngineSeconds",
    "DataEcuSpeedMphDecorationsObdOdometerMeters",
    "DataEcuSpeedMphDecorationsSeatbeltDriver",
    "DataEcuSpeedMphDecorationsSpreaderActive",
    "DataEcuSpeedMphDecorationsSpreaderAirTemp",
    "DataEcuSpeedMphDecorationsSpreaderBlastState",
    "DataEcuSpeedMphDecorationsSpreaderGranularName",
    "DataEcuSpeedMphDecorationsSpreaderGranularRate",
    "DataEcuSpeedMphDecorationsSpreaderLiquidName",
    "DataEcuSpeedMphDecorationsSpreaderLiquidRate",
    "DataEcuSpeedMphDecorationsSpreaderOnState",
    "DataEcuSpeedMphDecorationsSpreaderPlowStatus",
    "DataEcuSpeedMphDecorationsSpreaderPrewetName",
    "DataEcuSpeedMphDecorationsSpreaderPrewetRate",
    "DataEcuSpeedMphDecorationsSpreaderRoadTemp",
    "DataEcuSpeedMphDecorationsTirePressure",
    "DataEngineCoolantTemperatureMilliC",
    "DataEngineCoolantTemperatureMilliCDecorations",
    "DataEngineCoolantTemperatureMilliCDecorationsAmbientAirTemperatureMilliC",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput1",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput10",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput11",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput12",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput13",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput2",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput3",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput4",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput5",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput6",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput7",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput8",
    "DataEngineCoolantTemperatureMilliCDecorationsAuxInput9",
    "DataEngineCoolantTemperatureMilliCDecorationsBarometricPressurePa",
    "DataEngineCoolantTemperatureMilliCDecorationsBatteryMilliVolts",
    "DataEngineCoolantTemperatureMilliCDecorationsDefLevelMilliPercent",
    "DataEngineCoolantTemperatureMilliCDecorationsEcuSpeedMph",
    "DataEngineCoolantTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC",
    "DataEngineCoolantTemperatureMilliCDecorationsEngineImmobilizer",
    "DataEngineCoolantTemperatureMilliCDecorationsEngineLoadPercent",
    "DataEngineCoolantTemperatureMilliCDecorationsEngineOilPressureKPa",
    "DataEngineCoolantTemperatureMilliCDecorationsEngineRpm",
    "DataEngineCoolantTemperatureMilliCDecorationsEngineStates",
    "DataEngineCoolantTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataEngineCoolantTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp",
    "DataEngineCoolantTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataEngineCoolantTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt",
    "DataEngineCoolantTemperatureMilliCDecorationsEvChargingCurrentMilliAmp",
    "DataEngineCoolantTemperatureMilliCDecorationsEvChargingEnergyMicroWh",
    "DataEngineCoolantTemperatureMilliCDecorationsEvChargingStatus",
    "DataEngineCoolantTemperatureMilliCDecorationsEvChargingVoltageMilliVolt",
    "DataEngineCoolantTemperatureMilliCDecorationsEvConsumedEnergyMicroWh",
    "DataEngineCoolantTemperatureMilliCDecorationsEvDistanceDrivenMeters",
    "DataEngineCoolantTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh",
    "DataEngineCoolantTemperatureMilliCDecorationsEvStateOfChargeMilliPercent",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodes",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdii",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesOem",
    "DataEngineCoolantTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataEngineCoolantTemperatureMilliCDecorationsFuelPercents",
    "DataEngineCoolantTemperatureMilliCDecorationsGps",
    "DataEngineCoolantTemperatureMilliCDecorationsGpsAddress",
    "DataEngineCoolantTemperatureMilliCDecorationsGpsReverseGeo",
    "DataEngineCoolantTemperatureMilliCDecorationsGpsDistanceMeters",
    "DataEngineCoolantTemperatureMilliCDecorationsGpsOdometerMeters",
    "DataEngineCoolantTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC",
    "DataEngineCoolantTemperatureMilliCDecorationsObdEngineSeconds",
    "DataEngineCoolantTemperatureMilliCDecorationsObdOdometerMeters",
    "DataEngineCoolantTemperatureMilliCDecorationsSeatbeltDriver",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderActive",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderAirTemp",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderBlastState",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderGranularName",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderGranularRate",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderLiquidName",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderLiquidRate",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderOnState",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderPlowStatus",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderPrewetName",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderPrewetRate",
    "DataEngineCoolantTemperatureMilliCDecorationsSpreaderRoadTemp",
    "DataEngineCoolantTemperatureMilliCDecorationsTirePressure",
    "DataEngineImmobilizer",
    "DataEngineImmobilizerDecorations",
    "DataEngineImmobilizerDecorationsAmbientAirTemperatureMilliC",
    "DataEngineImmobilizerDecorationsAuxInput1",
    "DataEngineImmobilizerDecorationsAuxInput10",
    "DataEngineImmobilizerDecorationsAuxInput11",
    "DataEngineImmobilizerDecorationsAuxInput12",
    "DataEngineImmobilizerDecorationsAuxInput13",
    "DataEngineImmobilizerDecorationsAuxInput2",
    "DataEngineImmobilizerDecorationsAuxInput3",
    "DataEngineImmobilizerDecorationsAuxInput4",
    "DataEngineImmobilizerDecorationsAuxInput5",
    "DataEngineImmobilizerDecorationsAuxInput6",
    "DataEngineImmobilizerDecorationsAuxInput7",
    "DataEngineImmobilizerDecorationsAuxInput8",
    "DataEngineImmobilizerDecorationsAuxInput9",
    "DataEngineImmobilizerDecorationsBarometricPressurePa",
    "DataEngineImmobilizerDecorationsBatteryMilliVolts",
    "DataEngineImmobilizerDecorationsDefLevelMilliPercent",
    "DataEngineImmobilizerDecorationsEcuSpeedMph",
    "DataEngineImmobilizerDecorationsEngineCoolantTemperatureMilliC",
    "DataEngineImmobilizerDecorationsEngineImmobilizer",
    "DataEngineImmobilizerDecorationsEngineLoadPercent",
    "DataEngineImmobilizerDecorationsEngineOilPressureKPa",
    "DataEngineImmobilizerDecorationsEngineRpm",
    "DataEngineImmobilizerDecorationsEngineStates",
    "DataEngineImmobilizerDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataEngineImmobilizerDecorationsEvBatteryCurrentMilliAmp",
    "DataEngineImmobilizerDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataEngineImmobilizerDecorationsEvBatteryVoltageMilliVolt",
    "DataEngineImmobilizerDecorationsEvChargingCurrentMilliAmp",
    "DataEngineImmobilizerDecorationsEvChargingEnergyMicroWh",
    "DataEngineImmobilizerDecorationsEvChargingStatus",
    "DataEngineImmobilizerDecorationsEvChargingVoltageMilliVolt",
    "DataEngineImmobilizerDecorationsEvConsumedEnergyMicroWh",
    "DataEngineImmobilizerDecorationsEvDistanceDrivenMeters",
    "DataEngineImmobilizerDecorationsEvRegeneratedEnergyMicroWh",
    "DataEngineImmobilizerDecorationsEvStateOfChargeMilliPercent",
    "DataEngineImmobilizerDecorationsFaultCodes",
    "DataEngineImmobilizerDecorationsFaultCodesJ1939",
    "DataEngineImmobilizerDecorationsFaultCodesJ1939CheckEngineLights",
    "DataEngineImmobilizerDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataEngineImmobilizerDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataEngineImmobilizerDecorationsFaultCodesObdii",
    "DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataEngineImmobilizerDecorationsFaultCodesOem",
    "DataEngineImmobilizerDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataEngineImmobilizerDecorationsFuelPercents",
    "DataEngineImmobilizerDecorationsGps",
    "DataEngineImmobilizerDecorationsGpsAddress",
    "DataEngineImmobilizerDecorationsGpsReverseGeo",
    "DataEngineImmobilizerDecorationsGpsDistanceMeters",
    "DataEngineImmobilizerDecorationsGpsOdometerMeters",
    "DataEngineImmobilizerDecorationsIntakeManifoldTemperatureMilliC",
    "DataEngineImmobilizerDecorationsObdEngineSeconds",
    "DataEngineImmobilizerDecorationsObdOdometerMeters",
    "DataEngineImmobilizerDecorationsSeatbeltDriver",
    "DataEngineImmobilizerDecorationsSpreaderActive",
    "DataEngineImmobilizerDecorationsSpreaderAirTemp",
    "DataEngineImmobilizerDecorationsSpreaderBlastState",
    "DataEngineImmobilizerDecorationsSpreaderGranularName",
    "DataEngineImmobilizerDecorationsSpreaderGranularRate",
    "DataEngineImmobilizerDecorationsSpreaderLiquidName",
    "DataEngineImmobilizerDecorationsSpreaderLiquidRate",
    "DataEngineImmobilizerDecorationsSpreaderOnState",
    "DataEngineImmobilizerDecorationsSpreaderPlowStatus",
    "DataEngineImmobilizerDecorationsSpreaderPrewetName",
    "DataEngineImmobilizerDecorationsSpreaderPrewetRate",
    "DataEngineImmobilizerDecorationsSpreaderRoadTemp",
    "DataEngineImmobilizerDecorationsTirePressure",
    "DataEngineLoadPercent",
    "DataEngineLoadPercentDecorations",
    "DataEngineLoadPercentDecorationsAmbientAirTemperatureMilliC",
    "DataEngineLoadPercentDecorationsAuxInput1",
    "DataEngineLoadPercentDecorationsAuxInput10",
    "DataEngineLoadPercentDecorationsAuxInput11",
    "DataEngineLoadPercentDecorationsAuxInput12",
    "DataEngineLoadPercentDecorationsAuxInput13",
    "DataEngineLoadPercentDecorationsAuxInput2",
    "DataEngineLoadPercentDecorationsAuxInput3",
    "DataEngineLoadPercentDecorationsAuxInput4",
    "DataEngineLoadPercentDecorationsAuxInput5",
    "DataEngineLoadPercentDecorationsAuxInput6",
    "DataEngineLoadPercentDecorationsAuxInput7",
    "DataEngineLoadPercentDecorationsAuxInput8",
    "DataEngineLoadPercentDecorationsAuxInput9",
    "DataEngineLoadPercentDecorationsBarometricPressurePa",
    "DataEngineLoadPercentDecorationsBatteryMilliVolts",
    "DataEngineLoadPercentDecorationsDefLevelMilliPercent",
    "DataEngineLoadPercentDecorationsEcuSpeedMph",
    "DataEngineLoadPercentDecorationsEngineCoolantTemperatureMilliC",
    "DataEngineLoadPercentDecorationsEngineImmobilizer",
    "DataEngineLoadPercentDecorationsEngineLoadPercent",
    "DataEngineLoadPercentDecorationsEngineOilPressureKPa",
    "DataEngineLoadPercentDecorationsEngineRpm",
    "DataEngineLoadPercentDecorationsEngineStates",
    "DataEngineLoadPercentDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataEngineLoadPercentDecorationsEvBatteryCurrentMilliAmp",
    "DataEngineLoadPercentDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataEngineLoadPercentDecorationsEvBatteryVoltageMilliVolt",
    "DataEngineLoadPercentDecorationsEvChargingCurrentMilliAmp",
    "DataEngineLoadPercentDecorationsEvChargingEnergyMicroWh",
    "DataEngineLoadPercentDecorationsEvChargingStatus",
    "DataEngineLoadPercentDecorationsEvChargingVoltageMilliVolt",
    "DataEngineLoadPercentDecorationsEvConsumedEnergyMicroWh",
    "DataEngineLoadPercentDecorationsEvDistanceDrivenMeters",
    "DataEngineLoadPercentDecorationsEvRegeneratedEnergyMicroWh",
    "DataEngineLoadPercentDecorationsEvStateOfChargeMilliPercent",
    "DataEngineLoadPercentDecorationsFaultCodes",
    "DataEngineLoadPercentDecorationsFaultCodesJ1939",
    "DataEngineLoadPercentDecorationsFaultCodesJ1939CheckEngineLights",
    "DataEngineLoadPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataEngineLoadPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataEngineLoadPercentDecorationsFaultCodesObdii",
    "DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataEngineLoadPercentDecorationsFaultCodesOem",
    "DataEngineLoadPercentDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataEngineLoadPercentDecorationsFuelPercents",
    "DataEngineLoadPercentDecorationsGps",
    "DataEngineLoadPercentDecorationsGpsAddress",
    "DataEngineLoadPercentDecorationsGpsReverseGeo",
    "DataEngineLoadPercentDecorationsGpsDistanceMeters",
    "DataEngineLoadPercentDecorationsGpsOdometerMeters",
    "DataEngineLoadPercentDecorationsIntakeManifoldTemperatureMilliC",
    "DataEngineLoadPercentDecorationsObdEngineSeconds",
    "DataEngineLoadPercentDecorationsObdOdometerMeters",
    "DataEngineLoadPercentDecorationsSeatbeltDriver",
    "DataEngineLoadPercentDecorationsSpreaderActive",
    "DataEngineLoadPercentDecorationsSpreaderAirTemp",
    "DataEngineLoadPercentDecorationsSpreaderBlastState",
    "DataEngineLoadPercentDecorationsSpreaderGranularName",
    "DataEngineLoadPercentDecorationsSpreaderGranularRate",
    "DataEngineLoadPercentDecorationsSpreaderLiquidName",
    "DataEngineLoadPercentDecorationsSpreaderLiquidRate",
    "DataEngineLoadPercentDecorationsSpreaderOnState",
    "DataEngineLoadPercentDecorationsSpreaderPlowStatus",
    "DataEngineLoadPercentDecorationsSpreaderPrewetName",
    "DataEngineLoadPercentDecorationsSpreaderPrewetRate",
    "DataEngineLoadPercentDecorationsSpreaderRoadTemp",
    "DataEngineLoadPercentDecorationsTirePressure",
    "DataEngineOilPressureKPa",
    "DataEngineOilPressureKPaDecorations",
    "DataEngineOilPressureKPaDecorationsAmbientAirTemperatureMilliC",
    "DataEngineOilPressureKPaDecorationsAuxInput1",
    "DataEngineOilPressureKPaDecorationsAuxInput10",
    "DataEngineOilPressureKPaDecorationsAuxInput11",
    "DataEngineOilPressureKPaDecorationsAuxInput12",
    "DataEngineOilPressureKPaDecorationsAuxInput13",
    "DataEngineOilPressureKPaDecorationsAuxInput2",
    "DataEngineOilPressureKPaDecorationsAuxInput3",
    "DataEngineOilPressureKPaDecorationsAuxInput4",
    "DataEngineOilPressureKPaDecorationsAuxInput5",
    "DataEngineOilPressureKPaDecorationsAuxInput6",
    "DataEngineOilPressureKPaDecorationsAuxInput7",
    "DataEngineOilPressureKPaDecorationsAuxInput8",
    "DataEngineOilPressureKPaDecorationsAuxInput9",
    "DataEngineOilPressureKPaDecorationsBarometricPressurePa",
    "DataEngineOilPressureKPaDecorationsBatteryMilliVolts",
    "DataEngineOilPressureKPaDecorationsDefLevelMilliPercent",
    "DataEngineOilPressureKPaDecorationsEcuSpeedMph",
    "DataEngineOilPressureKPaDecorationsEngineCoolantTemperatureMilliC",
    "DataEngineOilPressureKPaDecorationsEngineImmobilizer",
    "DataEngineOilPressureKPaDecorationsEngineLoadPercent",
    "DataEngineOilPressureKPaDecorationsEngineOilPressureKPa",
    "DataEngineOilPressureKPaDecorationsEngineRpm",
    "DataEngineOilPressureKPaDecorationsEngineStates",
    "DataEngineOilPressureKPaDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataEngineOilPressureKPaDecorationsEvBatteryCurrentMilliAmp",
    "DataEngineOilPressureKPaDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataEngineOilPressureKPaDecorationsEvBatteryVoltageMilliVolt",
    "DataEngineOilPressureKPaDecorationsEvChargingCurrentMilliAmp",
    "DataEngineOilPressureKPaDecorationsEvChargingEnergyMicroWh",
    "DataEngineOilPressureKPaDecorationsEvChargingStatus",
    "DataEngineOilPressureKPaDecorationsEvChargingVoltageMilliVolt",
    "DataEngineOilPressureKPaDecorationsEvConsumedEnergyMicroWh",
    "DataEngineOilPressureKPaDecorationsEvDistanceDrivenMeters",
    "DataEngineOilPressureKPaDecorationsEvRegeneratedEnergyMicroWh",
    "DataEngineOilPressureKPaDecorationsEvStateOfChargeMilliPercent",
    "DataEngineOilPressureKPaDecorationsFaultCodes",
    "DataEngineOilPressureKPaDecorationsFaultCodesJ1939",
    "DataEngineOilPressureKPaDecorationsFaultCodesJ1939CheckEngineLights",
    "DataEngineOilPressureKPaDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataEngineOilPressureKPaDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataEngineOilPressureKPaDecorationsFaultCodesObdii",
    "DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataEngineOilPressureKPaDecorationsFaultCodesOem",
    "DataEngineOilPressureKPaDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataEngineOilPressureKPaDecorationsFuelPercents",
    "DataEngineOilPressureKPaDecorationsGps",
    "DataEngineOilPressureKPaDecorationsGpsAddress",
    "DataEngineOilPressureKPaDecorationsGpsReverseGeo",
    "DataEngineOilPressureKPaDecorationsGpsDistanceMeters",
    "DataEngineOilPressureKPaDecorationsGpsOdometerMeters",
    "DataEngineOilPressureKPaDecorationsIntakeManifoldTemperatureMilliC",
    "DataEngineOilPressureKPaDecorationsObdEngineSeconds",
    "DataEngineOilPressureKPaDecorationsObdOdometerMeters",
    "DataEngineOilPressureKPaDecorationsSeatbeltDriver",
    "DataEngineOilPressureKPaDecorationsSpreaderActive",
    "DataEngineOilPressureKPaDecorationsSpreaderAirTemp",
    "DataEngineOilPressureKPaDecorationsSpreaderBlastState",
    "DataEngineOilPressureKPaDecorationsSpreaderGranularName",
    "DataEngineOilPressureKPaDecorationsSpreaderGranularRate",
    "DataEngineOilPressureKPaDecorationsSpreaderLiquidName",
    "DataEngineOilPressureKPaDecorationsSpreaderLiquidRate",
    "DataEngineOilPressureKPaDecorationsSpreaderOnState",
    "DataEngineOilPressureKPaDecorationsSpreaderPlowStatus",
    "DataEngineOilPressureKPaDecorationsSpreaderPrewetName",
    "DataEngineOilPressureKPaDecorationsSpreaderPrewetRate",
    "DataEngineOilPressureKPaDecorationsSpreaderRoadTemp",
    "DataEngineOilPressureKPaDecorationsTirePressure",
    "DataEngineRpm",
    "DataEngineRpmDecorations",
    "DataEngineRpmDecorationsAmbientAirTemperatureMilliC",
    "DataEngineRpmDecorationsAuxInput1",
    "DataEngineRpmDecorationsAuxInput10",
    "DataEngineRpmDecorationsAuxInput11",
    "DataEngineRpmDecorationsAuxInput12",
    "DataEngineRpmDecorationsAuxInput13",
    "DataEngineRpmDecorationsAuxInput2",
    "DataEngineRpmDecorationsAuxInput3",
    "DataEngineRpmDecorationsAuxInput4",
    "DataEngineRpmDecorationsAuxInput5",
    "DataEngineRpmDecorationsAuxInput6",
    "DataEngineRpmDecorationsAuxInput7",
    "DataEngineRpmDecorationsAuxInput8",
    "DataEngineRpmDecorationsAuxInput9",
    "DataEngineRpmDecorationsBarometricPressurePa",
    "DataEngineRpmDecorationsBatteryMilliVolts",
    "DataEngineRpmDecorationsDefLevelMilliPercent",
    "DataEngineRpmDecorationsEcuSpeedMph",
    "DataEngineRpmDecorationsEngineCoolantTemperatureMilliC",
    "DataEngineRpmDecorationsEngineImmobilizer",
    "DataEngineRpmDecorationsEngineLoadPercent",
    "DataEngineRpmDecorationsEngineOilPressureKPa",
    "DataEngineRpmDecorationsEngineRpm",
    "DataEngineRpmDecorationsEngineStates",
    "DataEngineRpmDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataEngineRpmDecorationsEvBatteryCurrentMilliAmp",
    "DataEngineRpmDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataEngineRpmDecorationsEvBatteryVoltageMilliVolt",
    "DataEngineRpmDecorationsEvChargingCurrentMilliAmp",
    "DataEngineRpmDecorationsEvChargingEnergyMicroWh",
    "DataEngineRpmDecorationsEvChargingStatus",
    "DataEngineRpmDecorationsEvChargingVoltageMilliVolt",
    "DataEngineRpmDecorationsEvConsumedEnergyMicroWh",
    "DataEngineRpmDecorationsEvDistanceDrivenMeters",
    "DataEngineRpmDecorationsEvRegeneratedEnergyMicroWh",
    "DataEngineRpmDecorationsEvStateOfChargeMilliPercent",
    "DataEngineRpmDecorationsFaultCodes",
    "DataEngineRpmDecorationsFaultCodesJ1939",
    "DataEngineRpmDecorationsFaultCodesJ1939CheckEngineLights",
    "DataEngineRpmDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataEngineRpmDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataEngineRpmDecorationsFaultCodesObdii",
    "DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataEngineRpmDecorationsFaultCodesOem",
    "DataEngineRpmDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataEngineRpmDecorationsFuelPercents",
    "DataEngineRpmDecorationsGps",
    "DataEngineRpmDecorationsGpsAddress",
    "DataEngineRpmDecorationsGpsReverseGeo",
    "DataEngineRpmDecorationsGpsDistanceMeters",
    "DataEngineRpmDecorationsGpsOdometerMeters",
    "DataEngineRpmDecorationsIntakeManifoldTemperatureMilliC",
    "DataEngineRpmDecorationsObdEngineSeconds",
    "DataEngineRpmDecorationsObdOdometerMeters",
    "DataEngineRpmDecorationsSeatbeltDriver",
    "DataEngineRpmDecorationsSpreaderActive",
    "DataEngineRpmDecorationsSpreaderAirTemp",
    "DataEngineRpmDecorationsSpreaderBlastState",
    "DataEngineRpmDecorationsSpreaderGranularName",
    "DataEngineRpmDecorationsSpreaderGranularRate",
    "DataEngineRpmDecorationsSpreaderLiquidName",
    "DataEngineRpmDecorationsSpreaderLiquidRate",
    "DataEngineRpmDecorationsSpreaderOnState",
    "DataEngineRpmDecorationsSpreaderPlowStatus",
    "DataEngineRpmDecorationsSpreaderPrewetName",
    "DataEngineRpmDecorationsSpreaderPrewetRate",
    "DataEngineRpmDecorationsSpreaderRoadTemp",
    "DataEngineRpmDecorationsTirePressure",
    "DataEngineState",
    "DataEngineStateDecorations",
    "DataEngineStateDecorationsAmbientAirTemperatureMilliC",
    "DataEngineStateDecorationsAuxInput1",
    "DataEngineStateDecorationsAuxInput10",
    "DataEngineStateDecorationsAuxInput11",
    "DataEngineStateDecorationsAuxInput12",
    "DataEngineStateDecorationsAuxInput13",
    "DataEngineStateDecorationsAuxInput2",
    "DataEngineStateDecorationsAuxInput3",
    "DataEngineStateDecorationsAuxInput4",
    "DataEngineStateDecorationsAuxInput5",
    "DataEngineStateDecorationsAuxInput6",
    "DataEngineStateDecorationsAuxInput7",
    "DataEngineStateDecorationsAuxInput8",
    "DataEngineStateDecorationsAuxInput9",
    "DataEngineStateDecorationsBarometricPressurePa",
    "DataEngineStateDecorationsBatteryMilliVolts",
    "DataEngineStateDecorationsDefLevelMilliPercent",
    "DataEngineStateDecorationsEcuSpeedMph",
    "DataEngineStateDecorationsEngineCoolantTemperatureMilliC",
    "DataEngineStateDecorationsEngineImmobilizer",
    "DataEngineStateDecorationsEngineLoadPercent",
    "DataEngineStateDecorationsEngineOilPressureKPa",
    "DataEngineStateDecorationsEngineRpm",
    "DataEngineStateDecorationsEngineStates",
    "DataEngineStateDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataEngineStateDecorationsEvBatteryCurrentMilliAmp",
    "DataEngineStateDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataEngineStateDecorationsEvBatteryVoltageMilliVolt",
    "DataEngineStateDecorationsEvChargingCurrentMilliAmp",
    "DataEngineStateDecorationsEvChargingEnergyMicroWh",
    "DataEngineStateDecorationsEvChargingStatus",
    "DataEngineStateDecorationsEvChargingVoltageMilliVolt",
    "DataEngineStateDecorationsEvConsumedEnergyMicroWh",
    "DataEngineStateDecorationsEvDistanceDrivenMeters",
    "DataEngineStateDecorationsEvRegeneratedEnergyMicroWh",
    "DataEngineStateDecorationsEvStateOfChargeMilliPercent",
    "DataEngineStateDecorationsFaultCodes",
    "DataEngineStateDecorationsFaultCodesJ1939",
    "DataEngineStateDecorationsFaultCodesJ1939CheckEngineLights",
    "DataEngineStateDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataEngineStateDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataEngineStateDecorationsFaultCodesObdii",
    "DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataEngineStateDecorationsFaultCodesOem",
    "DataEngineStateDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataEngineStateDecorationsFuelPercents",
    "DataEngineStateDecorationsGps",
    "DataEngineStateDecorationsGpsAddress",
    "DataEngineStateDecorationsGpsReverseGeo",
    "DataEngineStateDecorationsGpsDistanceMeters",
    "DataEngineStateDecorationsGpsOdometerMeters",
    "DataEngineStateDecorationsIntakeManifoldTemperatureMilliC",
    "DataEngineStateDecorationsObdEngineSeconds",
    "DataEngineStateDecorationsObdOdometerMeters",
    "DataEngineStateDecorationsSeatbeltDriver",
    "DataEngineStateDecorationsSpreaderActive",
    "DataEngineStateDecorationsSpreaderAirTemp",
    "DataEngineStateDecorationsSpreaderBlastState",
    "DataEngineStateDecorationsSpreaderGranularName",
    "DataEngineStateDecorationsSpreaderGranularRate",
    "DataEngineStateDecorationsSpreaderLiquidName",
    "DataEngineStateDecorationsSpreaderLiquidRate",
    "DataEngineStateDecorationsSpreaderOnState",
    "DataEngineStateDecorationsSpreaderPlowStatus",
    "DataEngineStateDecorationsSpreaderPrewetName",
    "DataEngineStateDecorationsSpreaderPrewetRate",
    "DataEngineStateDecorationsSpreaderRoadTemp",
    "DataEngineStateDecorationsTirePressure",
    "DataEvAverageBatteryTemperatureMilliCelsius",
    "DataEvBatteryCurrentMilliAmp",
    "DataEvBatteryStateOfHealthMilliPercent",
    "DataEvBatteryVoltageMilliVolt",
    "DataEvChargingCurrentMilliAmp",
    "DataEvChargingEnergyMicroWh",
    "DataEvChargingStatus",
    "DataEvChargingVoltageMilliVolt",
    "DataEvConsumedEnergyMicroWh",
    "DataEvDistanceDrivenMeter",
    "DataEvRegeneratedEnergyMicroWh",
    "DataEvStateOfChargeMilliPercent",
    "DataFaultCode",
    "DataFaultCodeDecorations",
    "DataFaultCodeDecorationsAmbientAirTemperatureMilliC",
    "DataFaultCodeDecorationsAuxInput1",
    "DataFaultCodeDecorationsAuxInput10",
    "DataFaultCodeDecorationsAuxInput11",
    "DataFaultCodeDecorationsAuxInput12",
    "DataFaultCodeDecorationsAuxInput13",
    "DataFaultCodeDecorationsAuxInput2",
    "DataFaultCodeDecorationsAuxInput3",
    "DataFaultCodeDecorationsAuxInput4",
    "DataFaultCodeDecorationsAuxInput5",
    "DataFaultCodeDecorationsAuxInput6",
    "DataFaultCodeDecorationsAuxInput7",
    "DataFaultCodeDecorationsAuxInput8",
    "DataFaultCodeDecorationsAuxInput9",
    "DataFaultCodeDecorationsBarometricPressurePa",
    "DataFaultCodeDecorationsBatteryMilliVolts",
    "DataFaultCodeDecorationsDefLevelMilliPercent",
    "DataFaultCodeDecorationsEcuSpeedMph",
    "DataFaultCodeDecorationsEngineCoolantTemperatureMilliC",
    "DataFaultCodeDecorationsEngineImmobilizer",
    "DataFaultCodeDecorationsEngineLoadPercent",
    "DataFaultCodeDecorationsEngineOilPressureKPa",
    "DataFaultCodeDecorationsEngineRpm",
    "DataFaultCodeDecorationsEngineStates",
    "DataFaultCodeDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataFaultCodeDecorationsEvBatteryCurrentMilliAmp",
    "DataFaultCodeDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataFaultCodeDecorationsEvBatteryVoltageMilliVolt",
    "DataFaultCodeDecorationsEvChargingCurrentMilliAmp",
    "DataFaultCodeDecorationsEvChargingEnergyMicroWh",
    "DataFaultCodeDecorationsEvChargingStatus",
    "DataFaultCodeDecorationsEvChargingVoltageMilliVolt",
    "DataFaultCodeDecorationsEvConsumedEnergyMicroWh",
    "DataFaultCodeDecorationsEvDistanceDrivenMeters",
    "DataFaultCodeDecorationsEvRegeneratedEnergyMicroWh",
    "DataFaultCodeDecorationsEvStateOfChargeMilliPercent",
    "DataFaultCodeDecorationsFaultCodes",
    "DataFaultCodeDecorationsFaultCodesJ1939",
    "DataFaultCodeDecorationsFaultCodesJ1939CheckEngineLights",
    "DataFaultCodeDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataFaultCodeDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataFaultCodeDecorationsFaultCodesObdii",
    "DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataFaultCodeDecorationsFaultCodesOem",
    "DataFaultCodeDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataFaultCodeDecorationsFuelPercents",
    "DataFaultCodeDecorationsGps",
    "DataFaultCodeDecorationsGpsAddress",
    "DataFaultCodeDecorationsGpsReverseGeo",
    "DataFaultCodeDecorationsGpsDistanceMeters",
    "DataFaultCodeDecorationsGpsOdometerMeters",
    "DataFaultCodeDecorationsIntakeManifoldTemperatureMilliC",
    "DataFaultCodeDecorationsObdEngineSeconds",
    "DataFaultCodeDecorationsObdOdometerMeters",
    "DataFaultCodeDecorationsSeatbeltDriver",
    "DataFaultCodeDecorationsSpreaderActive",
    "DataFaultCodeDecorationsSpreaderAirTemp",
    "DataFaultCodeDecorationsSpreaderBlastState",
    "DataFaultCodeDecorationsSpreaderGranularName",
    "DataFaultCodeDecorationsSpreaderGranularRate",
    "DataFaultCodeDecorationsSpreaderLiquidName",
    "DataFaultCodeDecorationsSpreaderLiquidRate",
    "DataFaultCodeDecorationsSpreaderOnState",
    "DataFaultCodeDecorationsSpreaderPlowStatus",
    "DataFaultCodeDecorationsSpreaderPrewetName",
    "DataFaultCodeDecorationsSpreaderPrewetRate",
    "DataFaultCodeDecorationsSpreaderRoadTemp",
    "DataFaultCodeDecorationsTirePressure",
    "DataFaultCodeJ1939",
    "DataFaultCodeJ1939CheckEngineLights",
    "DataFaultCodeJ1939DiagnosticTroubleCode",
    "DataFaultCodeJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataFaultCodeObdii",
    "DataFaultCodeObdiiDiagnosticTroubleCode",
    "DataFaultCodeObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataFaultCodeObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataFaultCodeObdiiDiagnosticTroubleCodePendingDtc",
    "DataFaultCodeObdiiDiagnosticTroubleCodePermanentDtc",
    "DataFaultCodeOem",
    "DataFaultCodeOemDiagnosticTroubleCode",
    "DataFuelPercent",
    "DataFuelPercentDecorations",
    "DataFuelPercentDecorationsAmbientAirTemperatureMilliC",
    "DataFuelPercentDecorationsAuxInput1",
    "DataFuelPercentDecorationsAuxInput10",
    "DataFuelPercentDecorationsAuxInput11",
    "DataFuelPercentDecorationsAuxInput12",
    "DataFuelPercentDecorationsAuxInput13",
    "DataFuelPercentDecorationsAuxInput2",
    "DataFuelPercentDecorationsAuxInput3",
    "DataFuelPercentDecorationsAuxInput4",
    "DataFuelPercentDecorationsAuxInput5",
    "DataFuelPercentDecorationsAuxInput6",
    "DataFuelPercentDecorationsAuxInput7",
    "DataFuelPercentDecorationsAuxInput8",
    "DataFuelPercentDecorationsAuxInput9",
    "DataFuelPercentDecorationsBarometricPressurePa",
    "DataFuelPercentDecorationsBatteryMilliVolts",
    "DataFuelPercentDecorationsDefLevelMilliPercent",
    "DataFuelPercentDecorationsEcuSpeedMph",
    "DataFuelPercentDecorationsEngineCoolantTemperatureMilliC",
    "DataFuelPercentDecorationsEngineImmobilizer",
    "DataFuelPercentDecorationsEngineLoadPercent",
    "DataFuelPercentDecorationsEngineOilPressureKPa",
    "DataFuelPercentDecorationsEngineRpm",
    "DataFuelPercentDecorationsEngineStates",
    "DataFuelPercentDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataFuelPercentDecorationsEvBatteryCurrentMilliAmp",
    "DataFuelPercentDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataFuelPercentDecorationsEvBatteryVoltageMilliVolt",
    "DataFuelPercentDecorationsEvChargingCurrentMilliAmp",
    "DataFuelPercentDecorationsEvChargingEnergyMicroWh",
    "DataFuelPercentDecorationsEvChargingStatus",
    "DataFuelPercentDecorationsEvChargingVoltageMilliVolt",
    "DataFuelPercentDecorationsEvConsumedEnergyMicroWh",
    "DataFuelPercentDecorationsEvDistanceDrivenMeters",
    "DataFuelPercentDecorationsEvRegeneratedEnergyMicroWh",
    "DataFuelPercentDecorationsEvStateOfChargeMilliPercent",
    "DataFuelPercentDecorationsFaultCodes",
    "DataFuelPercentDecorationsFaultCodesJ1939",
    "DataFuelPercentDecorationsFaultCodesJ1939CheckEngineLights",
    "DataFuelPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataFuelPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataFuelPercentDecorationsFaultCodesObdii",
    "DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataFuelPercentDecorationsFaultCodesOem",
    "DataFuelPercentDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataFuelPercentDecorationsFuelPercents",
    "DataFuelPercentDecorationsGps",
    "DataFuelPercentDecorationsGpsAddress",
    "DataFuelPercentDecorationsGpsReverseGeo",
    "DataFuelPercentDecorationsGpsDistanceMeters",
    "DataFuelPercentDecorationsGpsOdometerMeters",
    "DataFuelPercentDecorationsIntakeManifoldTemperatureMilliC",
    "DataFuelPercentDecorationsObdEngineSeconds",
    "DataFuelPercentDecorationsObdOdometerMeters",
    "DataFuelPercentDecorationsSeatbeltDriver",
    "DataFuelPercentDecorationsSpreaderActive",
    "DataFuelPercentDecorationsSpreaderAirTemp",
    "DataFuelPercentDecorationsSpreaderBlastState",
    "DataFuelPercentDecorationsSpreaderGranularName",
    "DataFuelPercentDecorationsSpreaderGranularRate",
    "DataFuelPercentDecorationsSpreaderLiquidName",
    "DataFuelPercentDecorationsSpreaderLiquidRate",
    "DataFuelPercentDecorationsSpreaderOnState",
    "DataFuelPercentDecorationsSpreaderPlowStatus",
    "DataFuelPercentDecorationsSpreaderPrewetName",
    "DataFuelPercentDecorationsSpreaderPrewetRate",
    "DataFuelPercentDecorationsSpreaderRoadTemp",
    "DataFuelPercentDecorationsTirePressure",
    "DataGp",
    "DataGpAddress",
    "DataGpDecorations",
    "DataGpDecorationsAmbientAirTemperatureMilliC",
    "DataGpDecorationsAuxInput1",
    "DataGpDecorationsAuxInput10",
    "DataGpDecorationsAuxInput11",
    "DataGpDecorationsAuxInput12",
    "DataGpDecorationsAuxInput13",
    "DataGpDecorationsAuxInput2",
    "DataGpDecorationsAuxInput3",
    "DataGpDecorationsAuxInput4",
    "DataGpDecorationsAuxInput5",
    "DataGpDecorationsAuxInput6",
    "DataGpDecorationsAuxInput7",
    "DataGpDecorationsAuxInput8",
    "DataGpDecorationsAuxInput9",
    "DataGpDecorationsBarometricPressurePa",
    "DataGpDecorationsBatteryMilliVolts",
    "DataGpDecorationsDefLevelMilliPercent",
    "DataGpDecorationsEcuSpeedMph",
    "DataGpDecorationsEngineCoolantTemperatureMilliC",
    "DataGpDecorationsEngineImmobilizer",
    "DataGpDecorationsEngineLoadPercent",
    "DataGpDecorationsEngineOilPressureKPa",
    "DataGpDecorationsEngineRpm",
    "DataGpDecorationsEngineStates",
    "DataGpDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataGpDecorationsEvBatteryCurrentMilliAmp",
    "DataGpDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataGpDecorationsEvBatteryVoltageMilliVolt",
    "DataGpDecorationsEvChargingCurrentMilliAmp",
    "DataGpDecorationsEvChargingEnergyMicroWh",
    "DataGpDecorationsEvChargingStatus",
    "DataGpDecorationsEvChargingVoltageMilliVolt",
    "DataGpDecorationsEvConsumedEnergyMicroWh",
    "DataGpDecorationsEvDistanceDrivenMeters",
    "DataGpDecorationsEvRegeneratedEnergyMicroWh",
    "DataGpDecorationsEvStateOfChargeMilliPercent",
    "DataGpDecorationsFaultCodes",
    "DataGpDecorationsFaultCodesJ1939",
    "DataGpDecorationsFaultCodesJ1939CheckEngineLights",
    "DataGpDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataGpDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataGpDecorationsFaultCodesObdii",
    "DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataGpDecorationsFaultCodesOem",
    "DataGpDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataGpDecorationsFuelPercents",
    "DataGpDecorationsGps",
    "DataGpDecorationsGpsAddress",
    "DataGpDecorationsGpsReverseGeo",
    "DataGpDecorationsGpsDistanceMeters",
    "DataGpDecorationsGpsOdometerMeters",
    "DataGpDecorationsIntakeManifoldTemperatureMilliC",
    "DataGpDecorationsObdEngineSeconds",
    "DataGpDecorationsObdOdometerMeters",
    "DataGpDecorationsSeatbeltDriver",
    "DataGpDecorationsSpreaderActive",
    "DataGpDecorationsSpreaderAirTemp",
    "DataGpDecorationsSpreaderBlastState",
    "DataGpDecorationsSpreaderGranularName",
    "DataGpDecorationsSpreaderGranularRate",
    "DataGpDecorationsSpreaderLiquidName",
    "DataGpDecorationsSpreaderLiquidRate",
    "DataGpDecorationsSpreaderOnState",
    "DataGpDecorationsSpreaderPlowStatus",
    "DataGpDecorationsSpreaderPrewetName",
    "DataGpDecorationsSpreaderPrewetRate",
    "DataGpDecorationsSpreaderRoadTemp",
    "DataGpDecorationsTirePressure",
    "DataGpReverseGeo",
    "DataGpsDistanceMeter",
    "DataGpsDistanceMeterDecorations",
    "DataGpsDistanceMeterDecorationsAmbientAirTemperatureMilliC",
    "DataGpsDistanceMeterDecorationsAuxInput1",
    "DataGpsDistanceMeterDecorationsAuxInput10",
    "DataGpsDistanceMeterDecorationsAuxInput11",
    "DataGpsDistanceMeterDecorationsAuxInput12",
    "DataGpsDistanceMeterDecorationsAuxInput13",
    "DataGpsDistanceMeterDecorationsAuxInput2",
    "DataGpsDistanceMeterDecorationsAuxInput3",
    "DataGpsDistanceMeterDecorationsAuxInput4",
    "DataGpsDistanceMeterDecorationsAuxInput5",
    "DataGpsDistanceMeterDecorationsAuxInput6",
    "DataGpsDistanceMeterDecorationsAuxInput7",
    "DataGpsDistanceMeterDecorationsAuxInput8",
    "DataGpsDistanceMeterDecorationsAuxInput9",
    "DataGpsDistanceMeterDecorationsBarometricPressurePa",
    "DataGpsDistanceMeterDecorationsBatteryMilliVolts",
    "DataGpsDistanceMeterDecorationsDefLevelMilliPercent",
    "DataGpsDistanceMeterDecorationsEcuSpeedMph",
    "DataGpsDistanceMeterDecorationsEngineCoolantTemperatureMilliC",
    "DataGpsDistanceMeterDecorationsEngineImmobilizer",
    "DataGpsDistanceMeterDecorationsEngineLoadPercent",
    "DataGpsDistanceMeterDecorationsEngineOilPressureKPa",
    "DataGpsDistanceMeterDecorationsEngineRpm",
    "DataGpsDistanceMeterDecorationsEngineStates",
    "DataGpsDistanceMeterDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataGpsDistanceMeterDecorationsEvBatteryCurrentMilliAmp",
    "DataGpsDistanceMeterDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataGpsDistanceMeterDecorationsEvBatteryVoltageMilliVolt",
    "DataGpsDistanceMeterDecorationsEvChargingCurrentMilliAmp",
    "DataGpsDistanceMeterDecorationsEvChargingEnergyMicroWh",
    "DataGpsDistanceMeterDecorationsEvChargingStatus",
    "DataGpsDistanceMeterDecorationsEvChargingVoltageMilliVolt",
    "DataGpsDistanceMeterDecorationsEvConsumedEnergyMicroWh",
    "DataGpsDistanceMeterDecorationsEvDistanceDrivenMeters",
    "DataGpsDistanceMeterDecorationsEvRegeneratedEnergyMicroWh",
    "DataGpsDistanceMeterDecorationsEvStateOfChargeMilliPercent",
    "DataGpsDistanceMeterDecorationsFaultCodes",
    "DataGpsDistanceMeterDecorationsFaultCodesJ1939",
    "DataGpsDistanceMeterDecorationsFaultCodesJ1939CheckEngineLights",
    "DataGpsDistanceMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataGpsDistanceMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataGpsDistanceMeterDecorationsFaultCodesObdii",
    "DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataGpsDistanceMeterDecorationsFaultCodesOem",
    "DataGpsDistanceMeterDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataGpsDistanceMeterDecorationsFuelPercents",
    "DataGpsDistanceMeterDecorationsGps",
    "DataGpsDistanceMeterDecorationsGpsAddress",
    "DataGpsDistanceMeterDecorationsGpsReverseGeo",
    "DataGpsDistanceMeterDecorationsGpsDistanceMeters",
    "DataGpsDistanceMeterDecorationsGpsOdometerMeters",
    "DataGpsDistanceMeterDecorationsIntakeManifoldTemperatureMilliC",
    "DataGpsDistanceMeterDecorationsObdEngineSeconds",
    "DataGpsDistanceMeterDecorationsObdOdometerMeters",
    "DataGpsDistanceMeterDecorationsSeatbeltDriver",
    "DataGpsDistanceMeterDecorationsSpreaderActive",
    "DataGpsDistanceMeterDecorationsSpreaderAirTemp",
    "DataGpsDistanceMeterDecorationsSpreaderBlastState",
    "DataGpsDistanceMeterDecorationsSpreaderGranularName",
    "DataGpsDistanceMeterDecorationsSpreaderGranularRate",
    "DataGpsDistanceMeterDecorationsSpreaderLiquidName",
    "DataGpsDistanceMeterDecorationsSpreaderLiquidRate",
    "DataGpsDistanceMeterDecorationsSpreaderOnState",
    "DataGpsDistanceMeterDecorationsSpreaderPlowStatus",
    "DataGpsDistanceMeterDecorationsSpreaderPrewetName",
    "DataGpsDistanceMeterDecorationsSpreaderPrewetRate",
    "DataGpsDistanceMeterDecorationsSpreaderRoadTemp",
    "DataGpsDistanceMeterDecorationsTirePressure",
    "DataGpsOdometerMeter",
    "DataGpsOdometerMeterDecorations",
    "DataGpsOdometerMeterDecorationsAmbientAirTemperatureMilliC",
    "DataGpsOdometerMeterDecorationsAuxInput1",
    "DataGpsOdometerMeterDecorationsAuxInput10",
    "DataGpsOdometerMeterDecorationsAuxInput11",
    "DataGpsOdometerMeterDecorationsAuxInput12",
    "DataGpsOdometerMeterDecorationsAuxInput13",
    "DataGpsOdometerMeterDecorationsAuxInput2",
    "DataGpsOdometerMeterDecorationsAuxInput3",
    "DataGpsOdometerMeterDecorationsAuxInput4",
    "DataGpsOdometerMeterDecorationsAuxInput5",
    "DataGpsOdometerMeterDecorationsAuxInput6",
    "DataGpsOdometerMeterDecorationsAuxInput7",
    "DataGpsOdometerMeterDecorationsAuxInput8",
    "DataGpsOdometerMeterDecorationsAuxInput9",
    "DataGpsOdometerMeterDecorationsBarometricPressurePa",
    "DataGpsOdometerMeterDecorationsBatteryMilliVolts",
    "DataGpsOdometerMeterDecorationsDefLevelMilliPercent",
    "DataGpsOdometerMeterDecorationsEcuSpeedMph",
    "DataGpsOdometerMeterDecorationsEngineCoolantTemperatureMilliC",
    "DataGpsOdometerMeterDecorationsEngineImmobilizer",
    "DataGpsOdometerMeterDecorationsEngineLoadPercent",
    "DataGpsOdometerMeterDecorationsEngineOilPressureKPa",
    "DataGpsOdometerMeterDecorationsEngineRpm",
    "DataGpsOdometerMeterDecorationsEngineStates",
    "DataGpsOdometerMeterDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataGpsOdometerMeterDecorationsEvBatteryCurrentMilliAmp",
    "DataGpsOdometerMeterDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataGpsOdometerMeterDecorationsEvBatteryVoltageMilliVolt",
    "DataGpsOdometerMeterDecorationsEvChargingCurrentMilliAmp",
    "DataGpsOdometerMeterDecorationsEvChargingEnergyMicroWh",
    "DataGpsOdometerMeterDecorationsEvChargingStatus",
    "DataGpsOdometerMeterDecorationsEvChargingVoltageMilliVolt",
    "DataGpsOdometerMeterDecorationsEvConsumedEnergyMicroWh",
    "DataGpsOdometerMeterDecorationsEvDistanceDrivenMeters",
    "DataGpsOdometerMeterDecorationsEvRegeneratedEnergyMicroWh",
    "DataGpsOdometerMeterDecorationsEvStateOfChargeMilliPercent",
    "DataGpsOdometerMeterDecorationsFaultCodes",
    "DataGpsOdometerMeterDecorationsFaultCodesJ1939",
    "DataGpsOdometerMeterDecorationsFaultCodesJ1939CheckEngineLights",
    "DataGpsOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataGpsOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataGpsOdometerMeterDecorationsFaultCodesObdii",
    "DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataGpsOdometerMeterDecorationsFaultCodesOem",
    "DataGpsOdometerMeterDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataGpsOdometerMeterDecorationsFuelPercents",
    "DataGpsOdometerMeterDecorationsGps",
    "DataGpsOdometerMeterDecorationsGpsAddress",
    "DataGpsOdometerMeterDecorationsGpsReverseGeo",
    "DataGpsOdometerMeterDecorationsGpsDistanceMeters",
    "DataGpsOdometerMeterDecorationsGpsOdometerMeters",
    "DataGpsOdometerMeterDecorationsIntakeManifoldTemperatureMilliC",
    "DataGpsOdometerMeterDecorationsObdEngineSeconds",
    "DataGpsOdometerMeterDecorationsObdOdometerMeters",
    "DataGpsOdometerMeterDecorationsSeatbeltDriver",
    "DataGpsOdometerMeterDecorationsSpreaderActive",
    "DataGpsOdometerMeterDecorationsSpreaderAirTemp",
    "DataGpsOdometerMeterDecorationsSpreaderBlastState",
    "DataGpsOdometerMeterDecorationsSpreaderGranularName",
    "DataGpsOdometerMeterDecorationsSpreaderGranularRate",
    "DataGpsOdometerMeterDecorationsSpreaderLiquidName",
    "DataGpsOdometerMeterDecorationsSpreaderLiquidRate",
    "DataGpsOdometerMeterDecorationsSpreaderOnState",
    "DataGpsOdometerMeterDecorationsSpreaderPlowStatus",
    "DataGpsOdometerMeterDecorationsSpreaderPrewetName",
    "DataGpsOdometerMeterDecorationsSpreaderPrewetRate",
    "DataGpsOdometerMeterDecorationsSpreaderRoadTemp",
    "DataGpsOdometerMeterDecorationsTirePressure",
    "DataIntakeManifoldTemperatureMilliC",
    "DataIntakeManifoldTemperatureMilliCDecorations",
    "DataIntakeManifoldTemperatureMilliCDecorationsAmbientAirTemperatureMilliC",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput1",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput10",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput11",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput12",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput13",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput2",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput3",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput4",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput5",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput6",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput7",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput8",
    "DataIntakeManifoldTemperatureMilliCDecorationsAuxInput9",
    "DataIntakeManifoldTemperatureMilliCDecorationsBarometricPressurePa",
    "DataIntakeManifoldTemperatureMilliCDecorationsBatteryMilliVolts",
    "DataIntakeManifoldTemperatureMilliCDecorationsDefLevelMilliPercent",
    "DataIntakeManifoldTemperatureMilliCDecorationsEcuSpeedMph",
    "DataIntakeManifoldTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC",
    "DataIntakeManifoldTemperatureMilliCDecorationsEngineImmobilizer",
    "DataIntakeManifoldTemperatureMilliCDecorationsEngineLoadPercent",
    "DataIntakeManifoldTemperatureMilliCDecorationsEngineOilPressureKPa",
    "DataIntakeManifoldTemperatureMilliCDecorationsEngineRpm",
    "DataIntakeManifoldTemperatureMilliCDecorationsEngineStates",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvChargingCurrentMilliAmp",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvChargingEnergyMicroWh",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvChargingStatus",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvChargingVoltageMilliVolt",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvConsumedEnergyMicroWh",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvDistanceDrivenMeters",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh",
    "DataIntakeManifoldTemperatureMilliCDecorationsEvStateOfChargeMilliPercent",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodes",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdii",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesOem",
    "DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataIntakeManifoldTemperatureMilliCDecorationsFuelPercents",
    "DataIntakeManifoldTemperatureMilliCDecorationsGps",
    "DataIntakeManifoldTemperatureMilliCDecorationsGpsAddress",
    "DataIntakeManifoldTemperatureMilliCDecorationsGpsReverseGeo",
    "DataIntakeManifoldTemperatureMilliCDecorationsGpsDistanceMeters",
    "DataIntakeManifoldTemperatureMilliCDecorationsGpsOdometerMeters",
    "DataIntakeManifoldTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC",
    "DataIntakeManifoldTemperatureMilliCDecorationsObdEngineSeconds",
    "DataIntakeManifoldTemperatureMilliCDecorationsObdOdometerMeters",
    "DataIntakeManifoldTemperatureMilliCDecorationsSeatbeltDriver",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderActive",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderAirTemp",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderBlastState",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderGranularName",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderGranularRate",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderLiquidName",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderLiquidRate",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderOnState",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPlowStatus",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPrewetName",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPrewetRate",
    "DataIntakeManifoldTemperatureMilliCDecorationsSpreaderRoadTemp",
    "DataIntakeManifoldTemperatureMilliCDecorationsTirePressure",
    "DataNfcCardScan",
    "DataNfcCardScanCard",
    "DataNfcCardScanDecorations",
    "DataNfcCardScanDecorationsAmbientAirTemperatureMilliC",
    "DataNfcCardScanDecorationsAuxInput1",
    "DataNfcCardScanDecorationsAuxInput10",
    "DataNfcCardScanDecorationsAuxInput11",
    "DataNfcCardScanDecorationsAuxInput12",
    "DataNfcCardScanDecorationsAuxInput13",
    "DataNfcCardScanDecorationsAuxInput2",
    "DataNfcCardScanDecorationsAuxInput3",
    "DataNfcCardScanDecorationsAuxInput4",
    "DataNfcCardScanDecorationsAuxInput5",
    "DataNfcCardScanDecorationsAuxInput6",
    "DataNfcCardScanDecorationsAuxInput7",
    "DataNfcCardScanDecorationsAuxInput8",
    "DataNfcCardScanDecorationsAuxInput9",
    "DataNfcCardScanDecorationsBarometricPressurePa",
    "DataNfcCardScanDecorationsBatteryMilliVolts",
    "DataNfcCardScanDecorationsDefLevelMilliPercent",
    "DataNfcCardScanDecorationsEcuSpeedMph",
    "DataNfcCardScanDecorationsEngineCoolantTemperatureMilliC",
    "DataNfcCardScanDecorationsEngineImmobilizer",
    "DataNfcCardScanDecorationsEngineLoadPercent",
    "DataNfcCardScanDecorationsEngineOilPressureKPa",
    "DataNfcCardScanDecorationsEngineRpm",
    "DataNfcCardScanDecorationsEngineStates",
    "DataNfcCardScanDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataNfcCardScanDecorationsEvBatteryCurrentMilliAmp",
    "DataNfcCardScanDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataNfcCardScanDecorationsEvBatteryVoltageMilliVolt",
    "DataNfcCardScanDecorationsEvChargingCurrentMilliAmp",
    "DataNfcCardScanDecorationsEvChargingEnergyMicroWh",
    "DataNfcCardScanDecorationsEvChargingStatus",
    "DataNfcCardScanDecorationsEvChargingVoltageMilliVolt",
    "DataNfcCardScanDecorationsEvConsumedEnergyMicroWh",
    "DataNfcCardScanDecorationsEvDistanceDrivenMeters",
    "DataNfcCardScanDecorationsEvRegeneratedEnergyMicroWh",
    "DataNfcCardScanDecorationsEvStateOfChargeMilliPercent",
    "DataNfcCardScanDecorationsFaultCodes",
    "DataNfcCardScanDecorationsFaultCodesJ1939",
    "DataNfcCardScanDecorationsFaultCodesJ1939CheckEngineLights",
    "DataNfcCardScanDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataNfcCardScanDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataNfcCardScanDecorationsFaultCodesObdii",
    "DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataNfcCardScanDecorationsFaultCodesOem",
    "DataNfcCardScanDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataNfcCardScanDecorationsFuelPercents",
    "DataNfcCardScanDecorationsGps",
    "DataNfcCardScanDecorationsGpsAddress",
    "DataNfcCardScanDecorationsGpsReverseGeo",
    "DataNfcCardScanDecorationsGpsDistanceMeters",
    "DataNfcCardScanDecorationsGpsOdometerMeters",
    "DataNfcCardScanDecorationsIntakeManifoldTemperatureMilliC",
    "DataNfcCardScanDecorationsObdEngineSeconds",
    "DataNfcCardScanDecorationsObdOdometerMeters",
    "DataNfcCardScanDecorationsSeatbeltDriver",
    "DataNfcCardScanDecorationsSpreaderActive",
    "DataNfcCardScanDecorationsSpreaderAirTemp",
    "DataNfcCardScanDecorationsSpreaderBlastState",
    "DataNfcCardScanDecorationsSpreaderGranularName",
    "DataNfcCardScanDecorationsSpreaderGranularRate",
    "DataNfcCardScanDecorationsSpreaderLiquidName",
    "DataNfcCardScanDecorationsSpreaderLiquidRate",
    "DataNfcCardScanDecorationsSpreaderOnState",
    "DataNfcCardScanDecorationsSpreaderPlowStatus",
    "DataNfcCardScanDecorationsSpreaderPrewetName",
    "DataNfcCardScanDecorationsSpreaderPrewetRate",
    "DataNfcCardScanDecorationsSpreaderRoadTemp",
    "DataNfcCardScanDecorationsTirePressure",
    "DataObdEngineSecond",
    "DataObdEngineSecondDecorations",
    "DataObdEngineSecondDecorationsAmbientAirTemperatureMilliC",
    "DataObdEngineSecondDecorationsAuxInput1",
    "DataObdEngineSecondDecorationsAuxInput10",
    "DataObdEngineSecondDecorationsAuxInput11",
    "DataObdEngineSecondDecorationsAuxInput12",
    "DataObdEngineSecondDecorationsAuxInput13",
    "DataObdEngineSecondDecorationsAuxInput2",
    "DataObdEngineSecondDecorationsAuxInput3",
    "DataObdEngineSecondDecorationsAuxInput4",
    "DataObdEngineSecondDecorationsAuxInput5",
    "DataObdEngineSecondDecorationsAuxInput6",
    "DataObdEngineSecondDecorationsAuxInput7",
    "DataObdEngineSecondDecorationsAuxInput8",
    "DataObdEngineSecondDecorationsAuxInput9",
    "DataObdEngineSecondDecorationsBarometricPressurePa",
    "DataObdEngineSecondDecorationsBatteryMilliVolts",
    "DataObdEngineSecondDecorationsDefLevelMilliPercent",
    "DataObdEngineSecondDecorationsEcuSpeedMph",
    "DataObdEngineSecondDecorationsEngineCoolantTemperatureMilliC",
    "DataObdEngineSecondDecorationsEngineImmobilizer",
    "DataObdEngineSecondDecorationsEngineLoadPercent",
    "DataObdEngineSecondDecorationsEngineOilPressureKPa",
    "DataObdEngineSecondDecorationsEngineRpm",
    "DataObdEngineSecondDecorationsEngineStates",
    "DataObdEngineSecondDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataObdEngineSecondDecorationsEvBatteryCurrentMilliAmp",
    "DataObdEngineSecondDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataObdEngineSecondDecorationsEvBatteryVoltageMilliVolt",
    "DataObdEngineSecondDecorationsEvChargingCurrentMilliAmp",
    "DataObdEngineSecondDecorationsEvChargingEnergyMicroWh",
    "DataObdEngineSecondDecorationsEvChargingStatus",
    "DataObdEngineSecondDecorationsEvChargingVoltageMilliVolt",
    "DataObdEngineSecondDecorationsEvConsumedEnergyMicroWh",
    "DataObdEngineSecondDecorationsEvDistanceDrivenMeters",
    "DataObdEngineSecondDecorationsEvRegeneratedEnergyMicroWh",
    "DataObdEngineSecondDecorationsEvStateOfChargeMilliPercent",
    "DataObdEngineSecondDecorationsFaultCodes",
    "DataObdEngineSecondDecorationsFaultCodesJ1939",
    "DataObdEngineSecondDecorationsFaultCodesJ1939CheckEngineLights",
    "DataObdEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataObdEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataObdEngineSecondDecorationsFaultCodesObdii",
    "DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataObdEngineSecondDecorationsFaultCodesOem",
    "DataObdEngineSecondDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataObdEngineSecondDecorationsFuelPercents",
    "DataObdEngineSecondDecorationsGps",
    "DataObdEngineSecondDecorationsGpsAddress",
    "DataObdEngineSecondDecorationsGpsReverseGeo",
    "DataObdEngineSecondDecorationsGpsDistanceMeters",
    "DataObdEngineSecondDecorationsGpsOdometerMeters",
    "DataObdEngineSecondDecorationsIntakeManifoldTemperatureMilliC",
    "DataObdEngineSecondDecorationsObdEngineSeconds",
    "DataObdEngineSecondDecorationsObdOdometerMeters",
    "DataObdEngineSecondDecorationsSeatbeltDriver",
    "DataObdEngineSecondDecorationsSpreaderActive",
    "DataObdEngineSecondDecorationsSpreaderAirTemp",
    "DataObdEngineSecondDecorationsSpreaderBlastState",
    "DataObdEngineSecondDecorationsSpreaderGranularName",
    "DataObdEngineSecondDecorationsSpreaderGranularRate",
    "DataObdEngineSecondDecorationsSpreaderLiquidName",
    "DataObdEngineSecondDecorationsSpreaderLiquidRate",
    "DataObdEngineSecondDecorationsSpreaderOnState",
    "DataObdEngineSecondDecorationsSpreaderPlowStatus",
    "DataObdEngineSecondDecorationsSpreaderPrewetName",
    "DataObdEngineSecondDecorationsSpreaderPrewetRate",
    "DataObdEngineSecondDecorationsSpreaderRoadTemp",
    "DataObdEngineSecondDecorationsTirePressure",
    "DataObdOdometerMeter",
    "DataObdOdometerMeterDecorations",
    "DataObdOdometerMeterDecorationsAmbientAirTemperatureMilliC",
    "DataObdOdometerMeterDecorationsAuxInput1",
    "DataObdOdometerMeterDecorationsAuxInput10",
    "DataObdOdometerMeterDecorationsAuxInput11",
    "DataObdOdometerMeterDecorationsAuxInput12",
    "DataObdOdometerMeterDecorationsAuxInput13",
    "DataObdOdometerMeterDecorationsAuxInput2",
    "DataObdOdometerMeterDecorationsAuxInput3",
    "DataObdOdometerMeterDecorationsAuxInput4",
    "DataObdOdometerMeterDecorationsAuxInput5",
    "DataObdOdometerMeterDecorationsAuxInput6",
    "DataObdOdometerMeterDecorationsAuxInput7",
    "DataObdOdometerMeterDecorationsAuxInput8",
    "DataObdOdometerMeterDecorationsAuxInput9",
    "DataObdOdometerMeterDecorationsBarometricPressurePa",
    "DataObdOdometerMeterDecorationsBatteryMilliVolts",
    "DataObdOdometerMeterDecorationsDefLevelMilliPercent",
    "DataObdOdometerMeterDecorationsEcuSpeedMph",
    "DataObdOdometerMeterDecorationsEngineCoolantTemperatureMilliC",
    "DataObdOdometerMeterDecorationsEngineImmobilizer",
    "DataObdOdometerMeterDecorationsEngineLoadPercent",
    "DataObdOdometerMeterDecorationsEngineOilPressureKPa",
    "DataObdOdometerMeterDecorationsEngineRpm",
    "DataObdOdometerMeterDecorationsEngineStates",
    "DataObdOdometerMeterDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataObdOdometerMeterDecorationsEvBatteryCurrentMilliAmp",
    "DataObdOdometerMeterDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataObdOdometerMeterDecorationsEvBatteryVoltageMilliVolt",
    "DataObdOdometerMeterDecorationsEvChargingCurrentMilliAmp",
    "DataObdOdometerMeterDecorationsEvChargingEnergyMicroWh",
    "DataObdOdometerMeterDecorationsEvChargingStatus",
    "DataObdOdometerMeterDecorationsEvChargingVoltageMilliVolt",
    "DataObdOdometerMeterDecorationsEvConsumedEnergyMicroWh",
    "DataObdOdometerMeterDecorationsEvDistanceDrivenMeters",
    "DataObdOdometerMeterDecorationsEvRegeneratedEnergyMicroWh",
    "DataObdOdometerMeterDecorationsEvStateOfChargeMilliPercent",
    "DataObdOdometerMeterDecorationsFaultCodes",
    "DataObdOdometerMeterDecorationsFaultCodesJ1939",
    "DataObdOdometerMeterDecorationsFaultCodesJ1939CheckEngineLights",
    "DataObdOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataObdOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataObdOdometerMeterDecorationsFaultCodesObdii",
    "DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataObdOdometerMeterDecorationsFaultCodesOem",
    "DataObdOdometerMeterDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataObdOdometerMeterDecorationsFuelPercents",
    "DataObdOdometerMeterDecorationsGps",
    "DataObdOdometerMeterDecorationsGpsAddress",
    "DataObdOdometerMeterDecorationsGpsReverseGeo",
    "DataObdOdometerMeterDecorationsGpsDistanceMeters",
    "DataObdOdometerMeterDecorationsGpsOdometerMeters",
    "DataObdOdometerMeterDecorationsIntakeManifoldTemperatureMilliC",
    "DataObdOdometerMeterDecorationsObdEngineSeconds",
    "DataObdOdometerMeterDecorationsObdOdometerMeters",
    "DataObdOdometerMeterDecorationsSeatbeltDriver",
    "DataObdOdometerMeterDecorationsSpreaderActive",
    "DataObdOdometerMeterDecorationsSpreaderAirTemp",
    "DataObdOdometerMeterDecorationsSpreaderBlastState",
    "DataObdOdometerMeterDecorationsSpreaderGranularName",
    "DataObdOdometerMeterDecorationsSpreaderGranularRate",
    "DataObdOdometerMeterDecorationsSpreaderLiquidName",
    "DataObdOdometerMeterDecorationsSpreaderLiquidRate",
    "DataObdOdometerMeterDecorationsSpreaderOnState",
    "DataObdOdometerMeterDecorationsSpreaderPlowStatus",
    "DataObdOdometerMeterDecorationsSpreaderPrewetName",
    "DataObdOdometerMeterDecorationsSpreaderPrewetRate",
    "DataObdOdometerMeterDecorationsSpreaderRoadTemp",
    "DataObdOdometerMeterDecorationsTirePressure",
    "DataSeatbeltDriver",
    "DataSpreaderActive",
    "DataSpreaderAirTemp",
    "DataSpreaderBlastState",
    "DataSpreaderGranularName",
    "DataSpreaderGranularRate",
    "DataSpreaderLiquidName",
    "DataSpreaderLiquidRate",
    "DataSpreaderOnState",
    "DataSpreaderPlowStatus",
    "DataSpreaderPrewetName",
    "DataSpreaderPrewetRate",
    "DataSpreaderRoadTemp",
    "DataSyntheticEngineSecond",
    "DataSyntheticEngineSecondDecorations",
    "DataSyntheticEngineSecondDecorationsAmbientAirTemperatureMilliC",
    "DataSyntheticEngineSecondDecorationsAuxInput1",
    "DataSyntheticEngineSecondDecorationsAuxInput10",
    "DataSyntheticEngineSecondDecorationsAuxInput11",
    "DataSyntheticEngineSecondDecorationsAuxInput12",
    "DataSyntheticEngineSecondDecorationsAuxInput13",
    "DataSyntheticEngineSecondDecorationsAuxInput2",
    "DataSyntheticEngineSecondDecorationsAuxInput3",
    "DataSyntheticEngineSecondDecorationsAuxInput4",
    "DataSyntheticEngineSecondDecorationsAuxInput5",
    "DataSyntheticEngineSecondDecorationsAuxInput6",
    "DataSyntheticEngineSecondDecorationsAuxInput7",
    "DataSyntheticEngineSecondDecorationsAuxInput8",
    "DataSyntheticEngineSecondDecorationsAuxInput9",
    "DataSyntheticEngineSecondDecorationsBarometricPressurePa",
    "DataSyntheticEngineSecondDecorationsBatteryMilliVolts",
    "DataSyntheticEngineSecondDecorationsDefLevelMilliPercent",
    "DataSyntheticEngineSecondDecorationsEcuSpeedMph",
    "DataSyntheticEngineSecondDecorationsEngineCoolantTemperatureMilliC",
    "DataSyntheticEngineSecondDecorationsEngineImmobilizer",
    "DataSyntheticEngineSecondDecorationsEngineLoadPercent",
    "DataSyntheticEngineSecondDecorationsEngineOilPressureKPa",
    "DataSyntheticEngineSecondDecorationsEngineRpm",
    "DataSyntheticEngineSecondDecorationsEngineStates",
    "DataSyntheticEngineSecondDecorationsEvAverageBatteryTemperatureMilliCelsius",
    "DataSyntheticEngineSecondDecorationsEvBatteryCurrentMilliAmp",
    "DataSyntheticEngineSecondDecorationsEvBatteryStateOfHealthMilliPercent",
    "DataSyntheticEngineSecondDecorationsEvBatteryVoltageMilliVolt",
    "DataSyntheticEngineSecondDecorationsEvChargingCurrentMilliAmp",
    "DataSyntheticEngineSecondDecorationsEvChargingEnergyMicroWh",
    "DataSyntheticEngineSecondDecorationsEvChargingStatus",
    "DataSyntheticEngineSecondDecorationsEvChargingVoltageMilliVolt",
    "DataSyntheticEngineSecondDecorationsEvConsumedEnergyMicroWh",
    "DataSyntheticEngineSecondDecorationsEvDistanceDrivenMeters",
    "DataSyntheticEngineSecondDecorationsEvRegeneratedEnergyMicroWh",
    "DataSyntheticEngineSecondDecorationsEvStateOfChargeMilliPercent",
    "DataSyntheticEngineSecondDecorationsFaultCodes",
    "DataSyntheticEngineSecondDecorationsFaultCodesJ1939",
    "DataSyntheticEngineSecondDecorationsFaultCodesJ1939CheckEngineLights",
    "DataSyntheticEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCode",
    "DataSyntheticEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields",
    "DataSyntheticEngineSecondDecorationsFaultCodesObdii",
    "DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCode",
    "DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc",
    "DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus",
    "DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc",
    "DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc",
    "DataSyntheticEngineSecondDecorationsFaultCodesOem",
    "DataSyntheticEngineSecondDecorationsFaultCodesOemDiagnosticTroubleCode",
    "DataSyntheticEngineSecondDecorationsFuelPercents",
    "DataSyntheticEngineSecondDecorationsGps",
    "DataSyntheticEngineSecondDecorationsGpsAddress",
    "DataSyntheticEngineSecondDecorationsGpsReverseGeo",
    "DataSyntheticEngineSecondDecorationsGpsDistanceMeters",
    "DataSyntheticEngineSecondDecorationsGpsOdometerMeters",
    "DataSyntheticEngineSecondDecorationsIntakeManifoldTemperatureMilliC",
    "DataSyntheticEngineSecondDecorationsObdEngineSeconds",
    "DataSyntheticEngineSecondDecorationsObdOdometerMeters",
    "DataSyntheticEngineSecondDecorationsSeatbeltDriver",
    "DataSyntheticEngineSecondDecorationsSpreaderActive",
    "DataSyntheticEngineSecondDecorationsSpreaderAirTemp",
    "DataSyntheticEngineSecondDecorationsSpreaderBlastState",
    "DataSyntheticEngineSecondDecorationsSpreaderGranularName",
    "DataSyntheticEngineSecondDecorationsSpreaderGranularRate",
    "DataSyntheticEngineSecondDecorationsSpreaderLiquidName",
    "DataSyntheticEngineSecondDecorationsSpreaderLiquidRate",
    "DataSyntheticEngineSecondDecorationsSpreaderOnState",
    "DataSyntheticEngineSecondDecorationsSpreaderPlowStatus",
    "DataSyntheticEngineSecondDecorationsSpreaderPrewetName",
    "DataSyntheticEngineSecondDecorationsSpreaderPrewetRate",
    "DataSyntheticEngineSecondDecorationsSpreaderRoadTemp",
    "DataSyntheticEngineSecondDecorationsTirePressure",
    "Pagination",
]


class DataAmbientAirTemperatureMilliCDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAmbientAirTemperatureMilliCDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAmbientAirTemperatureMilliCDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAmbientAirTemperatureMilliCDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAmbientAirTemperatureMilliCDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAmbientAirTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAmbientAirTemperatureMilliCDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAmbientAirTemperatureMilliCDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAmbientAirTemperatureMilliCDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAmbientAirTemperatureMilliCDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAmbientAirTemperatureMilliCDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAmbientAirTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAmbientAirTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAmbientAirTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAmbientAirTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAmbientAirTemperatureMilliCDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAmbientAirTemperatureMilliCDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAmbientAirTemperatureMilliCDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAmbientAirTemperatureMilliCDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAmbientAirTemperatureMilliCDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAmbientAirTemperatureMilliCDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAmbientAirTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAmbientAirTemperatureMilliCDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights] = (
        FieldInfo(alias="checkEngineLights", default=None)
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[
        List[DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[
        List[DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]
    ] = FieldInfo(alias="confirmedDtcs", default=None)
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[
        DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus
    ] = FieldInfo(alias="monitorStatus", default=None)
    """Readings from engine sensors"""

    pending_dtcs: Optional[
        List[DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]
    ] = FieldInfo(alias="pendingDtcs", default=None)
    """Pending DTC codes."""

    permanent_dtcs: Optional[
        List[DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]
    ] = FieldInfo(alias="permanentDtcs", default=None)
    """Permanent DTC codes."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[
        List[DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for passenger vehicles."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[
        List[DataAmbientAirTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAmbientAirTemperatureMilliCDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAmbientAirTemperatureMilliCDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAmbientAirTemperatureMilliCDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAmbientAirTemperatureMilliCDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAmbientAirTemperatureMilliCDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAmbientAirTemperatureMilliCDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAmbientAirTemperatureMilliCDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAmbientAirTemperatureMilliCDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAmbientAirTemperatureMilliCDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAmbientAirTemperatureMilliCDecorationsGpsReverseGeo] = FieldInfo(
        alias="reverseGeo", default=None
    )
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAmbientAirTemperatureMilliCDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAmbientAirTemperatureMilliCDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAmbientAirTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAmbientAirTemperatureMilliCDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAmbientAirTemperatureMilliCDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAmbientAirTemperatureMilliCDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAmbientAirTemperatureMilliCDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAmbientAirTemperatureMilliCDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAmbientAirTemperatureMilliCDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAmbientAirTemperatureMilliCDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAmbientAirTemperatureMilliCDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAmbientAirTemperatureMilliCDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAmbientAirTemperatureMilliCDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAmbientAirTemperatureMilliCDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAmbientAirTemperatureMilliCDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAmbientAirTemperatureMilliCDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAmbientAirTemperatureMilliCDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAmbientAirTemperatureMilliCDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAmbientAirTemperatureMilliCDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAmbientAirTemperatureMilliCDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAmbientAirTemperatureMilliCDecorationsAmbientAirTemperatureMilliC] = (
        FieldInfo(alias="ambientAirTemperatureMilliC", default=None)
    )

    aux_input1: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput1] = FieldInfo(
        alias="auxInput1", default=None
    )

    aux_input10: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput10] = FieldInfo(
        alias="auxInput10", default=None
    )

    aux_input11: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput11] = FieldInfo(
        alias="auxInput11", default=None
    )

    aux_input12: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput12] = FieldInfo(
        alias="auxInput12", default=None
    )

    aux_input13: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput13] = FieldInfo(
        alias="auxInput13", default=None
    )

    aux_input2: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput2] = FieldInfo(
        alias="auxInput2", default=None
    )

    aux_input3: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput3] = FieldInfo(
        alias="auxInput3", default=None
    )

    aux_input4: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput4] = FieldInfo(
        alias="auxInput4", default=None
    )

    aux_input5: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput5] = FieldInfo(
        alias="auxInput5", default=None
    )

    aux_input6: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput6] = FieldInfo(
        alias="auxInput6", default=None
    )

    aux_input7: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput7] = FieldInfo(
        alias="auxInput7", default=None
    )

    aux_input8: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput8] = FieldInfo(
        alias="auxInput8", default=None
    )

    aux_input9: Optional[DataAmbientAirTemperatureMilliCDecorationsAuxInput9] = FieldInfo(
        alias="auxInput9", default=None
    )

    barometric_pressure_pa: Optional[DataAmbientAirTemperatureMilliCDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAmbientAirTemperatureMilliCDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAmbientAirTemperatureMilliCDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAmbientAirTemperatureMilliCDecorationsEcuSpeedMph] = FieldInfo(
        alias="ecuSpeedMph", default=None
    )

    engine_coolant_temperature_milli_c: Optional[
        DataAmbientAirTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC
    ] = FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)

    engine_immobilizer: Optional[DataAmbientAirTemperatureMilliCDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAmbientAirTemperatureMilliCDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAmbientAirTemperatureMilliCDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAmbientAirTemperatureMilliCDecorationsEngineRpm] = FieldInfo(
        alias="engineRpm", default=None
    )

    engine_states: Optional[DataAmbientAirTemperatureMilliCDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAmbientAirTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAmbientAirTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp] = (
        FieldInfo(alias="evBatteryCurrentMilliAmp", default=None)
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataAmbientAirTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAmbientAirTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt] = (
        FieldInfo(alias="evBatteryVoltageMilliVolt", default=None)
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAmbientAirTemperatureMilliCDecorationsEvChargingCurrentMilliAmp] = (
        FieldInfo(alias="evChargingCurrentMilliAmp", default=None)
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAmbientAirTemperatureMilliCDecorationsEvChargingEnergyMicroWh] = (
        FieldInfo(alias="evChargingEnergyMicroWh", default=None)
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAmbientAirTemperatureMilliCDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAmbientAirTemperatureMilliCDecorationsEvChargingVoltageMilliVolt] = (
        FieldInfo(alias="evChargingVoltageMilliVolt", default=None)
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAmbientAirTemperatureMilliCDecorationsEvConsumedEnergyMicroWh] = (
        FieldInfo(alias="evConsumedEnergyMicroWh", default=None)
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAmbientAirTemperatureMilliCDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAmbientAirTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh] = (
        FieldInfo(alias="evRegeneratedEnergyMicroWh", default=None)
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[
        DataAmbientAirTemperatureMilliCDecorationsEvStateOfChargeMilliPercent
    ] = FieldInfo(alias="evStateOfChargeMilliPercent", default=None)
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAmbientAirTemperatureMilliCDecorationsFaultCodes] = FieldInfo(
        alias="faultCodes", default=None
    )
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAmbientAirTemperatureMilliCDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataAmbientAirTemperatureMilliCDecorationsGps] = None

    gps_distance_meters: Optional[DataAmbientAirTemperatureMilliCDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAmbientAirTemperatureMilliCDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[
        DataAmbientAirTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC
    ] = FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)

    obd_engine_seconds: Optional[DataAmbientAirTemperatureMilliCDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAmbientAirTemperatureMilliCDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAmbientAirTemperatureMilliCDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAmbientAirTemperatureMilliCDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAmbientAirTemperatureMilliCDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAmbientAirTemperatureMilliC(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The ambient air temperature reading in millidegree Celsius."""

    decorations: Optional[DataAmbientAirTemperatureMilliCDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataAuxInput1DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput1DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput1DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput1DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput1DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput1DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput1DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput1DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput1DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput1DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput1DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput1DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput1DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput1DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput1DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput1DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput1DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput1DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput1DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput1DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput1DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput1DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput1DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput1DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput1DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput1DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput1DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput1DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput1DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput1DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput1DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput1DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput1DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput1DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput1DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput1DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput1DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput1DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput1DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput1DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput1DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput1DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput1DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput1DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput1DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput1DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput1DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput1DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput1DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput1DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput1DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput1DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput1DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput1DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput1DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput1DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput1DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput1DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput1DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput1DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput1DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput1DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput1DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput1DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput1DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput1Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput1DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput1DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput1DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput1DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput1DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput1DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput1DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput1DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput1DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput1DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput1DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput1DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput1DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput1DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput1DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput1DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput1DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput1DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput1DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput1DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput1DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput1DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput1DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput1DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput1DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput1DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput1DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput1DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput1DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput1DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput1DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput1DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput1DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput1DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput1DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput1DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput1DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput1DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput1DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput1DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput1DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput1DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput1DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput1DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput1DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput1DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput1DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput1DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput1DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput1DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput1DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput1DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput1DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput1DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput1DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput1DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput1DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput1DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput1(BaseModel):
    decorations: Optional[DataAuxInput1Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput10DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput10DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput10DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput10DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput10DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput10DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput10DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput10DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput10DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput10DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput10DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput10DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput10DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput10DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput10DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput10DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput10DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput10DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput10DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput10DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput10DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput10DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput10DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput10DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput10DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput10DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput10DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput10DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput10DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput10DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput10DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput10DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput10DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput10DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput10DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput10DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput10DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput10DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput10DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput10DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput10DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput10DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput10DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput10DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput10DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput10DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput10DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput10DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput10DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput10DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput10DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput10DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput10DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput10DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput10DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput10DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput10DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput10DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput10DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput10DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput10DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput10DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput10DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput10DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput10Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput10DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput10DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput10DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput10DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput10DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput10DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput10DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput10DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput10DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput10DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput10DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput10DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput10DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput10DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput10DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput10DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput10DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput10DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput10DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput10DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput10DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput10DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput10DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput10DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput10DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput10DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput10DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput10DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput10DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput10DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput10DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput10DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput10DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput10DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput10DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput10DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput10DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput10DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput10DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput10DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput10DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput10DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput10DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput10DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput10DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput10DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput10DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput10DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput10DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput10DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput10DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput10DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput10DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput10DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput10DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput10DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput10DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput10DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput10(BaseModel):
    decorations: Optional[DataAuxInput10Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput11DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput11DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput11DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput11DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput11DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput11DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput11DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput11DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput11DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput11DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput11DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput11DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput11DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput11DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput11DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput11DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput11DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput11DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput11DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput11DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput11DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput11DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput11DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput11DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput11DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput11DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput11DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput11DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput11DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput11DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput11DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput11DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput11DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput11DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput11DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput11DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput11DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput11DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput11DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput11DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput11DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput11DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput11DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput11DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput11DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput11DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput11DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput11DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput11DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput11DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput11DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput11DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput11DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput11DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput11DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput11DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput11DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput11DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput11DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput11DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput11DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput11DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput11DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput11DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput11Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput11DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput11DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput11DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput11DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput11DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput11DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput11DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput11DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput11DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput11DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput11DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput11DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput11DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput11DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput11DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput11DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput11DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput11DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput11DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput11DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput11DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput11DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput11DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput11DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput11DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput11DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput11DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput11DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput11DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput11DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput11DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput11DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput11DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput11DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput11DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput11DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput11DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput11DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput11DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput11DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput11DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput11DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput11DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput11DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput11DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput11DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput11DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput11DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput11DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput11DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput11DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput11DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput11DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput11DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput11DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput11DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput11DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput11DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput11(BaseModel):
    decorations: Optional[DataAuxInput11Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput12DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput12DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput12DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput12DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput12DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput12DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput12DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput12DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput12DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput12DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput12DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput12DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput12DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput12DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput12DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput12DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput12DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput12DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput12DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput12DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput12DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput12DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput12DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput12DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput12DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput12DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput12DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput12DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput12DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput12DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput12DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput12DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput12DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput12DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput12DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput12DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput12DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput12DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput12DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput12DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput12DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput12DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput12DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput12DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput12DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput12DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput12DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput12DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput12DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput12DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput12DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput12DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput12DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput12DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput12DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput12DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput12DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput12DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput12DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput12DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput12DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput12DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput12DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput12DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput12Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput12DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput12DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput12DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput12DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput12DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput12DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput12DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput12DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput12DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput12DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput12DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput12DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput12DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput12DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput12DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput12DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput12DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput12DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput12DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput12DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput12DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput12DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput12DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput12DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput12DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput12DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput12DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput12DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput12DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput12DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput12DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput12DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput12DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput12DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput12DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput12DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput12DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput12DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput12DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput12DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput12DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput12DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput12DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput12DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput12DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput12DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput12DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput12DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput12DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput12DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput12DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput12DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput12DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput12DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput12DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput12DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput12DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput12DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput12(BaseModel):
    decorations: Optional[DataAuxInput12Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput13DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput13DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput13DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput13DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput13DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput13DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput13DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput13DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput13DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput13DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput13DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput13DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput13DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput13DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput13DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput13DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput13DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput13DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput13DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput13DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput13DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput13DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput13DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput13DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput13DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput13DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput13DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput13DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput13DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput13DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput13DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput13DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput13DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput13DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput13DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput13DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput13DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput13DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput13DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput13DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput13DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput13DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput13DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput13DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput13DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput13DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput13DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput13DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput13DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput13DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput13DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput13DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput13DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput13DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput13DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput13DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput13DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput13DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput13DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput13DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput13DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput13DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput13DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput13DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput13Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput13DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput13DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput13DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput13DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput13DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput13DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput13DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput13DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput13DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput13DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput13DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput13DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput13DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput13DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput13DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput13DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput13DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput13DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput13DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput13DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput13DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput13DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput13DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput13DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput13DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput13DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput13DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput13DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput13DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput13DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput13DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput13DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput13DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput13DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput13DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput13DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput13DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput13DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput13DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput13DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput13DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput13DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput13DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput13DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput13DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput13DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput13DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput13DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput13DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput13DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput13DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput13DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput13DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput13DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput13DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput13DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput13DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput13DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput13(BaseModel):
    decorations: Optional[DataAuxInput13Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput2DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput2DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput2DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput2DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput2DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput2DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput2DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput2DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput2DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput2DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput2DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput2DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput2DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput2DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput2DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput2DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput2DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput2DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput2DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput2DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput2DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput2DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput2DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput2DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput2DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput2DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput2DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput2DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput2DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput2DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput2DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput2DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput2DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput2DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput2DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput2DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput2DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput2DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput2DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput2DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput2DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput2DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput2DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput2DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput2DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput2DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput2DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput2DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput2DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput2DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput2DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput2DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput2DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput2DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput2DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput2DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput2DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput2DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput2DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput2DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput2DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput2DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput2DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput2DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput2Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput2DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput2DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput2DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput2DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput2DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput2DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput2DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput2DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput2DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput2DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput2DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput2DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput2DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput2DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput2DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput2DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput2DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput2DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput2DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput2DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput2DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput2DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput2DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput2DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput2DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput2DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput2DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput2DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput2DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput2DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput2DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput2DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput2DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput2DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput2DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput2DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput2DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput2DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput2DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput2DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput2DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput2DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput2DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput2DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput2DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput2DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput2DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput2DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput2DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput2DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput2DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput2DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput2DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput2DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput2DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput2DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput2DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput2DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput2(BaseModel):
    decorations: Optional[DataAuxInput2Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput3DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput3DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput3DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput3DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput3DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput3DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput3DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput3DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput3DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput3DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput3DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput3DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput3DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput3DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput3DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput3DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput3DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput3DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput3DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput3DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput3DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput3DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput3DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput3DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput3DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput3DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput3DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput3DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput3DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput3DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput3DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput3DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput3DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput3DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput3DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput3DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput3DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput3DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput3DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput3DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput3DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput3DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput3DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput3DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput3DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput3DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput3DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput3DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput3DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput3DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput3DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput3DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput3DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput3DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput3DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput3DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput3DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput3DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput3DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput3DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput3DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput3DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput3DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput3DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput3Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput3DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput3DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput3DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput3DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput3DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput3DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput3DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput3DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput3DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput3DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput3DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput3DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput3DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput3DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput3DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput3DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput3DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput3DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput3DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput3DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput3DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput3DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput3DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput3DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput3DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput3DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput3DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput3DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput3DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput3DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput3DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput3DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput3DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput3DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput3DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput3DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput3DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput3DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput3DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput3DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput3DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput3DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput3DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput3DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput3DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput3DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput3DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput3DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput3DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput3DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput3DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput3DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput3DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput3DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput3DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput3DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput3DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput3DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput3(BaseModel):
    decorations: Optional[DataAuxInput3Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput4DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput4DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput4DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput4DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput4DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput4DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput4DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput4DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput4DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput4DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput4DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput4DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput4DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput4DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput4DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput4DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput4DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput4DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput4DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput4DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput4DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput4DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput4DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput4DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput4DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput4DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput4DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput4DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput4DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput4DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput4DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput4DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput4DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput4DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput4DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput4DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput4DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput4DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput4DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput4DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput4DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput4DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput4DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput4DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput4DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput4DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput4DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput4DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput4DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput4DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput4DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput4DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput4DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput4DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput4DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput4DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput4DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput4DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput4DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput4DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput4DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput4DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput4DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput4DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput4Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput4DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput4DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput4DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput4DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput4DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput4DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput4DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput4DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput4DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput4DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput4DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput4DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput4DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput4DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput4DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput4DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput4DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput4DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput4DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput4DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput4DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput4DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput4DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput4DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput4DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput4DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput4DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput4DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput4DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput4DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput4DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput4DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput4DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput4DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput4DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput4DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput4DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput4DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput4DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput4DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput4DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput4DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput4DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput4DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput4DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput4DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput4DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput4DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput4DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput4DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput4DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput4DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput4DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput4DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput4DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput4DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput4DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput4DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput4(BaseModel):
    decorations: Optional[DataAuxInput4Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput5DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput5DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput5DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput5DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput5DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput5DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput5DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput5DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput5DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput5DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput5DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput5DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput5DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput5DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput5DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput5DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput5DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput5DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput5DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput5DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput5DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput5DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput5DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput5DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput5DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput5DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput5DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput5DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput5DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput5DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput5DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput5DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput5DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput5DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput5DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput5DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput5DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput5DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput5DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput5DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput5DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput5DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput5DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput5DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput5DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput5DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput5DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput5DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput5DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput5DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput5DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput5DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput5DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput5DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput5DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput5DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput5DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput5DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput5DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput5DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput5DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput5DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput5DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput5DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput5Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput5DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput5DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput5DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput5DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput5DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput5DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput5DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput5DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput5DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput5DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput5DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput5DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput5DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput5DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput5DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput5DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput5DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput5DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput5DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput5DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput5DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput5DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput5DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput5DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput5DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput5DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput5DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput5DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput5DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput5DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput5DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput5DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput5DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput5DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput5DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput5DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput5DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput5DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput5DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput5DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput5DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput5DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput5DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput5DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput5DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput5DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput5DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput5DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput5DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput5DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput5DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput5DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput5DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput5DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput5DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput5DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput5DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput5DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput5(BaseModel):
    decorations: Optional[DataAuxInput5Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput6DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput6DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput6DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput6DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput6DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput6DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput6DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput6DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput6DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput6DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput6DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput6DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput6DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput6DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput6DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput6DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput6DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput6DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput6DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput6DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput6DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput6DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput6DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput6DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput6DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput6DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput6DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput6DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput6DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput6DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput6DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput6DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput6DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput6DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput6DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput6DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput6DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput6DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput6DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput6DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput6DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput6DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput6DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput6DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput6DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput6DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput6DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput6DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput6DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput6DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput6DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput6DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput6DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput6DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput6DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput6DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput6DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput6DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput6DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput6DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput6DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput6DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput6DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput6DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput6Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput6DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput6DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput6DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput6DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput6DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput6DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput6DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput6DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput6DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput6DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput6DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput6DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput6DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput6DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput6DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput6DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput6DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput6DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput6DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput6DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput6DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput6DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput6DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput6DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput6DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput6DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput6DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput6DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput6DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput6DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput6DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput6DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput6DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput6DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput6DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput6DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput6DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput6DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput6DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput6DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput6DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput6DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput6DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput6DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput6DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput6DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput6DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput6DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput6DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput6DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput6DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput6DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput6DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput6DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput6DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput6DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput6DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput6DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput6(BaseModel):
    decorations: Optional[DataAuxInput6Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput7DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput7DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput7DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput7DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput7DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput7DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput7DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput7DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput7DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput7DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput7DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput7DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput7DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput7DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput7DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput7DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput7DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput7DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput7DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput7DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput7DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput7DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput7DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput7DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput7DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput7DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput7DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput7DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput7DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput7DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput7DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput7DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput7DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput7DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput7DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput7DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput7DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput7DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput7DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput7DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput7DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput7DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput7DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput7DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput7DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput7DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput7DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput7DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput7DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput7DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput7DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput7DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput7DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput7DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput7DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput7DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput7DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput7DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput7DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput7DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput7DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput7DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput7DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput7DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput7Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput7DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput7DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput7DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput7DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput7DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput7DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput7DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput7DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput7DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput7DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput7DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput7DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput7DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput7DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput7DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput7DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput7DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput7DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput7DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput7DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput7DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput7DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput7DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput7DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput7DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput7DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput7DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput7DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput7DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput7DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput7DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput7DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput7DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput7DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput7DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput7DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput7DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput7DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput7DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput7DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput7DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput7DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput7DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput7DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput7DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput7DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput7DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput7DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput7DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput7DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput7DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput7DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput7DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput7DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput7DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput7DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput7DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput7DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput7(BaseModel):
    decorations: Optional[DataAuxInput7Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput8DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput8DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput8DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput8DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput8DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput8DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput8DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput8DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput8DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput8DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput8DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput8DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput8DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput8DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput8DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput8DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput8DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput8DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput8DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput8DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput8DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput8DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput8DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput8DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput8DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput8DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput8DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput8DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput8DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput8DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput8DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput8DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput8DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput8DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput8DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput8DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput8DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput8DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput8DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput8DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput8DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput8DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput8DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput8DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput8DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput8DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput8DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput8DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput8DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput8DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput8DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput8DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput8DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput8DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput8DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput8DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput8DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput8DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput8DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput8DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput8DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput8DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput8DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput8DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput8Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput8DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput8DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput8DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput8DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput8DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput8DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput8DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput8DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput8DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput8DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput8DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput8DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput8DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput8DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput8DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput8DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput8DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput8DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput8DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput8DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput8DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput8DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput8DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput8DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput8DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput8DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput8DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput8DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput8DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput8DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput8DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput8DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput8DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput8DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput8DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput8DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput8DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput8DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput8DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput8DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput8DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput8DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput8DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput8DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput8DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput8DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput8DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput8DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput8DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput8DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput8DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput8DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput8DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput8DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput8DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput8DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput8DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput8DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput8(BaseModel):
    decorations: Optional[DataAuxInput8Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataAuxInput9DecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataAuxInput9DecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataAuxInput9DecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataAuxInput9DecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataAuxInput9DecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataAuxInput9DecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataAuxInput9DecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataAuxInput9DecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput9DecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataAuxInput9DecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataAuxInput9DecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataAuxInput9DecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataAuxInput9DecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataAuxInput9DecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataAuxInput9DecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput9DecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataAuxInput9DecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput9DecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataAuxInput9DecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataAuxInput9DecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataAuxInput9DecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataAuxInput9DecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataAuxInput9DecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataAuxInput9DecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataAuxInput9DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataAuxInput9DecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataAuxInput9DecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataAuxInput9DecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataAuxInput9DecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataAuxInput9DecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataAuxInput9DecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataAuxInput9DecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataAuxInput9DecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataAuxInput9DecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataAuxInput9DecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataAuxInput9DecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataAuxInput9DecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataAuxInput9DecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataAuxInput9DecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataAuxInput9DecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataAuxInput9DecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataAuxInput9DecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataAuxInput9DecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataAuxInput9DecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataAuxInput9DecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataAuxInput9DecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataAuxInput9DecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataAuxInput9DecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataAuxInput9DecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataAuxInput9DecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataAuxInput9DecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataAuxInput9DecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataAuxInput9DecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataAuxInput9DecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataAuxInput9DecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataAuxInput9DecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput9DecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataAuxInput9DecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput9DecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataAuxInput9DecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataAuxInput9DecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataAuxInput9DecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataAuxInput9DecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataAuxInput9DecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataAuxInput9Decorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataAuxInput9DecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataAuxInput9DecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataAuxInput9DecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataAuxInput9DecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataAuxInput9DecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataAuxInput9DecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataAuxInput9DecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataAuxInput9DecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataAuxInput9DecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataAuxInput9DecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataAuxInput9DecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataAuxInput9DecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataAuxInput9DecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataAuxInput9DecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataAuxInput9DecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataAuxInput9DecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataAuxInput9DecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataAuxInput9DecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataAuxInput9DecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataAuxInput9DecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataAuxInput9DecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataAuxInput9DecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataAuxInput9DecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataAuxInput9DecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataAuxInput9DecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataAuxInput9DecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataAuxInput9DecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataAuxInput9DecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataAuxInput9DecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataAuxInput9DecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataAuxInput9DecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataAuxInput9DecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataAuxInput9DecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataAuxInput9DecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataAuxInput9DecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataAuxInput9DecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataAuxInput9DecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataAuxInput9DecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataAuxInput9DecorationsGps] = None

    gps_distance_meters: Optional[DataAuxInput9DecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataAuxInput9DecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataAuxInput9DecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataAuxInput9DecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataAuxInput9DecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataAuxInput9DecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataAuxInput9DecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataAuxInput9DecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataAuxInput9DecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataAuxInput9DecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataAuxInput9DecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataAuxInput9DecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataAuxInput9DecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataAuxInput9DecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataAuxInput9DecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataAuxInput9DecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataAuxInput9DecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataAuxInput9DecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataAuxInput9DecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataAuxInput9(BaseModel):
    decorations: Optional[DataAuxInput9Decorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    name: Optional[str] = None
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    time: Optional[str] = None
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Optional[bool] = None
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataBarometricPressurePaDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBarometricPressurePaDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataBarometricPressurePaDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataBarometricPressurePaDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataBarometricPressurePaDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataBarometricPressurePaDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataBarometricPressurePaDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataBarometricPressurePaDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataBarometricPressurePaDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataBarometricPressurePaDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataBarometricPressurePaDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataBarometricPressurePaDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataBarometricPressurePaDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataBarometricPressurePaDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataBarometricPressurePaDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataBarometricPressurePaDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataBarometricPressurePaDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataBarometricPressurePaDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataBarometricPressurePaDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataBarometricPressurePaDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataBarometricPressurePaDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataBarometricPressurePaDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataBarometricPressurePaDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataBarometricPressurePaDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataBarometricPressurePaDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataBarometricPressurePaDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataBarometricPressurePaDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataBarometricPressurePaDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataBarometricPressurePaDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[
        List[DataBarometricPressurePaDecorationsFaultCodesJ1939DiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for J1939 vehicles."""


class DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[
        List[DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]
    ] = FieldInfo(alias="confirmedDtcs", default=None)
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[
        List[DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]
    ] = FieldInfo(alias="permanentDtcs", default=None)
    """Permanent DTC codes."""


class DataBarometricPressurePaDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[
        List[DataBarometricPressurePaDecorationsFaultCodesObdiiDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for passenger vehicles."""


class DataBarometricPressurePaDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataBarometricPressurePaDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataBarometricPressurePaDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataBarometricPressurePaDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataBarometricPressurePaDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataBarometricPressurePaDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataBarometricPressurePaDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataBarometricPressurePaDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataBarometricPressurePaDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataBarometricPressurePaDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataBarometricPressurePaDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataBarometricPressurePaDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataBarometricPressurePaDecorationsGpsReverseGeo] = FieldInfo(
        alias="reverseGeo", default=None
    )
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataBarometricPressurePaDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataBarometricPressurePaDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataBarometricPressurePaDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataBarometricPressurePaDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataBarometricPressurePaDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataBarometricPressurePaDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataBarometricPressurePaDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataBarometricPressurePaDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataBarometricPressurePaDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataBarometricPressurePaDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataBarometricPressurePaDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataBarometricPressurePaDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataBarometricPressurePaDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataBarometricPressurePaDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataBarometricPressurePaDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataBarometricPressurePaDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataBarometricPressurePaDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataBarometricPressurePaDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataBarometricPressurePaDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataBarometricPressurePaDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataBarometricPressurePaDecorationsAmbientAirTemperatureMilliC] = (
        FieldInfo(alias="ambientAirTemperatureMilliC", default=None)
    )

    aux_input1: Optional[DataBarometricPressurePaDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataBarometricPressurePaDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataBarometricPressurePaDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataBarometricPressurePaDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataBarometricPressurePaDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataBarometricPressurePaDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataBarometricPressurePaDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataBarometricPressurePaDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataBarometricPressurePaDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataBarometricPressurePaDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataBarometricPressurePaDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataBarometricPressurePaDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataBarometricPressurePaDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataBarometricPressurePaDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataBarometricPressurePaDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataBarometricPressurePaDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataBarometricPressurePaDecorationsEcuSpeedMph] = FieldInfo(
        alias="ecuSpeedMph", default=None
    )

    engine_coolant_temperature_milli_c: Optional[DataBarometricPressurePaDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataBarometricPressurePaDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataBarometricPressurePaDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataBarometricPressurePaDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataBarometricPressurePaDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataBarometricPressurePaDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataBarometricPressurePaDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataBarometricPressurePaDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataBarometricPressurePaDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataBarometricPressurePaDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataBarometricPressurePaDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataBarometricPressurePaDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataBarometricPressurePaDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataBarometricPressurePaDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataBarometricPressurePaDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataBarometricPressurePaDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataBarometricPressurePaDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataBarometricPressurePaDecorationsEvStateOfChargeMilliPercent] = (
        FieldInfo(alias="evStateOfChargeMilliPercent", default=None)
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataBarometricPressurePaDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataBarometricPressurePaDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataBarometricPressurePaDecorationsGps] = None

    gps_distance_meters: Optional[DataBarometricPressurePaDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataBarometricPressurePaDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[
        DataBarometricPressurePaDecorationsIntakeManifoldTemperatureMilliC
    ] = FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)

    obd_engine_seconds: Optional[DataBarometricPressurePaDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataBarometricPressurePaDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataBarometricPressurePaDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataBarometricPressurePaDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataBarometricPressurePaDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataBarometricPressurePaDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataBarometricPressurePaDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataBarometricPressurePaDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataBarometricPressurePaDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataBarometricPressurePaDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataBarometricPressurePaDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataBarometricPressurePaDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataBarometricPressurePaDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataBarometricPressurePaDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataBarometricPressurePaDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataBarometricPressurePaDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataBarometricPressurePa(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The barometric pressure reading in pascals."""

    decorations: Optional[DataBarometricPressurePaDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataBatteryMilliVoltDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataBatteryMilliVoltDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataBatteryMilliVoltDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataBatteryMilliVoltDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataBatteryMilliVoltDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataBatteryMilliVoltDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataBatteryMilliVoltDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataBatteryMilliVoltDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataBatteryMilliVoltDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataBatteryMilliVoltDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataBatteryMilliVoltDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataBatteryMilliVoltDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataBatteryMilliVoltDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataBatteryMilliVoltDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataBatteryMilliVoltDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataBatteryMilliVoltDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataBatteryMilliVoltDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataBatteryMilliVoltDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataBatteryMilliVoltDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataBatteryMilliVoltDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataBatteryMilliVoltDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataBatteryMilliVoltDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataBatteryMilliVoltDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataBatteryMilliVoltDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataBatteryMilliVoltDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataBatteryMilliVoltDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataBatteryMilliVoltDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataBatteryMilliVoltDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataBatteryMilliVoltDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataBatteryMilliVoltDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataBatteryMilliVoltDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataBatteryMilliVoltDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataBatteryMilliVoltDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataBatteryMilliVoltDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataBatteryMilliVoltDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataBatteryMilliVoltDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataBatteryMilliVoltDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataBatteryMilliVoltDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataBatteryMilliVoltDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataBatteryMilliVoltDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataBatteryMilliVoltDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataBatteryMilliVoltDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataBatteryMilliVoltDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataBatteryMilliVoltDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataBatteryMilliVoltDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataBatteryMilliVoltDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataBatteryMilliVoltDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataBatteryMilliVoltDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataBatteryMilliVoltDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataBatteryMilliVoltDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataBatteryMilliVoltDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataBatteryMilliVoltDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataBatteryMilliVoltDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataBatteryMilliVoltDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataBatteryMilliVoltDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataBatteryMilliVoltDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataBatteryMilliVoltDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataBatteryMilliVoltDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataBatteryMilliVoltDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataBatteryMilliVoltDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataBatteryMilliVoltDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataBatteryMilliVoltDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataBatteryMilliVoltDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataBatteryMilliVoltDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataBatteryMilliVoltDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataBatteryMilliVoltDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataBatteryMilliVoltDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataBatteryMilliVoltDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataBatteryMilliVoltDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataBatteryMilliVoltDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataBatteryMilliVoltDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataBatteryMilliVoltDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataBatteryMilliVoltDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataBatteryMilliVoltDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataBatteryMilliVoltDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataBatteryMilliVoltDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataBatteryMilliVoltDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataBatteryMilliVoltDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataBatteryMilliVoltDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataBatteryMilliVoltDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataBatteryMilliVoltDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataBatteryMilliVoltDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataBatteryMilliVoltDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataBatteryMilliVoltDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataBatteryMilliVoltDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataBatteryMilliVoltDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataBatteryMilliVoltDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataBatteryMilliVoltDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataBatteryMilliVoltDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataBatteryMilliVoltDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataBatteryMilliVoltDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataBatteryMilliVoltDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataBatteryMilliVoltDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataBatteryMilliVoltDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataBatteryMilliVoltDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataBatteryMilliVoltDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataBatteryMilliVoltDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataBatteryMilliVoltDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataBatteryMilliVoltDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataBatteryMilliVoltDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataBatteryMilliVoltDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataBatteryMilliVoltDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataBatteryMilliVoltDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataBatteryMilliVoltDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataBatteryMilliVoltDecorationsGps] = None

    gps_distance_meters: Optional[DataBatteryMilliVoltDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataBatteryMilliVoltDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataBatteryMilliVoltDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataBatteryMilliVoltDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataBatteryMilliVoltDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataBatteryMilliVoltDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataBatteryMilliVoltDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataBatteryMilliVoltDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataBatteryMilliVoltDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataBatteryMilliVoltDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataBatteryMilliVoltDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataBatteryMilliVoltDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataBatteryMilliVoltDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataBatteryMilliVoltDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataBatteryMilliVoltDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataBatteryMilliVoltDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataBatteryMilliVoltDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataBatteryMilliVoltDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataBatteryMilliVoltDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataBatteryMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The battery voltage in millivolts."""

    decorations: Optional[DataBatteryMilliVoltDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataDefLevelMilliPercentDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataDefLevelMilliPercentDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataDefLevelMilliPercentDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataDefLevelMilliPercentDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataDefLevelMilliPercentDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataDefLevelMilliPercentDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataDefLevelMilliPercentDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataDefLevelMilliPercentDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataDefLevelMilliPercentDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataDefLevelMilliPercentDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataDefLevelMilliPercentDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataDefLevelMilliPercentDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataDefLevelMilliPercentDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataDefLevelMilliPercentDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataDefLevelMilliPercentDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataDefLevelMilliPercentDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataDefLevelMilliPercentDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataDefLevelMilliPercentDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataDefLevelMilliPercentDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataDefLevelMilliPercentDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataDefLevelMilliPercentDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataDefLevelMilliPercentDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataDefLevelMilliPercentDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataDefLevelMilliPercentDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataDefLevelMilliPercentDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataDefLevelMilliPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataDefLevelMilliPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataDefLevelMilliPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataDefLevelMilliPercentDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataDefLevelMilliPercentDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[
        List[DataDefLevelMilliPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for J1939 vehicles."""


class DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[
        List[DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]
    ] = FieldInfo(alias="confirmedDtcs", default=None)
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[
        List[DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]
    ] = FieldInfo(alias="permanentDtcs", default=None)
    """Permanent DTC codes."""


class DataDefLevelMilliPercentDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[
        List[DataDefLevelMilliPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for passenger vehicles."""


class DataDefLevelMilliPercentDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataDefLevelMilliPercentDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataDefLevelMilliPercentDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataDefLevelMilliPercentDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataDefLevelMilliPercentDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataDefLevelMilliPercentDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataDefLevelMilliPercentDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataDefLevelMilliPercentDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataDefLevelMilliPercentDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataDefLevelMilliPercentDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataDefLevelMilliPercentDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataDefLevelMilliPercentDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataDefLevelMilliPercentDecorationsGpsReverseGeo] = FieldInfo(
        alias="reverseGeo", default=None
    )
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataDefLevelMilliPercentDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataDefLevelMilliPercentDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataDefLevelMilliPercentDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataDefLevelMilliPercentDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataDefLevelMilliPercentDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataDefLevelMilliPercentDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataDefLevelMilliPercentDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataDefLevelMilliPercentDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataDefLevelMilliPercentDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataDefLevelMilliPercentDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataDefLevelMilliPercentDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataDefLevelMilliPercentDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataDefLevelMilliPercentDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataDefLevelMilliPercentDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataDefLevelMilliPercentDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataDefLevelMilliPercentDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataDefLevelMilliPercentDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataDefLevelMilliPercentDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataDefLevelMilliPercentDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataDefLevelMilliPercentDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataDefLevelMilliPercentDecorationsAmbientAirTemperatureMilliC] = (
        FieldInfo(alias="ambientAirTemperatureMilliC", default=None)
    )

    aux_input1: Optional[DataDefLevelMilliPercentDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataDefLevelMilliPercentDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataDefLevelMilliPercentDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataDefLevelMilliPercentDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataDefLevelMilliPercentDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataDefLevelMilliPercentDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataDefLevelMilliPercentDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataDefLevelMilliPercentDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataDefLevelMilliPercentDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataDefLevelMilliPercentDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataDefLevelMilliPercentDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataDefLevelMilliPercentDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataDefLevelMilliPercentDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataDefLevelMilliPercentDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataDefLevelMilliPercentDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataDefLevelMilliPercentDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataDefLevelMilliPercentDecorationsEcuSpeedMph] = FieldInfo(
        alias="ecuSpeedMph", default=None
    )

    engine_coolant_temperature_milli_c: Optional[DataDefLevelMilliPercentDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataDefLevelMilliPercentDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataDefLevelMilliPercentDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataDefLevelMilliPercentDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataDefLevelMilliPercentDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataDefLevelMilliPercentDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataDefLevelMilliPercentDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataDefLevelMilliPercentDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataDefLevelMilliPercentDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataDefLevelMilliPercentDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataDefLevelMilliPercentDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataDefLevelMilliPercentDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataDefLevelMilliPercentDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataDefLevelMilliPercentDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataDefLevelMilliPercentDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataDefLevelMilliPercentDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataDefLevelMilliPercentDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataDefLevelMilliPercentDecorationsEvStateOfChargeMilliPercent] = (
        FieldInfo(alias="evStateOfChargeMilliPercent", default=None)
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataDefLevelMilliPercentDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataDefLevelMilliPercentDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataDefLevelMilliPercentDecorationsGps] = None

    gps_distance_meters: Optional[DataDefLevelMilliPercentDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataDefLevelMilliPercentDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[
        DataDefLevelMilliPercentDecorationsIntakeManifoldTemperatureMilliC
    ] = FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)

    obd_engine_seconds: Optional[DataDefLevelMilliPercentDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataDefLevelMilliPercentDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataDefLevelMilliPercentDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataDefLevelMilliPercentDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataDefLevelMilliPercentDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataDefLevelMilliPercentDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataDefLevelMilliPercentDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataDefLevelMilliPercentDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataDefLevelMilliPercentDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataDefLevelMilliPercentDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataDefLevelMilliPercentDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataDefLevelMilliPercentDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataDefLevelMilliPercentDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataDefLevelMilliPercentDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataDefLevelMilliPercentDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataDefLevelMilliPercentDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataDefLevelMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """

    decorations: Optional[DataDefLevelMilliPercentDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataEcuSpeedMphDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataEcuSpeedMphDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEcuSpeedMphDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataEcuSpeedMphDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataEcuSpeedMphDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataEcuSpeedMphDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataEcuSpeedMphDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataEcuSpeedMphDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataEcuSpeedMphDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataEcuSpeedMphDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataEcuSpeedMphDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataEcuSpeedMphDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataEcuSpeedMphDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataEcuSpeedMphDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataEcuSpeedMphDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataEcuSpeedMphDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataEcuSpeedMphDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataEcuSpeedMphDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataEcuSpeedMphDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataEcuSpeedMphDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataEcuSpeedMphDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataEcuSpeedMphDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataEcuSpeedMphDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataEcuSpeedMphDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataEcuSpeedMphDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataEcuSpeedMphDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataEcuSpeedMphDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataEcuSpeedMphDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataEcuSpeedMphDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataEcuSpeedMphDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataEcuSpeedMphDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataEcuSpeedMphDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataEcuSpeedMphDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataEcuSpeedMphDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataEcuSpeedMphDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataEcuSpeedMphDecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataEcuSpeedMphDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataEcuSpeedMphDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataEcuSpeedMphDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataEcuSpeedMphDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataEcuSpeedMphDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataEcuSpeedMphDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataEcuSpeedMphDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataEcuSpeedMphDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataEcuSpeedMphDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataEcuSpeedMphDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataEcuSpeedMphDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataEcuSpeedMphDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataEcuSpeedMphDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataEcuSpeedMphDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataEcuSpeedMphDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataEcuSpeedMphDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataEcuSpeedMphDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataEcuSpeedMphDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataEcuSpeedMphDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataEcuSpeedMphDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataEcuSpeedMphDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEcuSpeedMphDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataEcuSpeedMphDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEcuSpeedMphDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataEcuSpeedMphDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataEcuSpeedMphDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataEcuSpeedMphDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEcuSpeedMphDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataEcuSpeedMphDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataEcuSpeedMphDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataEcuSpeedMphDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataEcuSpeedMphDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataEcuSpeedMphDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataEcuSpeedMphDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataEcuSpeedMphDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataEcuSpeedMphDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataEcuSpeedMphDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataEcuSpeedMphDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataEcuSpeedMphDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataEcuSpeedMphDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataEcuSpeedMphDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataEcuSpeedMphDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataEcuSpeedMphDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataEcuSpeedMphDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataEcuSpeedMphDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataEcuSpeedMphDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataEcuSpeedMphDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataEcuSpeedMphDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataEcuSpeedMphDecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataEcuSpeedMphDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataEcuSpeedMphDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataEcuSpeedMphDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataEcuSpeedMphDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataEcuSpeedMphDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataEcuSpeedMphDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataEcuSpeedMphDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataEcuSpeedMphDecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataEcuSpeedMphDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataEcuSpeedMphDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataEcuSpeedMphDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataEcuSpeedMphDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataEcuSpeedMphDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataEcuSpeedMphDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataEcuSpeedMphDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataEcuSpeedMphDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataEcuSpeedMphDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataEcuSpeedMphDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataEcuSpeedMphDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataEcuSpeedMphDecorationsGps] = None

    gps_distance_meters: Optional[DataEcuSpeedMphDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataEcuSpeedMphDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataEcuSpeedMphDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataEcuSpeedMphDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataEcuSpeedMphDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataEcuSpeedMphDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataEcuSpeedMphDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataEcuSpeedMphDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataEcuSpeedMphDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataEcuSpeedMphDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataEcuSpeedMphDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataEcuSpeedMphDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataEcuSpeedMphDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataEcuSpeedMphDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataEcuSpeedMphDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataEcuSpeedMphDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataEcuSpeedMphDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataEcuSpeedMphDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataEcuSpeedMphDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataEcuSpeedMph(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: float
    """The speed of the vehicle in miles per hour."""

    decorations: Optional[DataEcuSpeedMphDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataEngineCoolantTemperatureMilliCDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineCoolantTemperatureMilliCDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataEngineCoolantTemperatureMilliCDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataEngineCoolantTemperatureMilliCDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataEngineCoolantTemperatureMilliCDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataEngineCoolantTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataEngineCoolantTemperatureMilliCDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataEngineCoolantTemperatureMilliCDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineCoolantTemperatureMilliCDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataEngineCoolantTemperatureMilliCDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataEngineCoolantTemperatureMilliCDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataEngineCoolantTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataEngineCoolantTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataEngineCoolantTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataEngineCoolantTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataEngineCoolantTemperatureMilliCDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataEngineCoolantTemperatureMilliCDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineCoolantTemperatureMilliCDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataEngineCoolantTemperatureMilliCDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataEngineCoolantTemperatureMilliCDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataEngineCoolantTemperatureMilliCDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataEngineCoolantTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineCoolantTemperatureMilliCDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights] = (
        FieldInfo(alias="checkEngineLights", default=None)
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[
        List[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for J1939 vehicles."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[
        List[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]
    ] = FieldInfo(alias="confirmedDtcs", default=None)
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus
    ] = FieldInfo(alias="monitorStatus", default=None)
    """Readings from engine sensors"""

    pending_dtcs: Optional[
        List[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]
    ] = FieldInfo(alias="pendingDtcs", default=None)
    """Pending DTC codes."""

    permanent_dtcs: Optional[
        List[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]
    ] = FieldInfo(alias="permanentDtcs", default=None)
    """Permanent DTC codes."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[
        List[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for passenger vehicles."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[
        List[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataEngineCoolantTemperatureMilliCDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataEngineCoolantTemperatureMilliCDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataEngineCoolantTemperatureMilliCDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineCoolantTemperatureMilliCDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataEngineCoolantTemperatureMilliCDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataEngineCoolantTemperatureMilliCDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataEngineCoolantTemperatureMilliCDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataEngineCoolantTemperatureMilliCDecorationsGpsReverseGeo] = FieldInfo(
        alias="reverseGeo", default=None
    )
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataEngineCoolantTemperatureMilliCDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataEngineCoolantTemperatureMilliCDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataEngineCoolantTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataEngineCoolantTemperatureMilliCDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataEngineCoolantTemperatureMilliCDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataEngineCoolantTemperatureMilliCDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineCoolantTemperatureMilliCDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataEngineCoolantTemperatureMilliCDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataEngineCoolantTemperatureMilliCDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsAmbientAirTemperatureMilliC
    ] = FieldInfo(alias="ambientAirTemperatureMilliC", default=None)

    aux_input1: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput1] = FieldInfo(
        alias="auxInput1", default=None
    )

    aux_input10: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput10] = FieldInfo(
        alias="auxInput10", default=None
    )

    aux_input11: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput11] = FieldInfo(
        alias="auxInput11", default=None
    )

    aux_input12: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput12] = FieldInfo(
        alias="auxInput12", default=None
    )

    aux_input13: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput13] = FieldInfo(
        alias="auxInput13", default=None
    )

    aux_input2: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput2] = FieldInfo(
        alias="auxInput2", default=None
    )

    aux_input3: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput3] = FieldInfo(
        alias="auxInput3", default=None
    )

    aux_input4: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput4] = FieldInfo(
        alias="auxInput4", default=None
    )

    aux_input5: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput5] = FieldInfo(
        alias="auxInput5", default=None
    )

    aux_input6: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput6] = FieldInfo(
        alias="auxInput6", default=None
    )

    aux_input7: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput7] = FieldInfo(
        alias="auxInput7", default=None
    )

    aux_input8: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput8] = FieldInfo(
        alias="auxInput8", default=None
    )

    aux_input9: Optional[DataEngineCoolantTemperatureMilliCDecorationsAuxInput9] = FieldInfo(
        alias="auxInput9", default=None
    )

    barometric_pressure_pa: Optional[DataEngineCoolantTemperatureMilliCDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataEngineCoolantTemperatureMilliCDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataEngineCoolantTemperatureMilliCDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataEngineCoolantTemperatureMilliCDecorationsEcuSpeedMph] = FieldInfo(
        alias="ecuSpeedMph", default=None
    )

    engine_coolant_temperature_milli_c: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC
    ] = FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)

    engine_immobilizer: Optional[DataEngineCoolantTemperatureMilliCDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataEngineCoolantTemperatureMilliCDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataEngineCoolantTemperatureMilliCDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataEngineCoolantTemperatureMilliCDecorationsEngineRpm] = FieldInfo(
        alias="engineRpm", default=None
    )

    engine_states: Optional[DataEngineCoolantTemperatureMilliCDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataEngineCoolantTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp] = (
        FieldInfo(alias="evBatteryCurrentMilliAmp", default=None)
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataEngineCoolantTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt] = (
        FieldInfo(alias="evBatteryVoltageMilliVolt", default=None)
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataEngineCoolantTemperatureMilliCDecorationsEvChargingCurrentMilliAmp] = (
        FieldInfo(alias="evChargingCurrentMilliAmp", default=None)
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataEngineCoolantTemperatureMilliCDecorationsEvChargingEnergyMicroWh] = (
        FieldInfo(alias="evChargingEnergyMicroWh", default=None)
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataEngineCoolantTemperatureMilliCDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsEvChargingVoltageMilliVolt
    ] = FieldInfo(alias="evChargingVoltageMilliVolt", default=None)
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataEngineCoolantTemperatureMilliCDecorationsEvConsumedEnergyMicroWh] = (
        FieldInfo(alias="evConsumedEnergyMicroWh", default=None)
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataEngineCoolantTemperatureMilliCDecorationsEvDistanceDrivenMeters] = (
        FieldInfo(alias="evDistanceDrivenMeters", default=None)
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh
    ] = FieldInfo(alias="evRegeneratedEnergyMicroWh", default=None)
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsEvStateOfChargeMilliPercent
    ] = FieldInfo(alias="evStateOfChargeMilliPercent", default=None)
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataEngineCoolantTemperatureMilliCDecorationsFaultCodes] = FieldInfo(
        alias="faultCodes", default=None
    )
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataEngineCoolantTemperatureMilliCDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataEngineCoolantTemperatureMilliCDecorationsGps] = None

    gps_distance_meters: Optional[DataEngineCoolantTemperatureMilliCDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataEngineCoolantTemperatureMilliCDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[
        DataEngineCoolantTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC
    ] = FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)

    obd_engine_seconds: Optional[DataEngineCoolantTemperatureMilliCDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataEngineCoolantTemperatureMilliCDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataEngineCoolantTemperatureMilliCDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataEngineCoolantTemperatureMilliCDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataEngineCoolantTemperatureMilliCDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataEngineCoolantTemperatureMilliC(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The engine coolant temperature reading in millidegree Celsius."""

    decorations: Optional[DataEngineCoolantTemperatureMilliCDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataEngineImmobilizerDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataEngineImmobilizerDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineImmobilizerDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataEngineImmobilizerDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataEngineImmobilizerDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataEngineImmobilizerDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataEngineImmobilizerDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataEngineImmobilizerDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataEngineImmobilizerDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineImmobilizerDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataEngineImmobilizerDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataEngineImmobilizerDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataEngineImmobilizerDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataEngineImmobilizerDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataEngineImmobilizerDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataEngineImmobilizerDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataEngineImmobilizerDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataEngineImmobilizerDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineImmobilizerDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataEngineImmobilizerDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataEngineImmobilizerDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataEngineImmobilizerDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataEngineImmobilizerDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineImmobilizerDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataEngineImmobilizerDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataEngineImmobilizerDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataEngineImmobilizerDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataEngineImmobilizerDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataEngineImmobilizerDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataEngineImmobilizerDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataEngineImmobilizerDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataEngineImmobilizerDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataEngineImmobilizerDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataEngineImmobilizerDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataEngineImmobilizerDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataEngineImmobilizerDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataEngineImmobilizerDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataEngineImmobilizerDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataEngineImmobilizerDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataEngineImmobilizerDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataEngineImmobilizerDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineImmobilizerDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataEngineImmobilizerDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataEngineImmobilizerDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataEngineImmobilizerDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataEngineImmobilizerDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataEngineImmobilizerDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataEngineImmobilizerDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataEngineImmobilizerDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataEngineImmobilizerDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataEngineImmobilizerDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataEngineImmobilizerDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataEngineImmobilizerDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataEngineImmobilizerDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataEngineImmobilizerDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataEngineImmobilizerDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataEngineImmobilizerDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineImmobilizerDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataEngineImmobilizerDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineImmobilizerDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataEngineImmobilizerDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataEngineImmobilizerDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataEngineImmobilizerDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineImmobilizerDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataEngineImmobilizerDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataEngineImmobilizerDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataEngineImmobilizerDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataEngineImmobilizerDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataEngineImmobilizerDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataEngineImmobilizerDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataEngineImmobilizerDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataEngineImmobilizerDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataEngineImmobilizerDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataEngineImmobilizerDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataEngineImmobilizerDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataEngineImmobilizerDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataEngineImmobilizerDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataEngineImmobilizerDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataEngineImmobilizerDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataEngineImmobilizerDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataEngineImmobilizerDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataEngineImmobilizerDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataEngineImmobilizerDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataEngineImmobilizerDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataEngineImmobilizerDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataEngineImmobilizerDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataEngineImmobilizerDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataEngineImmobilizerDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataEngineImmobilizerDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataEngineImmobilizerDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataEngineImmobilizerDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataEngineImmobilizerDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataEngineImmobilizerDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataEngineImmobilizerDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataEngineImmobilizerDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataEngineImmobilizerDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataEngineImmobilizerDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataEngineImmobilizerDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataEngineImmobilizerDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataEngineImmobilizerDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataEngineImmobilizerDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataEngineImmobilizerDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataEngineImmobilizerDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataEngineImmobilizerDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataEngineImmobilizerDecorationsGps] = None

    gps_distance_meters: Optional[DataEngineImmobilizerDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataEngineImmobilizerDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataEngineImmobilizerDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataEngineImmobilizerDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataEngineImmobilizerDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataEngineImmobilizerDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataEngineImmobilizerDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataEngineImmobilizerDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataEngineImmobilizerDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataEngineImmobilizerDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataEngineImmobilizerDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataEngineImmobilizerDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataEngineImmobilizerDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataEngineImmobilizerDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataEngineImmobilizerDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataEngineImmobilizerDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataEngineImmobilizerDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataEngineImmobilizerDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataEngineImmobilizerDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    decorations: Optional[DataEngineImmobilizerDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataEngineLoadPercentDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataEngineLoadPercentDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineLoadPercentDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataEngineLoadPercentDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataEngineLoadPercentDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataEngineLoadPercentDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataEngineLoadPercentDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataEngineLoadPercentDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataEngineLoadPercentDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineLoadPercentDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataEngineLoadPercentDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataEngineLoadPercentDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataEngineLoadPercentDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataEngineLoadPercentDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataEngineLoadPercentDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataEngineLoadPercentDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataEngineLoadPercentDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataEngineLoadPercentDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineLoadPercentDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataEngineLoadPercentDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataEngineLoadPercentDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataEngineLoadPercentDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataEngineLoadPercentDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineLoadPercentDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataEngineLoadPercentDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataEngineLoadPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataEngineLoadPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataEngineLoadPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataEngineLoadPercentDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataEngineLoadPercentDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataEngineLoadPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataEngineLoadPercentDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataEngineLoadPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataEngineLoadPercentDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataEngineLoadPercentDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataEngineLoadPercentDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataEngineLoadPercentDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataEngineLoadPercentDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataEngineLoadPercentDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataEngineLoadPercentDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataEngineLoadPercentDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineLoadPercentDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataEngineLoadPercentDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataEngineLoadPercentDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataEngineLoadPercentDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataEngineLoadPercentDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataEngineLoadPercentDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataEngineLoadPercentDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataEngineLoadPercentDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataEngineLoadPercentDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataEngineLoadPercentDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataEngineLoadPercentDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataEngineLoadPercentDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataEngineLoadPercentDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataEngineLoadPercentDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataEngineLoadPercentDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataEngineLoadPercentDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineLoadPercentDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataEngineLoadPercentDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineLoadPercentDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataEngineLoadPercentDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataEngineLoadPercentDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataEngineLoadPercentDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineLoadPercentDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataEngineLoadPercentDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataEngineLoadPercentDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataEngineLoadPercentDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataEngineLoadPercentDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataEngineLoadPercentDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataEngineLoadPercentDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataEngineLoadPercentDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataEngineLoadPercentDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataEngineLoadPercentDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataEngineLoadPercentDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataEngineLoadPercentDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataEngineLoadPercentDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataEngineLoadPercentDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataEngineLoadPercentDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataEngineLoadPercentDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataEngineLoadPercentDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataEngineLoadPercentDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataEngineLoadPercentDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataEngineLoadPercentDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataEngineLoadPercentDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataEngineLoadPercentDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataEngineLoadPercentDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataEngineLoadPercentDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataEngineLoadPercentDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataEngineLoadPercentDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataEngineLoadPercentDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataEngineLoadPercentDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataEngineLoadPercentDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataEngineLoadPercentDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataEngineLoadPercentDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataEngineLoadPercentDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataEngineLoadPercentDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataEngineLoadPercentDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataEngineLoadPercentDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataEngineLoadPercentDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataEngineLoadPercentDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataEngineLoadPercentDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataEngineLoadPercentDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataEngineLoadPercentDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataEngineLoadPercentDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataEngineLoadPercentDecorationsGps] = None

    gps_distance_meters: Optional[DataEngineLoadPercentDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataEngineLoadPercentDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataEngineLoadPercentDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataEngineLoadPercentDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataEngineLoadPercentDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataEngineLoadPercentDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataEngineLoadPercentDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataEngineLoadPercentDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataEngineLoadPercentDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataEngineLoadPercentDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataEngineLoadPercentDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataEngineLoadPercentDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataEngineLoadPercentDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataEngineLoadPercentDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataEngineLoadPercentDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataEngineLoadPercentDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataEngineLoadPercentDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataEngineLoadPercentDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataEngineLoadPercentDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataEngineLoadPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""

    decorations: Optional[DataEngineLoadPercentDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataEngineOilPressureKPaDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataEngineOilPressureKPaDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineOilPressureKPaDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataEngineOilPressureKPaDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataEngineOilPressureKPaDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataEngineOilPressureKPaDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataEngineOilPressureKPaDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataEngineOilPressureKPaDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataEngineOilPressureKPaDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineOilPressureKPaDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataEngineOilPressureKPaDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataEngineOilPressureKPaDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataEngineOilPressureKPaDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataEngineOilPressureKPaDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataEngineOilPressureKPaDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataEngineOilPressureKPaDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataEngineOilPressureKPaDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataEngineOilPressureKPaDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineOilPressureKPaDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataEngineOilPressureKPaDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataEngineOilPressureKPaDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataEngineOilPressureKPaDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataEngineOilPressureKPaDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineOilPressureKPaDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataEngineOilPressureKPaDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataEngineOilPressureKPaDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataEngineOilPressureKPaDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataEngineOilPressureKPaDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataEngineOilPressureKPaDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataEngineOilPressureKPaDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[
        List[DataEngineOilPressureKPaDecorationsFaultCodesJ1939DiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for J1939 vehicles."""


class DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[
        List[DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]
    ] = FieldInfo(alias="confirmedDtcs", default=None)
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[
        List[DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]
    ] = FieldInfo(alias="permanentDtcs", default=None)
    """Permanent DTC codes."""


class DataEngineOilPressureKPaDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[
        List[DataEngineOilPressureKPaDecorationsFaultCodesObdiiDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for passenger vehicles."""


class DataEngineOilPressureKPaDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataEngineOilPressureKPaDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataEngineOilPressureKPaDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataEngineOilPressureKPaDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataEngineOilPressureKPaDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataEngineOilPressureKPaDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataEngineOilPressureKPaDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataEngineOilPressureKPaDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineOilPressureKPaDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataEngineOilPressureKPaDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataEngineOilPressureKPaDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataEngineOilPressureKPaDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataEngineOilPressureKPaDecorationsGpsReverseGeo] = FieldInfo(
        alias="reverseGeo", default=None
    )
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataEngineOilPressureKPaDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataEngineOilPressureKPaDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataEngineOilPressureKPaDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataEngineOilPressureKPaDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataEngineOilPressureKPaDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataEngineOilPressureKPaDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataEngineOilPressureKPaDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataEngineOilPressureKPaDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataEngineOilPressureKPaDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataEngineOilPressureKPaDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataEngineOilPressureKPaDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineOilPressureKPaDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataEngineOilPressureKPaDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineOilPressureKPaDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataEngineOilPressureKPaDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataEngineOilPressureKPaDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataEngineOilPressureKPaDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineOilPressureKPaDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataEngineOilPressureKPaDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataEngineOilPressureKPaDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataEngineOilPressureKPaDecorationsAmbientAirTemperatureMilliC] = (
        FieldInfo(alias="ambientAirTemperatureMilliC", default=None)
    )

    aux_input1: Optional[DataEngineOilPressureKPaDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataEngineOilPressureKPaDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataEngineOilPressureKPaDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataEngineOilPressureKPaDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataEngineOilPressureKPaDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataEngineOilPressureKPaDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataEngineOilPressureKPaDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataEngineOilPressureKPaDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataEngineOilPressureKPaDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataEngineOilPressureKPaDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataEngineOilPressureKPaDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataEngineOilPressureKPaDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataEngineOilPressureKPaDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataEngineOilPressureKPaDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataEngineOilPressureKPaDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataEngineOilPressureKPaDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataEngineOilPressureKPaDecorationsEcuSpeedMph] = FieldInfo(
        alias="ecuSpeedMph", default=None
    )

    engine_coolant_temperature_milli_c: Optional[DataEngineOilPressureKPaDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataEngineOilPressureKPaDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataEngineOilPressureKPaDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataEngineOilPressureKPaDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataEngineOilPressureKPaDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataEngineOilPressureKPaDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataEngineOilPressureKPaDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataEngineOilPressureKPaDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataEngineOilPressureKPaDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataEngineOilPressureKPaDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataEngineOilPressureKPaDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataEngineOilPressureKPaDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataEngineOilPressureKPaDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataEngineOilPressureKPaDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataEngineOilPressureKPaDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataEngineOilPressureKPaDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataEngineOilPressureKPaDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataEngineOilPressureKPaDecorationsEvStateOfChargeMilliPercent] = (
        FieldInfo(alias="evStateOfChargeMilliPercent", default=None)
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataEngineOilPressureKPaDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataEngineOilPressureKPaDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataEngineOilPressureKPaDecorationsGps] = None

    gps_distance_meters: Optional[DataEngineOilPressureKPaDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataEngineOilPressureKPaDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[
        DataEngineOilPressureKPaDecorationsIntakeManifoldTemperatureMilliC
    ] = FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)

    obd_engine_seconds: Optional[DataEngineOilPressureKPaDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataEngineOilPressureKPaDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataEngineOilPressureKPaDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataEngineOilPressureKPaDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataEngineOilPressureKPaDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataEngineOilPressureKPaDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataEngineOilPressureKPaDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataEngineOilPressureKPaDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataEngineOilPressureKPaDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataEngineOilPressureKPaDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataEngineOilPressureKPaDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataEngineOilPressureKPaDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataEngineOilPressureKPaDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataEngineOilPressureKPaDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataEngineOilPressureKPaDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataEngineOilPressureKPaDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataEngineOilPressureKPa(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The engine oil pressure reading in kilopascals."""

    decorations: Optional[DataEngineOilPressureKPaDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataEngineRpmDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataEngineRpmDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineRpmDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataEngineRpmDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataEngineRpmDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataEngineRpmDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataEngineRpmDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataEngineRpmDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataEngineRpmDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineRpmDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataEngineRpmDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataEngineRpmDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataEngineRpmDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataEngineRpmDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataEngineRpmDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataEngineRpmDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataEngineRpmDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataEngineRpmDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineRpmDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataEngineRpmDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataEngineRpmDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataEngineRpmDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataEngineRpmDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineRpmDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataEngineRpmDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataEngineRpmDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataEngineRpmDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataEngineRpmDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataEngineRpmDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataEngineRpmDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataEngineRpmDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataEngineRpmDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataEngineRpmDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataEngineRpmDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataEngineRpmDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataEngineRpmDecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataEngineRpmDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataEngineRpmDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataEngineRpmDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataEngineRpmDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataEngineRpmDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineRpmDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataEngineRpmDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataEngineRpmDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataEngineRpmDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataEngineRpmDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataEngineRpmDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataEngineRpmDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataEngineRpmDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataEngineRpmDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataEngineRpmDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataEngineRpmDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataEngineRpmDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataEngineRpmDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataEngineRpmDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataEngineRpmDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataEngineRpmDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineRpmDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataEngineRpmDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineRpmDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataEngineRpmDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataEngineRpmDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataEngineRpmDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineRpmDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataEngineRpmDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataEngineRpmDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataEngineRpmDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataEngineRpmDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataEngineRpmDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataEngineRpmDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataEngineRpmDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataEngineRpmDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataEngineRpmDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataEngineRpmDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataEngineRpmDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataEngineRpmDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataEngineRpmDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataEngineRpmDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataEngineRpmDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataEngineRpmDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataEngineRpmDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataEngineRpmDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataEngineRpmDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataEngineRpmDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataEngineRpmDecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataEngineRpmDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataEngineRpmDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataEngineRpmDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataEngineRpmDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataEngineRpmDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataEngineRpmDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataEngineRpmDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataEngineRpmDecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataEngineRpmDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataEngineRpmDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataEngineRpmDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataEngineRpmDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataEngineRpmDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataEngineRpmDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataEngineRpmDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataEngineRpmDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataEngineRpmDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataEngineRpmDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataEngineRpmDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataEngineRpmDecorationsGps] = None

    gps_distance_meters: Optional[DataEngineRpmDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataEngineRpmDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataEngineRpmDecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataEngineRpmDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataEngineRpmDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataEngineRpmDecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataEngineRpmDecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataEngineRpmDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataEngineRpmDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataEngineRpmDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataEngineRpmDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataEngineRpmDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataEngineRpmDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataEngineRpmDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataEngineRpmDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataEngineRpmDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataEngineRpmDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataEngineRpmDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataEngineRpmDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataEngineRpm(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The revolutions per minute of the engine."""

    decorations: Optional[DataEngineRpmDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataEngineStateDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataEngineStateDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataEngineStateDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataEngineStateDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataEngineStateDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataEngineStateDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataEngineStateDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataEngineStateDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataEngineStateDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineStateDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataEngineStateDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataEngineStateDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataEngineStateDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataEngineStateDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataEngineStateDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataEngineStateDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataEngineStateDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataEngineStateDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineStateDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataEngineStateDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataEngineStateDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataEngineStateDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataEngineStateDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataEngineStateDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataEngineStateDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataEngineStateDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataEngineStateDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataEngineStateDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataEngineStateDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataEngineStateDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataEngineStateDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataEngineStateDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataEngineStateDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataEngineStateDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataEngineStateDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataEngineStateDecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataEngineStateDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataEngineStateDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataEngineStateDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataEngineStateDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataEngineStateDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataEngineStateDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataEngineStateDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataEngineStateDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataEngineStateDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataEngineStateDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataEngineStateDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataEngineStateDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataEngineStateDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataEngineStateDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataEngineStateDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataEngineStateDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataEngineStateDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataEngineStateDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataEngineStateDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataEngineStateDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataEngineStateDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineStateDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataEngineStateDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineStateDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataEngineStateDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataEngineStateDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataEngineStateDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataEngineStateDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataEngineStateDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataEngineStateDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataEngineStateDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataEngineStateDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataEngineStateDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataEngineStateDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataEngineStateDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataEngineStateDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataEngineStateDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataEngineStateDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataEngineStateDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataEngineStateDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataEngineStateDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataEngineStateDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataEngineStateDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataEngineStateDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataEngineStateDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataEngineStateDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataEngineStateDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataEngineStateDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataEngineStateDecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataEngineStateDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataEngineStateDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataEngineStateDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataEngineStateDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataEngineStateDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataEngineStateDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataEngineStateDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataEngineStateDecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataEngineStateDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataEngineStateDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataEngineStateDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataEngineStateDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataEngineStateDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataEngineStateDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataEngineStateDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataEngineStateDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataEngineStateDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataEngineStateDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataEngineStateDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataEngineStateDecorationsGps] = None

    gps_distance_meters: Optional[DataEngineStateDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataEngineStateDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataEngineStateDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataEngineStateDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataEngineStateDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataEngineStateDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataEngineStateDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataEngineStateDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataEngineStateDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataEngineStateDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataEngineStateDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataEngineStateDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataEngineStateDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataEngineStateDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataEngineStateDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataEngineStateDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataEngineStateDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataEngineStateDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataEngineStateDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataEngineState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""

    decorations: Optional[DataEngineStateDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataEvDistanceDrivenMeter(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataFaultCodeDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataFaultCodeDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFaultCodeDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataFaultCodeDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataFaultCodeDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataFaultCodeDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataFaultCodeDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataFaultCodeDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataFaultCodeDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataFaultCodeDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataFaultCodeDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataFaultCodeDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataFaultCodeDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataFaultCodeDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataFaultCodeDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataFaultCodeDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataFaultCodeDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataFaultCodeDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataFaultCodeDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataFaultCodeDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataFaultCodeDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataFaultCodeDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataFaultCodeDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataFaultCodeDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataFaultCodeDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataFaultCodeDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataFaultCodeDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataFaultCodeDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataFaultCodeDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataFaultCodeDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataFaultCodeDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataFaultCodeDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataFaultCodeDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataFaultCodeDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataFaultCodeDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataFaultCodeDecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataFaultCodeDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataFaultCodeDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataFaultCodeDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataFaultCodeDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataFaultCodeDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataFaultCodeDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataFaultCodeDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataFaultCodeDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataFaultCodeDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataFaultCodeDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataFaultCodeDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataFaultCodeDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataFaultCodeDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataFaultCodeDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataFaultCodeDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataFaultCodeDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataFaultCodeDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataFaultCodeDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataFaultCodeDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataFaultCodeDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataFaultCodeDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataFaultCodeDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataFaultCodeDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataFaultCodeDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataFaultCodeDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataFaultCodeDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataFaultCodeDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataFaultCodeDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataFaultCodeDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataFaultCodeDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataFaultCodeDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataFaultCodeDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataFaultCodeDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataFaultCodeDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataFaultCodeDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataFaultCodeDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataFaultCodeDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataFaultCodeDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataFaultCodeDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataFaultCodeDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataFaultCodeDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataFaultCodeDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataFaultCodeDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataFaultCodeDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataFaultCodeDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataFaultCodeDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataFaultCodeDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataFaultCodeDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataFaultCodeDecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataFaultCodeDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataFaultCodeDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataFaultCodeDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataFaultCodeDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataFaultCodeDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataFaultCodeDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataFaultCodeDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataFaultCodeDecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataFaultCodeDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataFaultCodeDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataFaultCodeDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataFaultCodeDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataFaultCodeDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataFaultCodeDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataFaultCodeDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataFaultCodeDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataFaultCodeDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataFaultCodeDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataFaultCodeDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataFaultCodeDecorationsGps] = None

    gps_distance_meters: Optional[DataFaultCodeDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataFaultCodeDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataFaultCodeDecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataFaultCodeDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataFaultCodeDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataFaultCodeDecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataFaultCodeDecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataFaultCodeDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataFaultCodeDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataFaultCodeDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataFaultCodeDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataFaultCodeDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataFaultCodeDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataFaultCodeDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataFaultCodeDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataFaultCodeDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataFaultCodeDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataFaultCodeDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataFaultCodeDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataFaultCodeJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataFaultCodeJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataFaultCodeJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[DataFaultCodeJ1939DiagnosticTroubleCodeVendorSpecificFields] = FieldInfo(
        alias="vendorSpecificFields", default=None
    )
    """Vendor specific data for J1939 vehicles."""


class DataFaultCodeJ1939(BaseModel):
    check_engine_lights: Optional[DataFaultCodeJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataFaultCodeJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataFaultCodeObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFaultCodeObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataFaultCodeObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFaultCodeObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFaultCodeObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataFaultCodeObdiiDiagnosticTroubleCodeConfirmedDtc]] = FieldInfo(
        alias="confirmedDtcs", default=None
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataFaultCodeObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataFaultCodeObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataFaultCodeObdiiDiagnosticTroubleCodePermanentDtc]] = FieldInfo(
        alias="permanentDtcs", default=None
    )
    """Permanent DTC codes."""


class DataFaultCodeObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataFaultCodeObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataFaultCodeOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataFaultCodeOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataFaultCodeOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataFaultCode(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    decorations: Optional[DataFaultCodeDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    j1939: Optional[DataFaultCodeJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataFaultCodeObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataFaultCodeOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataFuelPercentDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataFuelPercentDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataFuelPercentDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataFuelPercentDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataFuelPercentDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataFuelPercentDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataFuelPercentDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataFuelPercentDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataFuelPercentDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataFuelPercentDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataFuelPercentDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataFuelPercentDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataFuelPercentDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataFuelPercentDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataFuelPercentDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataFuelPercentDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataFuelPercentDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataFuelPercentDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataFuelPercentDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataFuelPercentDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataFuelPercentDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataFuelPercentDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataFuelPercentDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataFuelPercentDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataFuelPercentDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataFuelPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataFuelPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataFuelPercentDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataFuelPercentDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataFuelPercentDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataFuelPercentDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataFuelPercentDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataFuelPercentDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataFuelPercentDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataFuelPercentDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataFuelPercentDecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataFuelPercentDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataFuelPercentDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataFuelPercentDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataFuelPercentDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataFuelPercentDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataFuelPercentDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataFuelPercentDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataFuelPercentDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataFuelPercentDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataFuelPercentDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataFuelPercentDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataFuelPercentDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataFuelPercentDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataFuelPercentDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataFuelPercentDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataFuelPercentDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataFuelPercentDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataFuelPercentDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataFuelPercentDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataFuelPercentDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataFuelPercentDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataFuelPercentDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataFuelPercentDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataFuelPercentDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataFuelPercentDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataFuelPercentDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataFuelPercentDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataFuelPercentDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataFuelPercentDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataFuelPercentDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataFuelPercentDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataFuelPercentDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataFuelPercentDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataFuelPercentDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataFuelPercentDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataFuelPercentDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataFuelPercentDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataFuelPercentDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataFuelPercentDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataFuelPercentDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataFuelPercentDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataFuelPercentDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataFuelPercentDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataFuelPercentDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataFuelPercentDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataFuelPercentDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataFuelPercentDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataFuelPercentDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataFuelPercentDecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataFuelPercentDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataFuelPercentDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataFuelPercentDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataFuelPercentDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataFuelPercentDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataFuelPercentDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataFuelPercentDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataFuelPercentDecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataFuelPercentDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataFuelPercentDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataFuelPercentDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataFuelPercentDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataFuelPercentDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataFuelPercentDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataFuelPercentDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataFuelPercentDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataFuelPercentDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataFuelPercentDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataFuelPercentDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataFuelPercentDecorationsGps] = None

    gps_distance_meters: Optional[DataFuelPercentDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataFuelPercentDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataFuelPercentDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataFuelPercentDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataFuelPercentDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataFuelPercentDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataFuelPercentDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataFuelPercentDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataFuelPercentDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataFuelPercentDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataFuelPercentDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataFuelPercentDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataFuelPercentDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataFuelPercentDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataFuelPercentDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataFuelPercentDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataFuelPercentDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataFuelPercentDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataFuelPercentDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataFuelPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""

    decorations: Optional[DataFuelPercentDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataGpAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataGpDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataGpDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataGpDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataGpDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataGpDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataGpDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataGpDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataGpDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataGpDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataGpDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataGpDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataGpDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataGpDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataGpDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataGpDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataGpDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataGpDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataGpDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataGpDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataGpDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataGpDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataGpDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataGpDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataGpDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataGpDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataGpDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[DataGpDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields] = (
        FieldInfo(alias="vendorSpecificFields", default=None)
    )
    """Vendor specific data for J1939 vehicles."""


class DataGpDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataGpDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataGpDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = FieldInfo(
        alias="confirmedDtcs", default=None
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = FieldInfo(
        alias="permanentDtcs", default=None
    )
    """Permanent DTC codes."""


class DataGpDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataGpDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataGpDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataGpDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataGpDecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataGpDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataGpDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataGpDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataGpDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataGpDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataGpDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataGpDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataGpDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataGpDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataGpDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataGpDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataGpDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataGpDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataGpDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataGpDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataGpDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataGpDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataGpDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataGpDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataGpDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataGpDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataGpDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataGpDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataGpDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataGpDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataGpDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataGpDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataGpDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataGpDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataGpDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataGpDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataGpDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataGpDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataGpDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataGpDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataGpDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataGpDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataGpDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataGpDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataGpDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataGpDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataGpDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataGpDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataGpDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataGpDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataGpDecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataGpDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataGpDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataGpDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataGpDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataGpDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[DataGpDecorationsEvAverageBatteryTemperatureMilliCelsius] = (
        FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    )
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataGpDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataGpDecorationsEvBatteryStateOfHealthMilliPercent] = FieldInfo(
        alias="evBatteryStateOfHealthMilliPercent", default=None
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataGpDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataGpDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataGpDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataGpDecorationsEvChargingStatus] = FieldInfo(alias="evChargingStatus", default=None)
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataGpDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataGpDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataGpDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataGpDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataGpDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataGpDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataGpDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataGpDecorationsGps] = None

    gps_distance_meters: Optional[DataGpDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataGpDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataGpDecorationsIntakeManifoldTemperatureMilliC] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )

    obd_engine_seconds: Optional[DataGpDecorationsObdEngineSeconds] = FieldInfo(alias="obdEngineSeconds", default=None)

    obd_odometer_meters: Optional[DataGpDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataGpDecorationsSeatbeltDriver] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataGpDecorationsSpreaderActive] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataGpDecorationsSpreaderAirTemp] = FieldInfo(alias="spreaderAirTemp", default=None)
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataGpDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataGpDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataGpDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataGpDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataGpDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataGpDecorationsSpreaderOnState] = FieldInfo(alias="spreaderOnState", default=None)
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataGpDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataGpDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataGpDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataGpDecorationsSpreaderRoadTemp] = FieldInfo(alias="spreaderRoadTemp", default=None)
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataGpDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataGpReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataGp(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    address: Optional[DataGpAddress] = None
    """Address that the location is in."""

    decorations: Optional[DataGpDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataGpReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataGpsDistanceMeterDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataGpsDistanceMeterDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsDistanceMeterDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataGpsDistanceMeterDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataGpsDistanceMeterDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataGpsDistanceMeterDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataGpsDistanceMeterDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataGpsDistanceMeterDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataGpsDistanceMeterDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataGpsDistanceMeterDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataGpsDistanceMeterDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataGpsDistanceMeterDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataGpsDistanceMeterDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataGpsDistanceMeterDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataGpsDistanceMeterDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataGpsDistanceMeterDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataGpsDistanceMeterDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataGpsDistanceMeterDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataGpsDistanceMeterDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataGpsDistanceMeterDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataGpsDistanceMeterDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataGpsDistanceMeterDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataGpsDistanceMeterDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataGpsDistanceMeterDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataGpsDistanceMeterDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataGpsDistanceMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataGpsDistanceMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataGpsDistanceMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataGpsDistanceMeterDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataGpsDistanceMeterDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataGpsDistanceMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataGpsDistanceMeterDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataGpsDistanceMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataGpsDistanceMeterDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataGpsDistanceMeterDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataGpsDistanceMeterDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataGpsDistanceMeterDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataGpsDistanceMeterDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataGpsDistanceMeterDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataGpsDistanceMeterDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataGpsDistanceMeterDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataGpsDistanceMeterDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataGpsDistanceMeterDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataGpsDistanceMeterDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataGpsDistanceMeterDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataGpsDistanceMeterDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataGpsDistanceMeterDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataGpsDistanceMeterDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataGpsDistanceMeterDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataGpsDistanceMeterDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataGpsDistanceMeterDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataGpsDistanceMeterDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataGpsDistanceMeterDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataGpsDistanceMeterDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataGpsDistanceMeterDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataGpsDistanceMeterDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataGpsDistanceMeterDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpsDistanceMeterDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataGpsDistanceMeterDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpsDistanceMeterDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataGpsDistanceMeterDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataGpsDistanceMeterDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataGpsDistanceMeterDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpsDistanceMeterDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataGpsDistanceMeterDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataGpsDistanceMeterDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataGpsDistanceMeterDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataGpsDistanceMeterDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataGpsDistanceMeterDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataGpsDistanceMeterDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataGpsDistanceMeterDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataGpsDistanceMeterDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataGpsDistanceMeterDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataGpsDistanceMeterDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataGpsDistanceMeterDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataGpsDistanceMeterDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataGpsDistanceMeterDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataGpsDistanceMeterDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataGpsDistanceMeterDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataGpsDistanceMeterDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataGpsDistanceMeterDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataGpsDistanceMeterDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataGpsDistanceMeterDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataGpsDistanceMeterDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataGpsDistanceMeterDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataGpsDistanceMeterDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataGpsDistanceMeterDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataGpsDistanceMeterDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataGpsDistanceMeterDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataGpsDistanceMeterDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataGpsDistanceMeterDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataGpsDistanceMeterDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataGpsDistanceMeterDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataGpsDistanceMeterDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataGpsDistanceMeterDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataGpsDistanceMeterDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataGpsDistanceMeterDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataGpsDistanceMeterDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataGpsDistanceMeterDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataGpsDistanceMeterDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataGpsDistanceMeterDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataGpsDistanceMeterDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataGpsDistanceMeterDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataGpsDistanceMeterDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataGpsDistanceMeterDecorationsGps] = None

    gps_distance_meters: Optional[DataGpsDistanceMeterDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataGpsDistanceMeterDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataGpsDistanceMeterDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataGpsDistanceMeterDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataGpsDistanceMeterDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataGpsDistanceMeterDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataGpsDistanceMeterDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataGpsDistanceMeterDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataGpsDistanceMeterDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataGpsDistanceMeterDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataGpsDistanceMeterDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataGpsDistanceMeterDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataGpsDistanceMeterDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataGpsDistanceMeterDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataGpsDistanceMeterDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataGpsDistanceMeterDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataGpsDistanceMeterDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataGpsDistanceMeterDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataGpsDistanceMeterDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataGpsDistanceMeter(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """

    decorations: Optional[DataGpsDistanceMeterDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataGpsOdometerMeterDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataGpsOdometerMeterDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataGpsOdometerMeterDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataGpsOdometerMeterDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataGpsOdometerMeterDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataGpsOdometerMeterDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataGpsOdometerMeterDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataGpsOdometerMeterDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataGpsOdometerMeterDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataGpsOdometerMeterDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataGpsOdometerMeterDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataGpsOdometerMeterDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataGpsOdometerMeterDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataGpsOdometerMeterDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataGpsOdometerMeterDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataGpsOdometerMeterDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataGpsOdometerMeterDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataGpsOdometerMeterDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataGpsOdometerMeterDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataGpsOdometerMeterDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataGpsOdometerMeterDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataGpsOdometerMeterDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataGpsOdometerMeterDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataGpsOdometerMeterDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataGpsOdometerMeterDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataGpsOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataGpsOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataGpsOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataGpsOdometerMeterDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataGpsOdometerMeterDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataGpsOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataGpsOdometerMeterDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataGpsOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataGpsOdometerMeterDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataGpsOdometerMeterDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataGpsOdometerMeterDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataGpsOdometerMeterDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataGpsOdometerMeterDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataGpsOdometerMeterDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataGpsOdometerMeterDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataGpsOdometerMeterDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataGpsOdometerMeterDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataGpsOdometerMeterDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataGpsOdometerMeterDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataGpsOdometerMeterDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataGpsOdometerMeterDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataGpsOdometerMeterDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataGpsOdometerMeterDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataGpsOdometerMeterDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataGpsOdometerMeterDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataGpsOdometerMeterDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataGpsOdometerMeterDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataGpsOdometerMeterDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataGpsOdometerMeterDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataGpsOdometerMeterDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataGpsOdometerMeterDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataGpsOdometerMeterDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpsOdometerMeterDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataGpsOdometerMeterDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpsOdometerMeterDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataGpsOdometerMeterDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataGpsOdometerMeterDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataGpsOdometerMeterDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataGpsOdometerMeterDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataGpsOdometerMeterDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataGpsOdometerMeterDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataGpsOdometerMeterDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataGpsOdometerMeterDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataGpsOdometerMeterDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataGpsOdometerMeterDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataGpsOdometerMeterDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataGpsOdometerMeterDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataGpsOdometerMeterDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataGpsOdometerMeterDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataGpsOdometerMeterDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataGpsOdometerMeterDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataGpsOdometerMeterDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataGpsOdometerMeterDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataGpsOdometerMeterDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataGpsOdometerMeterDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataGpsOdometerMeterDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataGpsOdometerMeterDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataGpsOdometerMeterDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataGpsOdometerMeterDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataGpsOdometerMeterDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataGpsOdometerMeterDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataGpsOdometerMeterDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataGpsOdometerMeterDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataGpsOdometerMeterDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataGpsOdometerMeterDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataGpsOdometerMeterDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataGpsOdometerMeterDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataGpsOdometerMeterDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataGpsOdometerMeterDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataGpsOdometerMeterDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataGpsOdometerMeterDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataGpsOdometerMeterDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataGpsOdometerMeterDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataGpsOdometerMeterDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataGpsOdometerMeterDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataGpsOdometerMeterDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataGpsOdometerMeterDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataGpsOdometerMeterDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataGpsOdometerMeterDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataGpsOdometerMeterDecorationsGps] = None

    gps_distance_meters: Optional[DataGpsOdometerMeterDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataGpsOdometerMeterDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataGpsOdometerMeterDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataGpsOdometerMeterDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataGpsOdometerMeterDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataGpsOdometerMeterDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataGpsOdometerMeterDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataGpsOdometerMeterDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataGpsOdometerMeterDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataGpsOdometerMeterDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataGpsOdometerMeterDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataGpsOdometerMeterDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataGpsOdometerMeterDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataGpsOdometerMeterDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataGpsOdometerMeterDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataGpsOdometerMeterDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataGpsOdometerMeterDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataGpsOdometerMeterDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataGpsOdometerMeterDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataGpsOdometerMeter(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """

    decorations: Optional[DataGpsOdometerMeterDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataIntakeManifoldTemperatureMilliCDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataIntakeManifoldTemperatureMilliCDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataIntakeManifoldTemperatureMilliCDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataIntakeManifoldTemperatureMilliCDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataIntakeManifoldTemperatureMilliCDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataIntakeManifoldTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataIntakeManifoldTemperatureMilliCDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataIntakeManifoldTemperatureMilliCDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataIntakeManifoldTemperatureMilliCDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataIntakeManifoldTemperatureMilliCDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataIntakeManifoldTemperatureMilliCDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataIntakeManifoldTemperatureMilliCDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939CheckEngineLights] = (
        FieldInfo(alias="checkEngineLights", default=None)
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[
        List[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939DiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for J1939 vehicles."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[
        List[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]
    ] = FieldInfo(alias="confirmedDtcs", default=None)
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus
    ] = FieldInfo(alias="monitorStatus", default=None)
    """Readings from engine sensors"""

    pending_dtcs: Optional[
        List[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]
    ] = FieldInfo(alias="pendingDtcs", default=None)
    """Pending DTC codes."""

    permanent_dtcs: Optional[
        List[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]
    ] = FieldInfo(alias="permanentDtcs", default=None)
    """Permanent DTC codes."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[
        List[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdiiDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for passenger vehicles."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[
        List[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesOemDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataIntakeManifoldTemperatureMilliCDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataIntakeManifoldTemperatureMilliCDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataIntakeManifoldTemperatureMilliCDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataIntakeManifoldTemperatureMilliCDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataIntakeManifoldTemperatureMilliCDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataIntakeManifoldTemperatureMilliCDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataIntakeManifoldTemperatureMilliCDecorationsGpsReverseGeo] = FieldInfo(
        alias="reverseGeo", default=None
    )
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataIntakeManifoldTemperatureMilliCDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataIntakeManifoldTemperatureMilliCDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataIntakeManifoldTemperatureMilliCDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataIntakeManifoldTemperatureMilliCDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsAmbientAirTemperatureMilliC
    ] = FieldInfo(alias="ambientAirTemperatureMilliC", default=None)

    aux_input1: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput1] = FieldInfo(
        alias="auxInput1", default=None
    )

    aux_input10: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput10] = FieldInfo(
        alias="auxInput10", default=None
    )

    aux_input11: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput11] = FieldInfo(
        alias="auxInput11", default=None
    )

    aux_input12: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput12] = FieldInfo(
        alias="auxInput12", default=None
    )

    aux_input13: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput13] = FieldInfo(
        alias="auxInput13", default=None
    )

    aux_input2: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput2] = FieldInfo(
        alias="auxInput2", default=None
    )

    aux_input3: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput3] = FieldInfo(
        alias="auxInput3", default=None
    )

    aux_input4: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput4] = FieldInfo(
        alias="auxInput4", default=None
    )

    aux_input5: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput5] = FieldInfo(
        alias="auxInput5", default=None
    )

    aux_input6: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput6] = FieldInfo(
        alias="auxInput6", default=None
    )

    aux_input7: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput7] = FieldInfo(
        alias="auxInput7", default=None
    )

    aux_input8: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput8] = FieldInfo(
        alias="auxInput8", default=None
    )

    aux_input9: Optional[DataIntakeManifoldTemperatureMilliCDecorationsAuxInput9] = FieldInfo(
        alias="auxInput9", default=None
    )

    barometric_pressure_pa: Optional[DataIntakeManifoldTemperatureMilliCDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataIntakeManifoldTemperatureMilliCDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataIntakeManifoldTemperatureMilliCDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEcuSpeedMph] = FieldInfo(
        alias="ecuSpeedMph", default=None
    )

    engine_coolant_temperature_milli_c: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsEngineCoolantTemperatureMilliC
    ] = FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)

    engine_immobilizer: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEngineRpm] = FieldInfo(
        alias="engineRpm", default=None
    )

    engine_states: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryCurrentMilliAmp] = (
        FieldInfo(alias="evBatteryCurrentMilliAmp", default=None)
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEvBatteryVoltageMilliVolt] = (
        FieldInfo(alias="evBatteryVoltageMilliVolt", default=None)
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEvChargingCurrentMilliAmp] = (
        FieldInfo(alias="evChargingCurrentMilliAmp", default=None)
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEvChargingEnergyMicroWh] = (
        FieldInfo(alias="evChargingEnergyMicroWh", default=None)
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsEvChargingVoltageMilliVolt
    ] = FieldInfo(alias="evChargingVoltageMilliVolt", default=None)
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEvConsumedEnergyMicroWh] = (
        FieldInfo(alias="evConsumedEnergyMicroWh", default=None)
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataIntakeManifoldTemperatureMilliCDecorationsEvDistanceDrivenMeters] = (
        FieldInfo(alias="evDistanceDrivenMeters", default=None)
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsEvRegeneratedEnergyMicroWh
    ] = FieldInfo(alias="evRegeneratedEnergyMicroWh", default=None)
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsEvStateOfChargeMilliPercent
    ] = FieldInfo(alias="evStateOfChargeMilliPercent", default=None)
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataIntakeManifoldTemperatureMilliCDecorationsFaultCodes] = FieldInfo(
        alias="faultCodes", default=None
    )
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataIntakeManifoldTemperatureMilliCDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataIntakeManifoldTemperatureMilliCDecorationsGps] = None

    gps_distance_meters: Optional[DataIntakeManifoldTemperatureMilliCDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataIntakeManifoldTemperatureMilliCDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[
        DataIntakeManifoldTemperatureMilliCDecorationsIntakeManifoldTemperatureMilliC
    ] = FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)

    obd_engine_seconds: Optional[DataIntakeManifoldTemperatureMilliCDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataIntakeManifoldTemperatureMilliCDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataIntakeManifoldTemperatureMilliCDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataIntakeManifoldTemperatureMilliCDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataIntakeManifoldTemperatureMilliC(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """The intake manifold temperature reading in millidegree Celsius."""

    decorations: Optional[DataIntakeManifoldTemperatureMilliCDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataNfcCardScanCard(BaseModel):
    id: Optional[str] = None
    """The id code of the card that was scanned."""


class DataNfcCardScanDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataNfcCardScanDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataNfcCardScanDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataNfcCardScanDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataNfcCardScanDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataNfcCardScanDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataNfcCardScanDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataNfcCardScanDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataNfcCardScanDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataNfcCardScanDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataNfcCardScanDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataNfcCardScanDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataNfcCardScanDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataNfcCardScanDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataNfcCardScanDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataNfcCardScanDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataNfcCardScanDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataNfcCardScanDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataNfcCardScanDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataNfcCardScanDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataNfcCardScanDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataNfcCardScanDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataNfcCardScanDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataNfcCardScanDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataNfcCardScanDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataNfcCardScanDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataNfcCardScanDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataNfcCardScanDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataNfcCardScanDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataNfcCardScanDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataNfcCardScanDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = FieldInfo(
        alias="monitorStatus", default=None
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = FieldInfo(
        alias="pendingDtcs", default=None
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataNfcCardScanDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataNfcCardScanDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataNfcCardScanDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataNfcCardScanDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataNfcCardScanDecorationsFaultCodesOemDiagnosticTroubleCode]] = FieldInfo(
        alias="diagnosticTroubleCodes", default=None
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataNfcCardScanDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataNfcCardScanDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataNfcCardScanDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataNfcCardScanDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataNfcCardScanDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataNfcCardScanDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataNfcCardScanDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataNfcCardScanDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataNfcCardScanDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataNfcCardScanDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataNfcCardScanDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataNfcCardScanDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataNfcCardScanDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataNfcCardScanDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataNfcCardScanDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataNfcCardScanDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataNfcCardScanDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataNfcCardScanDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataNfcCardScanDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataNfcCardScanDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataNfcCardScanDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataNfcCardScanDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataNfcCardScanDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataNfcCardScanDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataNfcCardScanDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataNfcCardScanDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataNfcCardScanDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataNfcCardScanDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataNfcCardScanDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataNfcCardScanDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataNfcCardScanDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataNfcCardScanDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataNfcCardScanDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataNfcCardScanDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataNfcCardScanDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataNfcCardScanDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataNfcCardScanDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataNfcCardScanDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataNfcCardScanDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataNfcCardScanDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataNfcCardScanDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataNfcCardScanDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataNfcCardScanDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataNfcCardScanDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataNfcCardScanDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataNfcCardScanDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataNfcCardScanDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataNfcCardScanDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataNfcCardScanDecorationsEngineCoolantTemperatureMilliC] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )

    engine_immobilizer: Optional[DataNfcCardScanDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataNfcCardScanDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataNfcCardScanDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataNfcCardScanDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataNfcCardScanDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataNfcCardScanDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataNfcCardScanDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[DataNfcCardScanDecorationsEvBatteryStateOfHealthMilliPercent] = (
        FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataNfcCardScanDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataNfcCardScanDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataNfcCardScanDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataNfcCardScanDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataNfcCardScanDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataNfcCardScanDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataNfcCardScanDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataNfcCardScanDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataNfcCardScanDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataNfcCardScanDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataNfcCardScanDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataNfcCardScanDecorationsGps] = None

    gps_distance_meters: Optional[DataNfcCardScanDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataNfcCardScanDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataNfcCardScanDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataNfcCardScanDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataNfcCardScanDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataNfcCardScanDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataNfcCardScanDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataNfcCardScanDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataNfcCardScanDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataNfcCardScanDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataNfcCardScanDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataNfcCardScanDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataNfcCardScanDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataNfcCardScanDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataNfcCardScanDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataNfcCardScanDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataNfcCardScanDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataNfcCardScanDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataNfcCardScanDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataNfcCardScan(BaseModel):
    card: DataNfcCardScanCard
    """The card that was scanned."""

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    decorations: Optional[DataNfcCardScanDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataObdEngineSecondDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataObdEngineSecondDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdEngineSecondDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataObdEngineSecondDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataObdEngineSecondDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataObdEngineSecondDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataObdEngineSecondDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataObdEngineSecondDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataObdEngineSecondDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataObdEngineSecondDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataObdEngineSecondDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataObdEngineSecondDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataObdEngineSecondDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataObdEngineSecondDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataObdEngineSecondDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataObdEngineSecondDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataObdEngineSecondDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataObdEngineSecondDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataObdEngineSecondDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataObdEngineSecondDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataObdEngineSecondDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataObdEngineSecondDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataObdEngineSecondDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataObdEngineSecondDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataObdEngineSecondDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataObdEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataObdEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataObdEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataObdEngineSecondDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataObdEngineSecondDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataObdEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataObdEngineSecondDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataObdEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataObdEngineSecondDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataObdEngineSecondDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataObdEngineSecondDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataObdEngineSecondDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataObdEngineSecondDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataObdEngineSecondDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataObdEngineSecondDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataObdEngineSecondDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataObdEngineSecondDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataObdEngineSecondDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataObdEngineSecondDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataObdEngineSecondDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataObdEngineSecondDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataObdEngineSecondDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataObdEngineSecondDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataObdEngineSecondDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataObdEngineSecondDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataObdEngineSecondDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataObdEngineSecondDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataObdEngineSecondDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataObdEngineSecondDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataObdEngineSecondDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataObdEngineSecondDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataObdEngineSecondDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataObdEngineSecondDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataObdEngineSecondDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataObdEngineSecondDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataObdEngineSecondDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataObdEngineSecondDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataObdEngineSecondDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataObdEngineSecondDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataObdEngineSecondDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataObdEngineSecondDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataObdEngineSecondDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataObdEngineSecondDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataObdEngineSecondDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataObdEngineSecondDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataObdEngineSecondDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataObdEngineSecondDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataObdEngineSecondDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataObdEngineSecondDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataObdEngineSecondDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataObdEngineSecondDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataObdEngineSecondDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataObdEngineSecondDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataObdEngineSecondDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataObdEngineSecondDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataObdEngineSecondDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataObdEngineSecondDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataObdEngineSecondDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataObdEngineSecondDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataObdEngineSecondDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataObdEngineSecondDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataObdEngineSecondDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataObdEngineSecondDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataObdEngineSecondDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataObdEngineSecondDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataObdEngineSecondDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataObdEngineSecondDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataObdEngineSecondDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataObdEngineSecondDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataObdEngineSecondDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataObdEngineSecondDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataObdEngineSecondDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataObdEngineSecondDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataObdEngineSecondDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataObdEngineSecondDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataObdEngineSecondDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataObdEngineSecondDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataObdEngineSecondDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataObdEngineSecondDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataObdEngineSecondDecorationsGps] = None

    gps_distance_meters: Optional[DataObdEngineSecondDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataObdEngineSecondDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataObdEngineSecondDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataObdEngineSecondDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataObdEngineSecondDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataObdEngineSecondDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataObdEngineSecondDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataObdEngineSecondDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataObdEngineSecondDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataObdEngineSecondDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataObdEngineSecondDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataObdEngineSecondDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataObdEngineSecondDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataObdEngineSecondDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataObdEngineSecondDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataObdEngineSecondDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataObdEngineSecondDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataObdEngineSecondDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataObdEngineSecondDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataObdEngineSecond(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """

    decorations: Optional[DataObdEngineSecondDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataObdOdometerMeterDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataObdOdometerMeterDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataObdOdometerMeterDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataObdOdometerMeterDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataObdOdometerMeterDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataObdOdometerMeterDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataObdOdometerMeterDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataObdOdometerMeterDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataObdOdometerMeterDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataObdOdometerMeterDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataObdOdometerMeterDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataObdOdometerMeterDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataObdOdometerMeterDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataObdOdometerMeterDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataObdOdometerMeterDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataObdOdometerMeterDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataObdOdometerMeterDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataObdOdometerMeterDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataObdOdometerMeterDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataObdOdometerMeterDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataObdOdometerMeterDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataObdOdometerMeterDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataObdOdometerMeterDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataObdOdometerMeterDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataObdOdometerMeterDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataObdOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataObdOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataObdOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataObdOdometerMeterDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataObdOdometerMeterDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[List[DataObdOdometerMeterDecorationsFaultCodesJ1939DiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for J1939 vehicles."""


class DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[List[DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]] = (
        FieldInfo(alias="confirmedDtcs", default=None)
    )
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[List[DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]] = (
        FieldInfo(alias="permanentDtcs", default=None)
    )
    """Permanent DTC codes."""


class DataObdOdometerMeterDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[List[DataObdOdometerMeterDecorationsFaultCodesObdiiDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Diagnostic trouble codes for passenger vehicles."""


class DataObdOdometerMeterDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataObdOdometerMeterDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataObdOdometerMeterDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataObdOdometerMeterDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataObdOdometerMeterDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataObdOdometerMeterDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataObdOdometerMeterDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataObdOdometerMeterDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataObdOdometerMeterDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataObdOdometerMeterDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataObdOdometerMeterDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataObdOdometerMeterDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataObdOdometerMeterDecorationsGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataObdOdometerMeterDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataObdOdometerMeterDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataObdOdometerMeterDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataObdOdometerMeterDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataObdOdometerMeterDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataObdOdometerMeterDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataObdOdometerMeterDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataObdOdometerMeterDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataObdOdometerMeterDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataObdOdometerMeterDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataObdOdometerMeterDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataObdOdometerMeterDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataObdOdometerMeterDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataObdOdometerMeterDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataObdOdometerMeterDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataObdOdometerMeterDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataObdOdometerMeterDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataObdOdometerMeterDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataObdOdometerMeterDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataObdOdometerMeterDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataObdOdometerMeterDecorationsAmbientAirTemperatureMilliC] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )

    aux_input1: Optional[DataObdOdometerMeterDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataObdOdometerMeterDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataObdOdometerMeterDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataObdOdometerMeterDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataObdOdometerMeterDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataObdOdometerMeterDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataObdOdometerMeterDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataObdOdometerMeterDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataObdOdometerMeterDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataObdOdometerMeterDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataObdOdometerMeterDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataObdOdometerMeterDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataObdOdometerMeterDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataObdOdometerMeterDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataObdOdometerMeterDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataObdOdometerMeterDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataObdOdometerMeterDecorationsEcuSpeedMph] = FieldInfo(alias="ecuSpeedMph", default=None)

    engine_coolant_temperature_milli_c: Optional[DataObdOdometerMeterDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataObdOdometerMeterDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataObdOdometerMeterDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataObdOdometerMeterDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataObdOdometerMeterDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataObdOdometerMeterDecorationsEngineStates] = FieldInfo(alias="engineStates", default=None)

    ev_average_battery_temperature_milli_celsius: Optional[
        DataObdOdometerMeterDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataObdOdometerMeterDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataObdOdometerMeterDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataObdOdometerMeterDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataObdOdometerMeterDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataObdOdometerMeterDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataObdOdometerMeterDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataObdOdometerMeterDecorationsEvChargingVoltageMilliVolt] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataObdOdometerMeterDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataObdOdometerMeterDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataObdOdometerMeterDecorationsEvRegeneratedEnergyMicroWh] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataObdOdometerMeterDecorationsEvStateOfChargeMilliPercent] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataObdOdometerMeterDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataObdOdometerMeterDecorationsFuelPercents] = FieldInfo(alias="fuelPercents", default=None)

    gps: Optional[DataObdOdometerMeterDecorationsGps] = None

    gps_distance_meters: Optional[DataObdOdometerMeterDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataObdOdometerMeterDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[DataObdOdometerMeterDecorationsIntakeManifoldTemperatureMilliC] = (
        FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)
    )

    obd_engine_seconds: Optional[DataObdOdometerMeterDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataObdOdometerMeterDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataObdOdometerMeterDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataObdOdometerMeterDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataObdOdometerMeterDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataObdOdometerMeterDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataObdOdometerMeterDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataObdOdometerMeterDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataObdOdometerMeterDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataObdOdometerMeterDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataObdOdometerMeterDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataObdOdometerMeterDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataObdOdometerMeterDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataObdOdometerMeterDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataObdOdometerMeterDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataObdOdometerMeterDecorationsTirePressure] = FieldInfo(alias="tirePressure", default=None)
    """Tire pressure readings for each of four tires in kilopascals."""


class DataObdOdometerMeter(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """

    decorations: Optional[DataObdOdometerMeterDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class DataSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataSyntheticEngineSecondDecorationsAmbientAirTemperatureMilliC(BaseModel):
    value: int
    """The ambient air temperature reading in millidegree Celsius."""


class DataSyntheticEngineSecondDecorationsAuxInput1(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput10(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput11(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput12(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput13(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput2(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput3(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput4(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput5(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput6(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput7(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput8(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsAuxInput9(BaseModel):
    name: str
    """
    The type of
    <a href="https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs" target="_blank">auxiliary
    input</a> configured for this Vehicle. Once configured, these inputs will
    generate dynamic, time-series data that will be available to view in the Samsara
    Dashboard. **By default**: empty. This can be set or updated through the Samsara
    Dashboard or the API at any time. Inputs 3-13 are only available on gateways
    with an attached aux expander. The value returned will match what is configured
    in the dashboard per vehicle.
    """

    value: bool
    """Boolean indicating the state of the auxiliary equipment."""


class DataSyntheticEngineSecondDecorationsBarometricPressurePa(BaseModel):
    value: int
    """The barometric pressure reading in pascals."""


class DataSyntheticEngineSecondDecorationsBatteryMilliVolts(BaseModel):
    value: int
    """The battery voltage in millivolts."""


class DataSyntheticEngineSecondDecorationsDefLevelMilliPercent(BaseModel):
    value: int
    """The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g.

    `99001`, `49999`, etc).
    """


class DataSyntheticEngineSecondDecorationsEcuSpeedMph(BaseModel):
    value: float
    """The speed of the vehicle in miles per hour, as reported by the ECU."""


class DataSyntheticEngineSecondDecorationsEngineCoolantTemperatureMilliC(BaseModel):
    value: int
    """The engine coolant temperature reading in millidegree Celsius."""


class DataSyntheticEngineSecondDecorationsEngineImmobilizer(BaseModel):
    connected: bool
    """Whether the engine immobilizer is connected or not"""

    state: Literal["ignition_disabled", "ignition_enabled"]
    """The state of the engine immobilizer.

    Valid values: `ignition_disabled`, `ignition_enabled`. This stat type will only
    return states of our first Engine Immobilizer Hardware (ACC-EI). Please use
    <a href="https://developers.samsara.com/reference/getengineimmobilizerstates" target="_blank">Get
    engine immobilizer states</a> to get states for both Engine Immobilizer Hardware
    versions (incl. HW-EI21).
    """

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""


class DataSyntheticEngineSecondDecorationsEngineLoadPercent(BaseModel):
    value: int
    """The engine load in percentage points (e.g. `99`, `50`, etc)."""


class DataSyntheticEngineSecondDecorationsEngineOilPressureKPa(BaseModel):
    value: int
    """The engine oil pressure reading in kilopascals."""


class DataSyntheticEngineSecondDecorationsEngineRpm(BaseModel):
    value: int
    """The revolutions per minute of the engine."""


class DataSyntheticEngineSecondDecorationsEngineStates(BaseModel):
    value: Literal["Off", "On", "Idle"]
    """The state of the engine."""


class DataSyntheticEngineSecondDecorationsEvAverageBatteryTemperatureMilliCelsius(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery temperature for electric and hybrid vehicles in milli celsius."""


class DataSyntheticEngineSecondDecorationsEvBatteryCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery current for electric and hybrid vehicles in milli amps."""


class DataSyntheticEngineSecondDecorationsEvBatteryStateOfHealthMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent battery state of health for electric and hybrid vehicles."""


class DataSyntheticEngineSecondDecorationsEvBatteryVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Battery voltage for electric and hybrid vehicles in milli volts."""


class DataSyntheticEngineSecondDecorationsEvChargingCurrentMilliAmp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging current for electric and hybrid vehicles in milli amps."""


class DataSyntheticEngineSecondDecorationsEvChargingEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging energy for electric and hybrid vehicles in microwatt hours."""


class DataSyntheticEngineSecondDecorationsEvChargingStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal[0, 1, 2, 3, 4]
    """Charging status for electric and hybrid vehicles.

    Statuses: unknown - 0, not charging - 1, charging - 2.
    """


class DataSyntheticEngineSecondDecorationsEvChargingVoltageMilliVolt(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Charging voltage for electric and hybrid vehicles in milli volts."""


class DataSyntheticEngineSecondDecorationsEvConsumedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours.
    """


class DataSyntheticEngineSecondDecorationsEvDistanceDrivenMeters(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Electric distance driven for electric and hybrid vehicles in meters."""


class DataSyntheticEngineSecondDecorationsEvRegeneratedEnergyMicroWh(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Regenerated energy for electric and hybrid vehicles in microwatt hours."""


class DataSyntheticEngineSecondDecorationsEvStateOfChargeMilliPercent(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Milli percent State of Charge for electric and hybrid vehicles."""


class DataSyntheticEngineSecondDecorationsFaultCodesJ1939CheckEngineLights(BaseModel):
    emissions_is_on: bool = FieldInfo(alias="emissionsIsOn")
    """True if the MIL status is nonzero."""

    protect_is_on: bool = FieldInfo(alias="protectIsOn")
    """True if the engine protect lamp status is nonzero."""

    stop_is_on: bool = FieldInfo(alias="stopIsOn")
    """True if the red lamp status is nonzero."""

    warning_is_on: bool = FieldInfo(alias="warningIsOn")
    """True if the amber lamp status is nonzero."""


class DataSyntheticEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields(BaseModel):
    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    repair_instructions_url: Optional[str] = FieldInfo(alias="repairInstructionsUrl", default=None)
    """A link to vendor repair instructions, if available."""


class DataSyntheticEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCode(BaseModel):
    fmi_id: int = FieldInfo(alias="fmiId")
    """The FMI identifier."""

    mil_status: int = FieldInfo(alias="milStatus")
    """The MIL status, indicating a check engine light."""

    occurrence_count: int = FieldInfo(alias="occurrenceCount")
    """The number of times this fault has triggered."""

    spn_id: int = FieldInfo(alias="spnId")
    """The SPN identifier."""

    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    fmi_description: Optional[str] = FieldInfo(alias="fmiDescription", default=None)
    """A short description of the FMI identifier, if available."""

    source_address_name: Optional[str] = FieldInfo(alias="sourceAddressName", default=None)
    """The source address name corresponding to the txId"""

    spn_description: Optional[str] = FieldInfo(alias="spnDescription", default=None)
    """A short description of the SPN identifier, if available."""

    vendor_specific_fields: Optional[
        DataSyntheticEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCodeVendorSpecificFields
    ] = FieldInfo(alias="vendorSpecificFields", default=None)
    """Vendor specific data for J1939 vehicles."""


class DataSyntheticEngineSecondDecorationsFaultCodesJ1939(BaseModel):
    check_engine_lights: Optional[DataSyntheticEngineSecondDecorationsFaultCodesJ1939CheckEngineLights] = FieldInfo(
        alias="checkEngineLights", default=None
    )
    """Status of engine lights on J1939 vehicles."""

    diagnostic_trouble_codes: Optional[
        List[DataSyntheticEngineSecondDecorationsFaultCodesJ1939DiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for J1939 vehicles."""


class DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus(BaseModel):
    catalyst: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    comprehensive: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    egr: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    evap_system: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="evapSystem", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    fuel: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_catalyst: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedCatalyst", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    heated_o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="heatedO2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    iso_sae_reserved: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="isoSaeReserved", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    misfire: Optional[Literal["N", "R", "U"]] = None
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    not_ready_count: Optional[int] = FieldInfo(alias="notReadyCount", default=None)
    """Count of the number of sensors reporting N: Not Complete"""

    o2_sensor: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="o2Sensor", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""

    secondary_air: Optional[Literal["N", "R", "U"]] = FieldInfo(alias="secondaryAir", default=None)
    """Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete"""


class DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc(BaseModel):
    dtc_id: int = FieldInfo(alias="dtcId")
    """The DTC identifier."""

    dtc_description: Optional[str] = FieldInfo(alias="dtcDescription", default=None)
    """The DTC description, if available."""

    dtc_short_code: Optional[str] = FieldInfo(alias="dtcShortCode", default=None)
    """The DTC short code, if available."""


class DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCode(BaseModel):
    tx_id: int = FieldInfo(alias="txId")
    """The TX identifier."""

    confirmed_dtcs: Optional[
        List[DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeConfirmedDtc]
    ] = FieldInfo(alias="confirmedDtcs", default=None)
    """Confirmed DTC codes."""

    ignition_type: Optional[Literal["spark", "compression"]] = FieldInfo(alias="ignitionType", default=None)
    """The ignition type of this passenger vehicle.

    Valid values: `spark`, `compression`.
    """

    mil_status: Optional[bool] = FieldInfo(alias="milStatus", default=None)
    """The MIL status, indicating a check engine light."""

    monitor_status: Optional[DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodeMonitorStatus] = (
        FieldInfo(alias="monitorStatus", default=None)
    )
    """Readings from engine sensors"""

    pending_dtcs: Optional[List[DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePendingDtc]] = (
        FieldInfo(alias="pendingDtcs", default=None)
    )
    """Pending DTC codes."""

    permanent_dtcs: Optional[
        List[DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCodePermanentDtc]
    ] = FieldInfo(alias="permanentDtcs", default=None)
    """Permanent DTC codes."""


class DataSyntheticEngineSecondDecorationsFaultCodesObdii(BaseModel):
    check_engine_light_is_on: Optional[bool] = FieldInfo(alias="checkEngineLightIsOn", default=None)
    """
    True if the check engine light is illuminated (MIL status field is nonzero for
    any faults).
    """

    diagnostic_trouble_codes: Optional[
        List[DataSyntheticEngineSecondDecorationsFaultCodesObdiiDiagnosticTroubleCode]
    ] = FieldInfo(alias="diagnosticTroubleCodes", default=None)
    """Diagnostic trouble codes for passenger vehicles."""


class DataSyntheticEngineSecondDecorationsFaultCodesOemDiagnosticTroubleCode(BaseModel):
    code_description: Optional[str] = FieldInfo(alias="codeDescription", default=None)
    """The OEM code description."""

    code_identifier: Optional[str] = FieldInfo(alias="codeIdentifier", default=None)
    """The OEM code identifier."""

    code_severity: Optional[str] = FieldInfo(alias="codeSeverity", default=None)
    """The OEM code severity."""

    code_source: Optional[str] = FieldInfo(alias="codeSource", default=None)
    """The OEM code source."""


class DataSyntheticEngineSecondDecorationsFaultCodesOem(BaseModel):
    diagnostic_trouble_codes: Optional[List[DataSyntheticEngineSecondDecorationsFaultCodesOemDiagnosticTroubleCode]] = (
        FieldInfo(alias="diagnosticTroubleCodes", default=None)
    )
    """Proprietary diagnostic trouble codes for OEM vehicles."""


class DataSyntheticEngineSecondDecorationsFaultCodes(BaseModel):
    can_bus_type: Optional[str] = FieldInfo(alias="canBusType", default=None)
    """The CAN bus type of the vehicle."""

    j1939: Optional[DataSyntheticEngineSecondDecorationsFaultCodesJ1939] = None
    """Vehicle fault codes for J1939 vehicles."""

    obdii: Optional[DataSyntheticEngineSecondDecorationsFaultCodesObdii] = None
    """Vehicle fault codes for passenger vehicles."""

    oem: Optional[DataSyntheticEngineSecondDecorationsFaultCodesOem] = None
    """Vehicle fault codes for OEM vehicles."""


class DataSyntheticEngineSecondDecorationsFuelPercents(BaseModel):
    value: int
    """The engine fuel level in percentage points (e.g. `99`, `50`, etc)."""


class DataSyntheticEngineSecondDecorationsGpsAddress(BaseModel):
    id: Optional[str] = None
    """Id of the address."""

    name: Optional[str] = None
    """Name of address."""


class DataSyntheticEngineSecondDecorationsGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataSyntheticEngineSecondDecorationsGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    address: Optional[DataSyntheticEngineSecondDecorationsGpsAddress] = None
    """Address that the location is in."""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the vehicle in degrees."""

    is_ecu_speed: Optional[bool] = FieldInfo(alias="isEcuSpeed", default=None)
    """True if the speed value is reported from the ECU.

    Speed value is reported from GPS otherwise.
    """

    reverse_geo: Optional[DataSyntheticEngineSecondDecorationsGpsReverseGeo] = FieldInfo(
        alias="reverseGeo", default=None
    )
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the vehicle in miles per hour.

    See `isEcuSpeed` to determine speed data source.
    """


class DataSyntheticEngineSecondDecorationsGpsDistanceMeters(BaseModel):
    value: float
    """
    Number of meters the vehicle has traveled since the gateway was installed, based
    on GPS calculations.
    """


class DataSyntheticEngineSecondDecorationsGpsOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the GPS calculations and
    the manually-specified odometer reading.
    """


class DataSyntheticEngineSecondDecorationsIntakeManifoldTemperatureMilliC(BaseModel):
    value: int
    """The intake manifold temperature reading in millidegree Celsius."""


class DataSyntheticEngineSecondDecorationsObdEngineSeconds(BaseModel):
    value: int
    """
    Number of seconds the vehicle's engine has been on according to the on-board
    diagnostics.
    """


class DataSyntheticEngineSecondDecorationsObdOdometerMeters(BaseModel):
    value: int
    """
    Number of meters the vehicle has traveled according to the on-board diagnostics.
    """


class DataSyntheticEngineSecondDecorationsSeatbeltDriver(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Buckled", "Unbuckled"]
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""


class DataSyntheticEngineSecondDecorationsSpreaderActive(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Off", "On"]
    """Whether vehicle is actively spreading any material."""


class DataSyntheticEngineSecondDecorationsSpreaderAirTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Air (ambient) temperature in milli celsius reading from material spreader."""


class DataSyntheticEngineSecondDecorationsSpreaderBlastState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle is actively spreading material in ‘blast mode’."""


class DataSyntheticEngineSecondDecorationsSpreaderGranularName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """


class DataSyntheticEngineSecondDecorationsSpreaderGranularRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataSyntheticEngineSecondDecorationsSpreaderLiquidName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """


class DataSyntheticEngineSecondDecorationsSpreaderLiquidRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataSyntheticEngineSecondDecorationsSpreaderOnState(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["On", "Off"]
    """Whether vehicle spreader is enabled."""


class DataSyntheticEngineSecondDecorationsSpreaderPlowStatus(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: Literal["Up", "Down"]
    """Snow plow status, as read from the material spreader"""


class DataSyntheticEngineSecondDecorationsSpreaderPrewetName(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: str
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """


class DataSyntheticEngineSecondDecorationsSpreaderPrewetRate(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """


class DataSyntheticEngineSecondDecorationsSpreaderRoadTemp(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """Road temperature reading in milli celsius from material spreader."""


class DataSyntheticEngineSecondDecorationsTirePressure(BaseModel):
    back_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backLeftTirePressureKPa", default=None)
    """
    The tire pressure of the rear left tire as seen when standing behind the vehicle
    in kilopascals.
    """

    back_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="backRightTirePressureKPa", default=None)
    """
    The tire pressure of the rear right tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_left_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontLeftTirePressureKPa", default=None)
    """
    The tire pressure of the front left tire as seen when standing behind the
    vehicle in kilopascals.
    """

    front_right_tire_pressure_k_pa: Optional[int] = FieldInfo(alias="frontRightTirePressureKPa", default=None)
    """
    The tire pressure of the front right tire as seen when standing behind the
    vehicle in kilopascals.
    """


class DataSyntheticEngineSecondDecorations(BaseModel):
    ambient_air_temperature_milli_c: Optional[DataSyntheticEngineSecondDecorationsAmbientAirTemperatureMilliC] = (
        FieldInfo(alias="ambientAirTemperatureMilliC", default=None)
    )

    aux_input1: Optional[DataSyntheticEngineSecondDecorationsAuxInput1] = FieldInfo(alias="auxInput1", default=None)

    aux_input10: Optional[DataSyntheticEngineSecondDecorationsAuxInput10] = FieldInfo(alias="auxInput10", default=None)

    aux_input11: Optional[DataSyntheticEngineSecondDecorationsAuxInput11] = FieldInfo(alias="auxInput11", default=None)

    aux_input12: Optional[DataSyntheticEngineSecondDecorationsAuxInput12] = FieldInfo(alias="auxInput12", default=None)

    aux_input13: Optional[DataSyntheticEngineSecondDecorationsAuxInput13] = FieldInfo(alias="auxInput13", default=None)

    aux_input2: Optional[DataSyntheticEngineSecondDecorationsAuxInput2] = FieldInfo(alias="auxInput2", default=None)

    aux_input3: Optional[DataSyntheticEngineSecondDecorationsAuxInput3] = FieldInfo(alias="auxInput3", default=None)

    aux_input4: Optional[DataSyntheticEngineSecondDecorationsAuxInput4] = FieldInfo(alias="auxInput4", default=None)

    aux_input5: Optional[DataSyntheticEngineSecondDecorationsAuxInput5] = FieldInfo(alias="auxInput5", default=None)

    aux_input6: Optional[DataSyntheticEngineSecondDecorationsAuxInput6] = FieldInfo(alias="auxInput6", default=None)

    aux_input7: Optional[DataSyntheticEngineSecondDecorationsAuxInput7] = FieldInfo(alias="auxInput7", default=None)

    aux_input8: Optional[DataSyntheticEngineSecondDecorationsAuxInput8] = FieldInfo(alias="auxInput8", default=None)

    aux_input9: Optional[DataSyntheticEngineSecondDecorationsAuxInput9] = FieldInfo(alias="auxInput9", default=None)

    barometric_pressure_pa: Optional[DataSyntheticEngineSecondDecorationsBarometricPressurePa] = FieldInfo(
        alias="barometricPressurePa", default=None
    )

    battery_milli_volts: Optional[DataSyntheticEngineSecondDecorationsBatteryMilliVolts] = FieldInfo(
        alias="batteryMilliVolts", default=None
    )

    def_level_milli_percent: Optional[DataSyntheticEngineSecondDecorationsDefLevelMilliPercent] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )

    ecu_speed_mph: Optional[DataSyntheticEngineSecondDecorationsEcuSpeedMph] = FieldInfo(
        alias="ecuSpeedMph", default=None
    )

    engine_coolant_temperature_milli_c: Optional[DataSyntheticEngineSecondDecorationsEngineCoolantTemperatureMilliC] = (
        FieldInfo(alias="engineCoolantTemperatureMilliC", default=None)
    )

    engine_immobilizer: Optional[DataSyntheticEngineSecondDecorationsEngineImmobilizer] = FieldInfo(
        alias="engineImmobilizer", default=None
    )
    """Data for the engine immobilizer"""

    engine_load_percent: Optional[DataSyntheticEngineSecondDecorationsEngineLoadPercent] = FieldInfo(
        alias="engineLoadPercent", default=None
    )

    engine_oil_pressure_k_pa: Optional[DataSyntheticEngineSecondDecorationsEngineOilPressureKPa] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )

    engine_rpm: Optional[DataSyntheticEngineSecondDecorationsEngineRpm] = FieldInfo(alias="engineRpm", default=None)

    engine_states: Optional[DataSyntheticEngineSecondDecorationsEngineStates] = FieldInfo(
        alias="engineStates", default=None
    )

    ev_average_battery_temperature_milli_celsius: Optional[
        DataSyntheticEngineSecondDecorationsEvAverageBatteryTemperatureMilliCelsius
    ] = FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[DataSyntheticEngineSecondDecorationsEvBatteryCurrentMilliAmp] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[
        DataSyntheticEngineSecondDecorationsEvBatteryStateOfHealthMilliPercent
    ] = FieldInfo(alias="evBatteryStateOfHealthMilliPercent", default=None)
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[DataSyntheticEngineSecondDecorationsEvBatteryVoltageMilliVolt] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[DataSyntheticEngineSecondDecorationsEvChargingCurrentMilliAmp] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[DataSyntheticEngineSecondDecorationsEvChargingEnergyMicroWh] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[DataSyntheticEngineSecondDecorationsEvChargingStatus] = FieldInfo(
        alias="evChargingStatus", default=None
    )
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[DataSyntheticEngineSecondDecorationsEvChargingVoltageMilliVolt] = (
        FieldInfo(alias="evChargingVoltageMilliVolt", default=None)
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[DataSyntheticEngineSecondDecorationsEvConsumedEnergyMicroWh] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[DataSyntheticEngineSecondDecorationsEvDistanceDrivenMeters] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[DataSyntheticEngineSecondDecorationsEvRegeneratedEnergyMicroWh] = (
        FieldInfo(alias="evRegeneratedEnergyMicroWh", default=None)
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[DataSyntheticEngineSecondDecorationsEvStateOfChargeMilliPercent] = (
        FieldInfo(alias="evStateOfChargeMilliPercent", default=None)
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    fault_codes: Optional[DataSyntheticEngineSecondDecorationsFaultCodes] = FieldInfo(alias="faultCodes", default=None)
    """Fault codes for the vehicle"""

    fuel_percents: Optional[DataSyntheticEngineSecondDecorationsFuelPercents] = FieldInfo(
        alias="fuelPercents", default=None
    )

    gps: Optional[DataSyntheticEngineSecondDecorationsGps] = None

    gps_distance_meters: Optional[DataSyntheticEngineSecondDecorationsGpsDistanceMeters] = FieldInfo(
        alias="gpsDistanceMeters", default=None
    )

    gps_odometer_meters: Optional[DataSyntheticEngineSecondDecorationsGpsOdometerMeters] = FieldInfo(
        alias="gpsOdometerMeters", default=None
    )

    intake_manifold_temperature_milli_c: Optional[
        DataSyntheticEngineSecondDecorationsIntakeManifoldTemperatureMilliC
    ] = FieldInfo(alias="intakeManifoldTemperatureMilliC", default=None)

    obd_engine_seconds: Optional[DataSyntheticEngineSecondDecorationsObdEngineSeconds] = FieldInfo(
        alias="obdEngineSeconds", default=None
    )

    obd_odometer_meters: Optional[DataSyntheticEngineSecondDecorationsObdOdometerMeters] = FieldInfo(
        alias="obdOdometerMeters", default=None
    )

    seatbelt_driver: Optional[DataSyntheticEngineSecondDecorationsSeatbeltDriver] = FieldInfo(
        alias="seatbeltDriver", default=None
    )
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[DataSyntheticEngineSecondDecorationsSpreaderActive] = FieldInfo(
        alias="spreaderActive", default=None
    )
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[DataSyntheticEngineSecondDecorationsSpreaderAirTemp] = FieldInfo(
        alias="spreaderAirTemp", default=None
    )
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[DataSyntheticEngineSecondDecorationsSpreaderBlastState] = FieldInfo(
        alias="spreaderBlastState", default=None
    )
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[DataSyntheticEngineSecondDecorationsSpreaderGranularName] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[DataSyntheticEngineSecondDecorationsSpreaderGranularRate] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[DataSyntheticEngineSecondDecorationsSpreaderLiquidName] = FieldInfo(
        alias="spreaderLiquidName", default=None
    )
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[DataSyntheticEngineSecondDecorationsSpreaderLiquidRate] = FieldInfo(
        alias="spreaderLiquidRate", default=None
    )
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[DataSyntheticEngineSecondDecorationsSpreaderOnState] = FieldInfo(
        alias="spreaderOnState", default=None
    )
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[DataSyntheticEngineSecondDecorationsSpreaderPlowStatus] = FieldInfo(
        alias="spreaderPlowStatus", default=None
    )
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[DataSyntheticEngineSecondDecorationsSpreaderPrewetName] = FieldInfo(
        alias="spreaderPrewetName", default=None
    )
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[DataSyntheticEngineSecondDecorationsSpreaderPrewetRate] = FieldInfo(
        alias="spreaderPrewetRate", default=None
    )
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    Unfiltered live stats are supplied as-read from the Material Spreader unit.
    Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[DataSyntheticEngineSecondDecorationsSpreaderRoadTemp] = FieldInfo(
        alias="spreaderRoadTemp", default=None
    )
    """Road temperature reading in milli celsius from material spreader."""

    tire_pressure: Optional[DataSyntheticEngineSecondDecorationsTirePressure] = FieldInfo(
        alias="tirePressure", default=None
    )
    """Tire pressure readings for each of four tires in kilopascals."""


class DataSyntheticEngineSecond(BaseModel):
    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    value: int
    """
    Stats for the number of seconds the vehicle's engine has been on, calculated
    based on a manually-specified engine seconds reading and the number of seconds
    the vehicle has been on according to the engine state changes reported to the
    vehicle gateway since that reading was set. This stat will not be present for
    any vehicle that does not have the engine seconds reading set. The engine
    seconds reading can be set from the UI on the vehicle details page.
    """

    decorations: Optional[DataSyntheticEngineSecondDecorations] = None
    """Optional decorations to the primary stat event.

    See [here](doc:decorations) for more details. The example shows the response if
    you were to submit `decorations=engineStates&obdEngineSeconds` to the query
    parameter:

    ```json
    "decorations":{
      "engineStates": {
        "value": "Off"
      },
      "obdEngineSeconds": {
        "value": 9723103
      }
    }
    ```
    """


class Data(BaseModel):
    id: Optional[str] = None
    """The unique Samsara ID of the Vehicle.

    This is automatically generated when the Vehicle object is created. It cannot be
    changed.
    """

    ambient_air_temperature_milli_c: Optional[List[DataAmbientAirTemperatureMilliC]] = FieldInfo(
        alias="ambientAirTemperatureMilliC", default=None
    )
    """
    A list of ambient air temperature readings in millidegree Celsius for the given
    vehicle.
    """

    aux_input1: Optional[List[DataAuxInput1]] = FieldInfo(alias="auxInput1", default=None)
    """A list of auxiliary equipment states."""

    aux_input10: Optional[List[DataAuxInput10]] = FieldInfo(alias="auxInput10", default=None)
    """A list of auxiliary equipment states."""

    aux_input11: Optional[List[DataAuxInput11]] = FieldInfo(alias="auxInput11", default=None)
    """A list of auxiliary equipment states."""

    aux_input12: Optional[List[DataAuxInput12]] = FieldInfo(alias="auxInput12", default=None)
    """A list of auxiliary equipment states."""

    aux_input13: Optional[List[DataAuxInput13]] = FieldInfo(alias="auxInput13", default=None)
    """A list of auxiliary equipment states."""

    aux_input2: Optional[List[DataAuxInput2]] = FieldInfo(alias="auxInput2", default=None)
    """A list of auxiliary equipment states."""

    aux_input3: Optional[List[DataAuxInput3]] = FieldInfo(alias="auxInput3", default=None)
    """A list of auxiliary equipment states."""

    aux_input4: Optional[List[DataAuxInput4]] = FieldInfo(alias="auxInput4", default=None)
    """A list of auxiliary equipment states."""

    aux_input5: Optional[List[DataAuxInput5]] = FieldInfo(alias="auxInput5", default=None)
    """A list of auxiliary equipment states."""

    aux_input6: Optional[List[DataAuxInput6]] = FieldInfo(alias="auxInput6", default=None)
    """A list of auxiliary equipment states."""

    aux_input7: Optional[List[DataAuxInput7]] = FieldInfo(alias="auxInput7", default=None)
    """A list of auxiliary equipment states."""

    aux_input8: Optional[List[DataAuxInput8]] = FieldInfo(alias="auxInput8", default=None)
    """A list of auxiliary equipment states."""

    aux_input9: Optional[List[DataAuxInput9]] = FieldInfo(alias="auxInput9", default=None)
    """A list of auxiliary equipment states."""

    barometric_pressure_pa: Optional[List[DataBarometricPressurePa]] = FieldInfo(
        alias="barometricPressurePa", default=None
    )
    """A list of barometric pressure readings in pascals for the given vehicle."""

    battery_milli_volts: Optional[List[DataBatteryMilliVolt]] = FieldInfo(alias="batteryMilliVolts", default=None)
    """A list of battery levels in milliVolts for the given vehicle."""

    def_level_milli_percent: Optional[List[DataDefLevelMilliPercent]] = FieldInfo(
        alias="defLevelMilliPercent", default=None
    )
    """A list of DEF level milli percentage readings for the given vehicle."""

    ecu_speed_mph: Optional[List[DataEcuSpeedMph]] = FieldInfo(alias="ecuSpeedMph", default=None)
    """A list of the speeds of the vehicle in miles per hour, as reported by the ECU."""

    engine_coolant_temperature_milli_c: Optional[List[DataEngineCoolantTemperatureMilliC]] = FieldInfo(
        alias="engineCoolantTemperatureMilliC", default=None
    )
    """
    A list of engine coolant temperature readings in millidegree Celsius for the
    given vehicle.
    """

    engine_immobilizer: Optional[List[DataEngineImmobilizer]] = FieldInfo(alias="engineImmobilizer", default=None)
    """A list of engine immobilizer data for the given vehicle."""

    engine_load_percent: Optional[List[DataEngineLoadPercent]] = FieldInfo(alias="engineLoadPercent", default=None)
    """A list of engine load percentage readings for the given vehicle."""

    engine_oil_pressure_k_pa: Optional[List[DataEngineOilPressureKPa]] = FieldInfo(
        alias="engineOilPressureKPa", default=None
    )
    """A list of engine oil pressure readings in kilopascals for the given vehicle."""

    engine_rpm: Optional[List[DataEngineRpm]] = FieldInfo(alias="engineRpm", default=None)
    """A list engine RPM values for the given vehicle."""

    engine_states: Optional[List[DataEngineState]] = FieldInfo(alias="engineStates", default=None)
    """A list of engine state events for the given vehicle."""

    ev_average_battery_temperature_milli_celsius: Optional[List[DataEvAverageBatteryTemperatureMilliCelsius]] = (
        FieldInfo(alias="evAverageBatteryTemperatureMilliCelsius", default=None)
    )
    """Battery temperature for electric and hybrid vehicles in milli celsius.

    Not all EV and HEVs may report this field.
    """

    ev_battery_current_milli_amp: Optional[List[DataEvBatteryCurrentMilliAmp]] = FieldInfo(
        alias="evBatteryCurrentMilliAmp", default=None
    )
    """Battery current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_battery_state_of_health_milli_percent: Optional[List[DataEvBatteryStateOfHealthMilliPercent]] = FieldInfo(
        alias="evBatteryStateOfHealthMilliPercent", default=None
    )
    """Milli percent battery state of health for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_battery_voltage_milli_volt: Optional[List[DataEvBatteryVoltageMilliVolt]] = FieldInfo(
        alias="evBatteryVoltageMilliVolt", default=None
    )
    """Battery voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_charging_current_milli_amp: Optional[List[DataEvChargingCurrentMilliAmp]] = FieldInfo(
        alias="evChargingCurrentMilliAmp", default=None
    )
    """Charging current for electric and hybrid vehicles in milli amps.

    Not all EV and HEVs may report this field.
    """

    ev_charging_energy_micro_wh: Optional[List[DataEvChargingEnergyMicroWh]] = FieldInfo(
        alias="evChargingEnergyMicroWh", default=None
    )
    """Charging energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_charging_status: Optional[List[DataEvChargingStatus]] = FieldInfo(alias="evChargingStatus", default=None)
    """Charging status for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    ev_charging_voltage_milli_volt: Optional[List[DataEvChargingVoltageMilliVolt]] = FieldInfo(
        alias="evChargingVoltageMilliVolt", default=None
    )
    """Charging voltage for electric and hybrid vehicles in milli volts.

    Not all EV and HEVs may report this field.
    """

    ev_consumed_energy_micro_wh: Optional[List[DataEvConsumedEnergyMicroWh]] = FieldInfo(
        alias="evConsumedEnergyMicroWh", default=None
    )
    """
    Consumed energy (including regenerated) for electric and hybrid vehicles in
    microwatt hours. Not all EV and HEVs may report this field.
    """

    ev_distance_driven_meters: Optional[List[DataEvDistanceDrivenMeter]] = FieldInfo(
        alias="evDistanceDrivenMeters", default=None
    )
    """Electric distance driven for electric and hybrid vehicles in meters.

    Not all EV and HEVs may report this field.
    """

    ev_regenerated_energy_micro_wh: Optional[List[DataEvRegeneratedEnergyMicroWh]] = FieldInfo(
        alias="evRegeneratedEnergyMicroWh", default=None
    )
    """Regenerated energy for electric and hybrid vehicles in microwatt hours.

    Not all EV and HEVs may report this field.
    """

    ev_state_of_charge_milli_percent: Optional[List[DataEvStateOfChargeMilliPercent]] = FieldInfo(
        alias="evStateOfChargeMilliPercent", default=None
    )
    """State of Charge for electric and hybrid vehicles.

    Not all EV and HEVs may report this field.
    """

    external_ids: Optional[object] = FieldInfo(alias="externalIds", default=None)
    """
    The <a href="/docs/external-ids" target="_blank">external IDs</a> for the given
    object.
    """

    fault_codes: Optional[List[DataFaultCode]] = FieldInfo(alias="faultCodes", default=None)
    """A list of engine fault codes."""

    fuel_percents: Optional[List[DataFuelPercent]] = FieldInfo(alias="fuelPercents", default=None)
    """A list of fuel percentage readings for the given vehicle."""

    gps: Optional[List[DataGp]] = None
    """A list of GPS location events for the given vehicles."""

    gps_distance_meters: Optional[List[DataGpsDistanceMeter]] = FieldInfo(alias="gpsDistanceMeters", default=None)
    """A list of GPS distance events for the given vehicle."""

    gps_odometer_meters: Optional[List[DataGpsOdometerMeter]] = FieldInfo(alias="gpsOdometerMeters", default=None)
    """A list of GPS odometer events for the given vehicle."""

    intake_manifold_temperature_milli_c: Optional[List[DataIntakeManifoldTemperatureMilliC]] = FieldInfo(
        alias="intakeManifoldTemperatureMilliC", default=None
    )
    """
    A list of intake manifold temperature readings in millidegree Celsius for the
    given vehicle.
    """

    name: Optional[str] = None
    """The human-readable name of the Vehicle.

    This is set by a fleet administrator and will appear in both Samsara’s cloud
    dashboard as well as the Samsara Driver mobile app. **By default**, this name is
    the serial number of the Samsara Vehicle Gateway. It can be set or updated
    through the Samsara Dashboard or through the API at any time.
    """

    nfc_card_scans: Optional[List[DataNfcCardScan]] = FieldInfo(alias="nfcCardScans", default=None)
    """A list of NFC cards that were scanned for the given vehicles."""

    obd_engine_seconds: Optional[List[DataObdEngineSecond]] = FieldInfo(alias="obdEngineSeconds", default=None)
    """A list of OBD engine seconds readings for the given vehicle."""

    obd_odometer_meters: Optional[List[DataObdOdometerMeter]] = FieldInfo(alias="obdOdometerMeters", default=None)
    """A list of OBD odometer readings for the given vehicle."""

    seatbelt_driver: Optional[List[DataSeatbeltDriver]] = FieldInfo(alias="seatbeltDriver", default=None)
    """Seatbelt Driver Status as read from the vehicle. `Buckled` or `Unbuckled`."""

    spreader_active: Optional[List[DataSpreaderActive]] = FieldInfo(alias="spreaderActive", default=None)
    """Whether vehicle is actively spreading any material."""

    spreader_air_temp: Optional[List[DataSpreaderAirTemp]] = FieldInfo(alias="spreaderAirTemp", default=None)
    """Air (ambient) temperature in milli celsius reading from material spreader."""

    spreader_blast_state: Optional[List[DataSpreaderBlastState]] = FieldInfo(alias="spreaderBlastState", default=None)
    """Whether vehicle is actively spreading material in ‘blast mode’."""

    spreader_granular_name: Optional[List[DataSpreaderGranularName]] = FieldInfo(
        alias="spreaderGranularName", default=None
    )
    """
    Name of most recent type of granular material spread, read from the material
    spreader.
    """

    spreader_granular_rate: Optional[List[DataSpreaderGranularRate]] = FieldInfo(
        alias="spreaderGranularRate", default=None
    )
    """
    Granular spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_liquid_name: Optional[List[DataSpreaderLiquidName]] = FieldInfo(alias="spreaderLiquidName", default=None)
    """
    Name of most recent type of liquid material spread, read from the material
    spreader.
    """

    spreader_liquid_rate: Optional[List[DataSpreaderLiquidRate]] = FieldInfo(alias="spreaderLiquidRate", default=None)
    """
    Liquid spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_on_state: Optional[List[DataSpreaderOnState]] = FieldInfo(alias="spreaderOnState", default=None)
    """Whether vehicle spreader is enabled."""

    spreader_plow_status: Optional[List[DataSpreaderPlowStatus]] = FieldInfo(alias="spreaderPlowStatus", default=None)
    """Snow plow status (`Up` or `Down`), as read from the material spreader.

    Note: this is separate from plow status defined via auxInput.
    """

    spreader_prewet_name: Optional[List[DataSpreaderPrewetName]] = FieldInfo(alias="spreaderPrewetName", default=None)
    """
    Name of most recent type of prewet material spread, read from the material
    spreader.
    """

    spreader_prewet_rate: Optional[List[DataSpreaderPrewetRate]] = FieldInfo(alias="spreaderPrewetRate", default=None)
    """
    Prewet spread rate reading in milliliters per meter, read from the material
    spreader. Unfiltered live stats are supplied as-read from the Material Spreader
    unit. Readings do not consider total spread rate(s) over time or distance.
    """

    spreader_road_temp: Optional[List[DataSpreaderRoadTemp]] = FieldInfo(alias="spreaderRoadTemp", default=None)
    """Road temperature reading in milli celsius from material spreader."""

    synthetic_engine_seconds: Optional[List[DataSyntheticEngineSecond]] = FieldInfo(
        alias="syntheticEngineSeconds", default=None
    )
    """A list of synthetic engine seconds values."""


class Pagination(BaseModel):
    end_cursor: str = FieldInfo(alias="endCursor")
    """Cursor identifier representing the last element in the response.

    This value should be used in conjunction with a subsequent request's 'after'
    query parameter. This may be an empty string if there are no more pages left to
    view.
    """

    has_next_page: bool = FieldInfo(alias="hasNextPage")
    """
    True if there are more pages of results immediately available after this
    endCursor.
    """


class VehicleStatsListResponse(BaseModel):
    data: List[Data]
    """A list of vehicles and an array of stat events for each vehicle."""

    pagination: Pagination
    """Pagination parameters."""
