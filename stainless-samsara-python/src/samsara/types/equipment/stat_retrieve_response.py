# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import List, Optional
from typing_extensions import Literal

from pydantic import Field as FieldInfo

from ..._models import BaseModel

__all__ = [
    "StatRetrieveResponse",
    "Data",
    "DataEngineRpm",
    "DataEngineSeconds",
    "DataEngineState",
    "DataFuelPercent",
    "DataGatewayEngineSeconds",
    "DataGatewayEngineState",
    "DataGps",
    "DataGpsAddress",
    "DataGpsReverseGeo",
    "DataGpsOdometerMeters",
    "DataObdEngineSeconds",
    "DataObdEngineState",
    "Pagination",
]


class DataEngineRpm(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: int
    """The revolutions per minute of the engine."""


class DataEngineSeconds(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: int
    """
    An approximation of the number of seconds the engine has been running since it
    was new, based on the amount of time the AG26 device is receiving power and an
    offset provided manually through the Samsara cloud dashboard.
    """


class DataEngineState(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: Literal["Off", "On"]
    """
    An approximation of engine state based on readings the AG26 receives from the
    aux/digio cable. Valid values: `Off`, `On`.
    """


class DataFuelPercent(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: int
    """The percent of fuel in the unit of equipment."""


class DataGatewayEngineSeconds(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: int
    """
    An approximation of the number of seconds the engine has been running since it
    was new, based on the amount of time the AG26 device is receiving power and an
    offset provided manually through the Samsara cloud dashboard.
    """


class DataGatewayEngineState(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: Literal["Off", "On"]
    """
    An approximation of engine state based on readings the AG26 receives from the
    aux/digio cable. Valid values: `Off`, `On`.
    """


class DataGpsAddress(BaseModel):
    id: Optional[str] = None
    """Address book identifier"""

    name: Optional[str] = None
    """Name of this address book entry"""


class DataGpsReverseGeo(BaseModel):
    formatted_location: Optional[str] = FieldInfo(alias="formattedLocation", default=None)
    """Formatted address of the reverse geocoding data."""


class DataGps(BaseModel):
    latitude: float
    """GPS latitude represented in degrees"""

    longitude: float
    """GPS longitude represented in degrees"""

    time: str
    """UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`."""

    address: Optional[DataGpsAddress] = None
    """Address book entry, if one exists"""

    heading_degrees: Optional[float] = FieldInfo(alias="headingDegrees", default=None)
    """Heading of the asset in degrees."""

    reverse_geo: Optional[DataGpsReverseGeo] = FieldInfo(alias="reverseGeo", default=None)
    """Reverse geocoded information."""

    speed_miles_per_hour: Optional[float] = FieldInfo(alias="speedMilesPerHour", default=None)
    """GPS speed of the asset in miles per hour."""


class DataGpsOdometerMeters(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: int
    """
    An approximation of odometer reading based on GPS calculations since the AG26
    was activated, and a manual odometer offset provided in the Samsara cloud
    dashboard.
    """


class DataObdEngineSeconds(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: int
    """The number of seconds the engine has been running since it was new.

    This value is provided directly from on-board diagnostics.
    """


class DataObdEngineState(BaseModel):
    time: str
    """
    UTC timestamp of the time the data point was generated by the equipment, in
    RFC3339 format.
    """

    value: Literal["Off", "On", "Idle"]
    """The state of the engine read from on-board diagnostics.

    Valid values: `Off`, `On`, `Idle`.
    """


class Data(BaseModel):
    id: str
    """Unique Samsara ID for the equipment."""

    name: str
    """Name of the equipment."""

    engine_rpm: Optional[DataEngineRpm] = FieldInfo(alias="engineRpm", default=None)
    """Engine RPM reading."""

    engine_seconds: Optional[DataEngineSeconds] = FieldInfo(alias="engineSeconds", default=None)
    """[DEPRECATED] Please use either `gatewayEngineSeconds` or `obdEngineSeconds`."""

    engine_state: Optional[DataEngineState] = FieldInfo(alias="engineState", default=None)
    """[DEPRECATED] Please use either `gatewayEngineStates` or `obdEngineStates`."""

    fuel_percent: Optional[DataFuelPercent] = FieldInfo(alias="fuelPercent", default=None)
    """Fuel percent reading."""

    gateway_engine_seconds: Optional[DataGatewayEngineSeconds] = FieldInfo(alias="gatewayEngineSeconds", default=None)
    """Engine seconds reading from the aux/digio cable."""

    gateway_engine_state: Optional[DataGatewayEngineState] = FieldInfo(alias="gatewayEngineState", default=None)
    """Engine state reading from the aux/digio cable."""

    gps: Optional[DataGps] = None
    """GPS location of equipment."""

    gps_odometer_meters: Optional[DataGpsOdometerMeters] = FieldInfo(alias="gpsOdometerMeters", default=None)
    """GPS odometer reading."""

    obd_engine_seconds: Optional[DataObdEngineSeconds] = FieldInfo(alias="obdEngineSeconds", default=None)
    """Engine seconds reading from on-board diagnostics."""

    obd_engine_state: Optional[DataObdEngineState] = FieldInfo(alias="obdEngineState", default=None)
    """Engine state reading from on-board diagnostics."""


class Pagination(BaseModel):
    end_cursor: str = FieldInfo(alias="endCursor")
    """Cursor identifier representing the last element in the response.

    This value should be used in conjunction with a subsequent request's 'after'
    query parameter. This may be an empty string if there are no more pages left to
    view.
    """

    has_next_page: bool = FieldInfo(alias="hasNextPage")
    """
    True if there are more pages of results immediately available after this
    endCursor.
    """


class StatRetrieveResponse(BaseModel):
    data: List[Data]
    """
    List of the most recent stats for the specified units of equipment and stat
    types.
    """

    pagination: Pagination
    """Pagination parameters."""
